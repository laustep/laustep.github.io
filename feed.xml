<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"
    xmlns:dc="http://purl.org/dc/elements/1.1/">
    <channel>
        <title>Saturn Elephant</title>
        <link>https://laustep.github.io/stlahblog</link>
        <description><![CDATA[A blog about R and more.]]></description>
        <atom:link href="https://laustep.github.io/stlahblog/feed.xml" rel="self"
                   type="application/rss+xml" />
        <lastBuildDate>Fri, 09 Oct 2020 00:00:00 UT</lastBuildDate>
        

<item>
    <title>My RGL artworks</title>
    <link>https://laustep.github.io/stlahblog/posts/MyRGLartworks.html</link>
    <description><![CDATA[
    <div class="container-fluid">
    <div class="row">
      <div class="main col-sm-12">
        <div id="header">
          <div id="logo">
            <a href="https://laustep.github.io/stlahblog/">
              <img src="https://laustep.github.io/stlahblog/images/stla.jpg" alt="stla" width="100px" />
            </a>
          </div>
          <div id="navigation" style="margin-top:50px;">
            <a href="https://laustep.github.io/stlahblog/">Home</a>
            <a href="https://laustep.github.io/stlahblog/about.html">About</a>
            <a href="https://laustep.github.io/stlahblog/contact.html">Contact</a>
            <a href="https://laustep.github.io/stlahblog/archive.html">Archive</a>
          </div>
        </div>

        <div class="content">
          <h1>My RGL artworks</h1> 
          <div class="info">
    Posted on October  8, 2020
    
        by Stéphane Laurent
    
</div>
<div class="info">
    
    Tags: <a title="All pages tagged &#39;geometry&#39;." href="https://laustep.github.io/stlahblog/tags/geometry.html">geometry</a>, <a title="All pages tagged &#39;graphics&#39;." href="https://laustep.github.io/stlahblog/tags/graphics.html">graphics</a>, <a title="All pages tagged &#39;R&#39;." href="https://laustep.github.io/stlahblog/tags/R.html">R</a>, <a title="All pages tagged &#39;rgl&#39;." href="https://laustep.github.io/stlahblog/tags/rgl.html">rgl</a>
    
</div>

<p>These are some of my artworks realized with the R package <code>rgl</code>. Source code is available in <a href="https://gist.github.com/stla">my gists</a>.</p>
<p><img src="https://camo.githubusercontent.com/3a27a77e8d60a10ea347017bb4f78a85f28dce7f/68747470733a2f2f7468756d62732e6766796361742e636f6d2f45737465656d656453686f7779446f6c7068696e2d73697a655f726573747269637465642e676966" /></p>
<p><img src="https://camo.githubusercontent.com/62bb1cef024c3353381dbadfdb75d8839d5ed1e3/68747470733a2f2f7468756d62732e6766796361742e636f6d2f48656c7066756c506c6173746963416e74626561722d73697a655f726573747269637465642e676966" /></p>
<p><img src="https://camo.githubusercontent.com/5ea6d902f0f85b3fff29e87251e6977e28ba0c3c/68747470733a2f2f7468756d62732e6766796361742e636f6d2f506c756d70496d70617373696f6e65644265617665722d73697a655f726573747269637465642e676966" /></p>
<p><img src="https://camo.githubusercontent.com/978e0f0f42673e22685f350e3c6dd6b1c8fe6dff/68747470733a2f2f7468756d62732e6766796361742e636f6d2f4269746573697a6564457175616c476175722d73697a655f726573747269637465642e676966" /></p>
<p><img src="https://camo.githubusercontent.com/93c6b1b2f80818492f9714858d7fc0ffe66f3266/68747470733a2f2f7468756d62732e6766796361742e636f6d2f416d626974696f757354616d6541646461782d73697a655f726573747269637465642e676966" /></p>
<p><img src="https://camo.githubusercontent.com/d1e218228c4efdf6085e5ae80f5cc9feeea1e04d/68747470733a2f2f7468756d62732e6766796361742e636f6d2f4b696e64686561727465644f726e6572794865646765686f672d73697a655f726573747269637465642e676966" /></p>
<p><img src="https://camo.githubusercontent.com/dcd38ed43716c092ae0723d1075b32e082a6cd5b/68747470733a2f2f7468756d62732e6766796361742e636f6d2f466c6177656453656c6672656c69616e7443697272697065642d73697a655f726573747269637465642e676966" /></p>
<p><img src="https://camo.githubusercontent.com/5ed40dd4b6e85f75621a47d3dc4230e1ad46dc75/68747470733a2f2f7468756d62732e6766796361742e636f6d2f556e73746561647957656570794672696c6c6e65636b65646c697a6172642d73697a655f726573747269637465642e676966" /></p>
<p><img src="https://camo.githubusercontent.com/14d6b4ef37daab1a761c14cc4e237510958615ae/68747470733a2f2f7468756d62732e6766796361742e636f6d2f59656c6c6f77496465616c496e6368776f726d2d73697a655f726573747269637465642e676966" /></p>
<p><img src="https://camo.githubusercontent.com/9b47e1d657392cd29e9d684864b0d531d701cf18/68747470733a2f2f7468756d62732e6766796361742e636f6d2f426f6e794964656e746963616c426f696c77656576696c2d73697a655f726573747269637465642e676966" /></p>
<p><img src="https://camo.githubusercontent.com/59629ef36e30e73ebf584a45435a5e9fcd8ab1ae/68747470733a2f2f7468756d62732e6766796361742e636f6d2f4c696b656c794561726c7942656e67616c74696765722d73697a655f726573747269637465642e676966" /></p>
<p><img src="https://camo.githubusercontent.com/94af9461f70bf88fed1ce3eaa9fbf0374b5d0883/68747470733a2f2f7468756d62732e6766796361742e636f6d2f5765656b6c79517561727465726c794963746572696e65776172626c65722d73697a655f726573747269637465642e676966" /></p>
<p><img src="https://camo.githubusercontent.com/460582ebfe5d8ef2724fb11970e634385a3ecc4d/68747470733a2f2f7468756d62732e6766796361742e636f6d2f546f726e536e65616b794b6f616c61626561722d73697a655f726573747269637465642e676966" /></p>
<p><img src="https://camo.githubusercontent.com/9cb20d35d9ad95e96c76946e65c3165d91726006/68747470733a2f2f7468756d62732e6766796361742e636f6d2f556e666f7274756e617465436172656672656547726f756e64626565746c652d73697a655f726573747269637465642e676966" /></p>
<p><img src="https://camo.githubusercontent.com/ff1d85320bd032c9082b008b6dec2df37ea073b8/68747470733a2f2f7468756d62732e6766796361742e636f6d2f46616d6f75734c6176697368416e7469706f646573677265656e706172616b6565742d73697a655f726573747269637465642e676966" /></p>
<p><img src="https://camo.githubusercontent.com/6a397f4022cb0794053f7e3f980dbf50e119c10c/68747470733a2f2f7468756d62732e6766796361742e636f6d2f537069666679536d616c6c42757a7a6172642d73697a655f726573747269637465642e676966" /></p>
<p><img src="https://camo.githubusercontent.com/184b3b5000b26e83ea3fe399352105d07df746d5/68747470733a2f2f7468756d62732e6766796361742e636f6d2f43697263756c6172536d6172744861636b65652d73697a655f726573747269637465642e676966" /></p>
<p><img src="https://camo.githubusercontent.com/abacd39b34b5b57c6c9db5d9c11c1b07c59de371/68747470733a2f2f7468756d62732e6766796361742e636f6d2f536572696f7573446972656374426f6e6f626f2d73697a655f726573747269637465642e676966" /></p>

        </div>


        <div id="footer">
          Site proudly generated by
          <a href="http://jaspervdj.be/hakyll">Hakyll</a>
        </div>

      </div>

    </div>

  </div>

]]></description>
    <pubDate>Thu, 08 Oct 2020 00:00:00 UT</pubDate>
    <guid>https://laustep.github.io/stlahblog/posts/MyRGLartworks.html</guid>
    <dc:creator>Stéphane Laurent</dc:creator>
    <category>R</category>
</item>




<item>
    <title>Child tables with DT, editing, exporting</title>
    <link>https://laustep.github.io/stlahblog/posts/DT_childTables.html</link>
    <description><![CDATA[
    <div class="container-fluid">
    <div class="row">
      <div class="main col-sm-12">
        <div id="header">
          <div id="logo">
            <a href="https://laustep.github.io/stlahblog/">
              <img src="https://laustep.github.io/stlahblog/images/stla.jpg" alt="stla" width="100px" />
            </a>
          </div>
          <div id="navigation" style="margin-top:50px;">
            <a href="https://laustep.github.io/stlahblog/">Home</a>
            <a href="https://laustep.github.io/stlahblog/about.html">About</a>
            <a href="https://laustep.github.io/stlahblog/contact.html">Contact</a>
            <a href="https://laustep.github.io/stlahblog/archive.html">Archive</a>
          </div>
        </div>

        <div class="content">
          <h1>Child tables with DT, editing, exporting</h1> 
          <div class="info">
    Posted on May  8, 2020
    
        by Stéphane Laurent
    
</div>
<div class="info">
    
    Tags: <a title="All pages tagged &#39;R&#39;." href="https://laustep.github.io/stlahblog/tags/R.html">R</a>, <a title="All pages tagged &#39;datatables&#39;." href="https://laustep.github.io/stlahblog/tags/datatables.html">datatables</a>, <a title="All pages tagged &#39;shiny&#39;." href="https://laustep.github.io/stlahblog/tags/shiny.html">shiny</a>, <a title="All pages tagged &#39;javascript&#39;." href="https://laustep.github.io/stlahblog/tags/javascript.html">javascript</a>
    
</div>

<p>I’m going to show how to use the <code>DT</code> package to do a table with child tables, and how to edit and export such a table.</p>
<p>In order to do a table with child tables, one adds a list column to the dataframe of the main table; each cell of this column contains the child table of the corresponding row, given as a list. This is done by the <code>NestedData</code> function below.</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode numberSource r numberLines"><code class="sourceCode r"><span id="cb1-1"><a href="#cb1-1"></a>NestedData &lt;-<span class="st"> </span><span class="cf">function</span>(dat, children){</span>
<span id="cb1-2"><a href="#cb1-2"></a>  <span class="kw">stopifnot</span>(<span class="kw">length</span>(children) <span class="op">==</span><span class="st"> </span><span class="kw">nrow</span>(dat))</span>
<span id="cb1-3"><a href="#cb1-3"></a>  g &lt;-<span class="st"> </span><span class="cf">function</span>(d){</span>
<span id="cb1-4"><a href="#cb1-4"></a>    <span class="cf">if</span>(<span class="kw">is.data.frame</span>(d)){</span>
<span id="cb1-5"><a href="#cb1-5"></a>      purrr<span class="op">::</span><span class="kw">transpose</span>(d)</span>
<span id="cb1-6"><a href="#cb1-6"></a>    }<span class="cf">else</span>{</span>
<span id="cb1-7"><a href="#cb1-7"></a>      purrr<span class="op">::</span><span class="kw">transpose</span>(<span class="kw">NestedData</span>(d[[<span class="dv">1</span>]], <span class="dt">children =</span> d<span class="op">$</span>children))</span>
<span id="cb1-8"><a href="#cb1-8"></a>    }</span>
<span id="cb1-9"><a href="#cb1-9"></a>  }</span>
<span id="cb1-10"><a href="#cb1-10"></a>  subdats &lt;-<span class="st"> </span><span class="kw">lapply</span>(children, g)</span>
<span id="cb1-11"><a href="#cb1-11"></a>  oplus &lt;-<span class="st"> </span><span class="kw">ifelse</span>(<span class="kw">lengths</span>(subdats), <span class="st">&quot;&amp;oplus;&quot;</span>, <span class="st">&quot;&quot;</span>) </span>
<span id="cb1-12"><a href="#cb1-12"></a>  <span class="kw">cbind</span>(<span class="st">&quot; &quot;</span> =<span class="st"> </span>oplus, dat, <span class="st">&quot;_details&quot;</span> =<span class="st"> </span><span class="kw">I</span>(subdats), </span>
<span id="cb1-13"><a href="#cb1-13"></a>        <span class="dt">stringsAsFactors =</span> <span class="ot">FALSE</span>)</span>
<span id="cb1-14"><a href="#cb1-14"></a>}</span></code></pre></div>
<p>The usage of <code>NestedData</code> is easy to understand with an example:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode numberSource r numberLines"><code class="sourceCode r"><span id="cb2-1"><a href="#cb2-1"></a>dat0   =<span class="st"> </span>iris[<span class="dv">1</span><span class="op">:</span><span class="dv">3</span>,]        <span class="co"># main table, with three rows</span></span>
<span id="cb2-2"><a href="#cb2-2"></a>dat01  =<span class="st"> </span>airquality[<span class="dv">1</span><span class="op">:</span><span class="dv">4</span>,]  <span class="co"># |- child of first row</span></span>
<span id="cb2-3"><a href="#cb2-3"></a>dat02  =<span class="st"> </span>cars[<span class="dv">1</span><span class="op">:</span><span class="dv">2</span>,]        <span class="co"># |- child of second row, with two rows</span></span>
<span id="cb2-4"><a href="#cb2-4"></a>dat021 =<span class="st"> </span>mtcars[<span class="dv">1</span><span class="op">:</span><span class="dv">3</span>,]      <span class="co"># |  |- child of first row of dat02</span></span>
<span id="cb2-5"><a href="#cb2-5"></a>dat022 =<span class="st"> </span>PlantGrowth[<span class="dv">1</span><span class="op">:</span><span class="dv">4</span>,] <span class="co"># |  |- child of second row of dat02</span></span>
<span id="cb2-6"><a href="#cb2-6"></a>dat03  =<span class="st"> </span><span class="kw">data.frame</span>(<span class="ot">NULL</span>)  <span class="co"># |- third row has no child</span></span>
<span id="cb2-7"><a href="#cb2-7"></a></span>
<span id="cb2-8"><a href="#cb2-8"></a>Dat &lt;-<span class="st"> </span><span class="kw">NestedData</span>(</span>
<span id="cb2-9"><a href="#cb2-9"></a>  <span class="dt">dat =</span> dat0, </span>
<span id="cb2-10"><a href="#cb2-10"></a>  <span class="dt">children =</span> <span class="kw">list</span>(</span>
<span id="cb2-11"><a href="#cb2-11"></a>    dat01, </span>
<span id="cb2-12"><a href="#cb2-12"></a>    <span class="kw">list</span>(  </span>
<span id="cb2-13"><a href="#cb2-13"></a>      dat02, </span>
<span id="cb2-14"><a href="#cb2-14"></a>      <span class="dt">children =</span> <span class="kw">list</span>(</span>
<span id="cb2-15"><a href="#cb2-15"></a>        dat021, </span>
<span id="cb2-16"><a href="#cb2-16"></a>        dat022</span>
<span id="cb2-17"><a href="#cb2-17"></a>      )</span>
<span id="cb2-18"><a href="#cb2-18"></a>    ), </span>
<span id="cb2-19"><a href="#cb2-19"></a>    dat03 </span>
<span id="cb2-20"><a href="#cb2-20"></a>  )</span>
<span id="cb2-21"><a href="#cb2-21"></a>)</span></code></pre></div>
<p>Now we define the JavaScript callback which will be used. The code depends on whether one wants to display the row names of the main table, so the user has to enter this information before.</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode numberSource r numberLines"><code class="sourceCode r"><span id="cb3-1"><a href="#cb3-1"></a><span class="kw">library</span>(DT)</span>
<span id="cb3-2"><a href="#cb3-2"></a></span>
<span id="cb3-3"><a href="#cb3-3"></a><span class="co">## whether to show row names</span></span>
<span id="cb3-4"><a href="#cb3-4"></a>rowNames =<span class="st"> </span><span class="ot">FALSE</span></span>
<span id="cb3-5"><a href="#cb3-5"></a>colIdx &lt;-<span class="st"> </span><span class="kw">as.integer</span>(rowNames)</span>
<span id="cb3-6"><a href="#cb3-6"></a></span>
<span id="cb3-7"><a href="#cb3-7"></a><span class="co">## the callback</span></span>
<span id="cb3-8"><a href="#cb3-8"></a>parentRows &lt;-<span class="st"> </span><span class="kw">which</span>(Dat[,<span class="dv">1</span>] <span class="op">!=</span><span class="st"> &quot;&quot;</span>)</span>
<span id="cb3-9"><a href="#cb3-9"></a>callback &lt;-<span class="st"> </span><span class="kw">JS</span>(</span>
<span id="cb3-10"><a href="#cb3-10"></a>  <span class="kw">sprintf</span>(<span class="st">&quot;var parentRows = [%s];&quot;</span>, <span class="kw">toString</span>(parentRows<span class="dv">-1</span>)),</span>
<span id="cb3-11"><a href="#cb3-11"></a>  <span class="kw">sprintf</span>(<span class="st">&quot;var j0 = %d;&quot;</span>, colIdx),</span>
<span id="cb3-12"><a href="#cb3-12"></a>  <span class="st">&quot;var nrows = table.rows().count();&quot;</span>,</span>
<span id="cb3-13"><a href="#cb3-13"></a>  <span class="st">&quot;for(let i = 0; i &lt; nrows; ++i){&quot;</span>,</span>
<span id="cb3-14"><a href="#cb3-14"></a>  <span class="st">&quot;  var $cell = table.cell(i,j0).nodes().to$();&quot;</span>,</span>
<span id="cb3-15"><a href="#cb3-15"></a>  <span class="st">&quot;  if(parentRows.indexOf(i) &gt; -1){&quot;</span>,</span>
<span id="cb3-16"><a href="#cb3-16"></a>  <span class="st">&quot;    $cell.css({cursor: &#39;pointer&#39;});&quot;</span>,</span>
<span id="cb3-17"><a href="#cb3-17"></a>  <span class="st">&quot;  }else{&quot;</span>,</span>
<span id="cb3-18"><a href="#cb3-18"></a>  <span class="st">&quot;    $cell.removeClass(&#39;details-control&#39;);&quot;</span>,</span>
<span id="cb3-19"><a href="#cb3-19"></a>  <span class="st">&quot;  }&quot;</span>,</span>
<span id="cb3-20"><a href="#cb3-20"></a>  <span class="st">&quot;}&quot;</span>,</span>
<span id="cb3-21"><a href="#cb3-21"></a>  <span class="st">&quot;&quot;</span>,</span>
<span id="cb3-22"><a href="#cb3-22"></a>  <span class="st">&quot;// --- make the table header of the nested table --- //&quot;</span>,</span>
<span id="cb3-23"><a href="#cb3-23"></a>  <span class="st">&quot;var formatHeader = function(d, childId){&quot;</span>,</span>
<span id="cb3-24"><a href="#cb3-24"></a>  <span class="st">&quot;  if(d !== null){&quot;</span>,</span>
<span id="cb3-25"><a href="#cb3-25"></a>  <span class="st">&quot;    var html = &quot;</span>, </span>
<span id="cb3-26"><a href="#cb3-26"></a>  <span class="st">&quot;      &#39;&lt;table class=</span><span class="ch">\&quot;</span><span class="st">display compact hover</span><span class="ch">\&quot;</span><span class="st"> &#39; + &quot;</span>,</span>
<span id="cb3-27"><a href="#cb3-27"></a>  <span class="st">&quot;      &#39;style=</span><span class="ch">\&quot;</span><span class="st">padding-left: 30px;</span><span class="ch">\&quot;</span><span class="st"> id=</span><span class="ch">\&quot;</span><span class="st">&#39; + childId + &quot;</span>, </span>
<span id="cb3-28"><a href="#cb3-28"></a>  <span class="st">&quot;      &#39;</span><span class="ch">\&quot;</span><span class="st">&gt;&lt;thead&gt;&lt;tr&gt;&#39;;&quot;</span>,</span>
<span id="cb3-29"><a href="#cb3-29"></a>  <span class="st">&quot;    var data = d[d.length-1] || d._details;&quot;</span>,</span>
<span id="cb3-30"><a href="#cb3-30"></a>  <span class="st">&quot;    for(let key in data[0]){&quot;</span>,</span>
<span id="cb3-31"><a href="#cb3-31"></a>  <span class="st">&quot;      html += &#39;&lt;th&gt;&#39; + key + &#39;&lt;/th&gt;&#39;;&quot;</span>,</span>
<span id="cb3-32"><a href="#cb3-32"></a>  <span class="st">&quot;    }&quot;</span>,</span>
<span id="cb3-33"><a href="#cb3-33"></a>  <span class="st">&quot;    html += &#39;&lt;/tr&gt;&lt;/thead&gt;&lt;/table&gt;&#39;&quot;</span>,</span>
<span id="cb3-34"><a href="#cb3-34"></a>  <span class="st">&quot;    return html;&quot;</span>,</span>
<span id="cb3-35"><a href="#cb3-35"></a>  <span class="st">&quot;  } else {&quot;</span>,</span>
<span id="cb3-36"><a href="#cb3-36"></a>  <span class="st">&quot;    return &#39;&#39;;&quot;</span>,</span>
<span id="cb3-37"><a href="#cb3-37"></a>  <span class="st">&quot;  }&quot;</span>,</span>
<span id="cb3-38"><a href="#cb3-38"></a>  <span class="st">&quot;};&quot;</span>,</span>
<span id="cb3-39"><a href="#cb3-39"></a>  <span class="st">&quot;&quot;</span>,</span>
<span id="cb3-40"><a href="#cb3-40"></a>  <span class="st">&quot;// --- row callback to style rows of child tables --- //&quot;</span>,</span>
<span id="cb3-41"><a href="#cb3-41"></a>  <span class="st">&quot;var rowCallback = function(row, dat, displayNum, index){&quot;</span>,</span>
<span id="cb3-42"><a href="#cb3-42"></a>  <span class="st">&quot;  if($(row).hasClass(&#39;odd&#39;)){&quot;</span>,</span>
<span id="cb3-43"><a href="#cb3-43"></a>  <span class="st">&quot;    $(row).css(&#39;background-color&#39;, &#39;papayawhip&#39;);&quot;</span>,</span>
<span id="cb3-44"><a href="#cb3-44"></a>  <span class="st">&quot;    $(row).hover(function(){&quot;</span>,</span>
<span id="cb3-45"><a href="#cb3-45"></a>  <span class="st">&quot;      $(this).css(&#39;background-color&#39;, &#39;#E6FF99&#39;);&quot;</span>,</span>
<span id="cb3-46"><a href="#cb3-46"></a>  <span class="st">&quot;    }, function(){&quot;</span>,</span>
<span id="cb3-47"><a href="#cb3-47"></a>  <span class="st">&quot;      $(this).css(&#39;background-color&#39;, &#39;papayawhip&#39;);&quot;</span>,</span>
<span id="cb3-48"><a href="#cb3-48"></a>  <span class="st">&quot;    });&quot;</span>,</span>
<span id="cb3-49"><a href="#cb3-49"></a>  <span class="st">&quot;  } else {&quot;</span>,</span>
<span id="cb3-50"><a href="#cb3-50"></a>  <span class="st">&quot;    $(row).css(&#39;background-color&#39;, &#39;lemonchiffon&#39;);&quot;</span>,</span>
<span id="cb3-51"><a href="#cb3-51"></a>  <span class="st">&quot;    $(row).hover(function(){&quot;</span>,</span>
<span id="cb3-52"><a href="#cb3-52"></a>  <span class="st">&quot;      $(this).css(&#39;background-color&#39;, &#39;#DDFF75&#39;);&quot;</span>,</span>
<span id="cb3-53"><a href="#cb3-53"></a>  <span class="st">&quot;    }, function(){&quot;</span>,</span>
<span id="cb3-54"><a href="#cb3-54"></a>  <span class="st">&quot;      $(this).css(&#39;background-color&#39;, &#39;lemonchiffon&#39;);&quot;</span>,</span>
<span id="cb3-55"><a href="#cb3-55"></a>  <span class="st">&quot;    });&quot;</span>,</span>
<span id="cb3-56"><a href="#cb3-56"></a>  <span class="st">&quot;  }&quot;</span>,</span>
<span id="cb3-57"><a href="#cb3-57"></a>  <span class="st">&quot;};&quot;</span>,</span>
<span id="cb3-58"><a href="#cb3-58"></a>  <span class="st">&quot;&quot;</span>,</span>
<span id="cb3-59"><a href="#cb3-59"></a>  <span class="st">&quot;// --- header callback to style header of child tables --- //&quot;</span>,</span>
<span id="cb3-60"><a href="#cb3-60"></a>  <span class="st">&quot;var headerCallback = function(thead, data, start, end, display){&quot;</span>,</span>
<span id="cb3-61"><a href="#cb3-61"></a>  <span class="st">&quot;  $(&#39;th&#39;, thead).css({&quot;</span>,</span>
<span id="cb3-62"><a href="#cb3-62"></a>  <span class="st">&quot;    &#39;border-top&#39;: &#39;3px solid indigo&#39;,&quot;</span>, </span>
<span id="cb3-63"><a href="#cb3-63"></a>  <span class="st">&quot;    &#39;color&#39;: &#39;indigo&#39;,&quot;</span>,</span>
<span id="cb3-64"><a href="#cb3-64"></a>  <span class="st">&quot;    &#39;background-color&#39;: &#39;#fadadd&#39;&quot;</span>,</span>
<span id="cb3-65"><a href="#cb3-65"></a>  <span class="st">&quot;  });&quot;</span>,</span>
<span id="cb3-66"><a href="#cb3-66"></a>  <span class="st">&quot;};&quot;</span>,</span>
<span id="cb3-67"><a href="#cb3-67"></a>  <span class="st">&quot;&quot;</span>,</span>
<span id="cb3-68"><a href="#cb3-68"></a>  <span class="st">&quot;// --- make the datatable --- //&quot;</span>,</span>
<span id="cb3-69"><a href="#cb3-69"></a>  <span class="st">&quot;var formatDatatable = function(d, childId){&quot;</span>,</span>
<span id="cb3-70"><a href="#cb3-70"></a>  <span class="st">&quot;  var data = d[d.length-1] || d._details;&quot;</span>,</span>
<span id="cb3-71"><a href="#cb3-71"></a>  <span class="st">&quot;  var colNames = Object.keys(data[0]);&quot;</span>,</span>
<span id="cb3-72"><a href="#cb3-72"></a>  <span class="st">&quot;  var columns = colNames.map(function(x){&quot;</span>,</span>
<span id="cb3-73"><a href="#cb3-73"></a>  <span class="st">&quot;    return {data: x.replace(/</span><span class="ch">\\</span><span class="st">./g, &#39;</span><span class="ch">\\\\\\</span><span class="st">.&#39;), title: x};&quot;</span>,</span>
<span id="cb3-74"><a href="#cb3-74"></a>  <span class="st">&quot;  });&quot;</span>,</span>
<span id="cb3-75"><a href="#cb3-75"></a>  <span class="st">&quot;  var id = &#39;table#&#39; + childId;&quot;</span>,</span>
<span id="cb3-76"><a href="#cb3-76"></a>  <span class="st">&quot;  if(colNames.indexOf(&#39;_details&#39;) === -1){&quot;</span>,</span>
<span id="cb3-77"><a href="#cb3-77"></a>  <span class="st">&quot;    var subtable = $(id).DataTable({&quot;</span>,</span>
<span id="cb3-78"><a href="#cb3-78"></a>  <span class="st">&quot;      &#39;data&#39;: data,&quot;</span>,</span>
<span id="cb3-79"><a href="#cb3-79"></a>  <span class="st">&quot;      &#39;columns&#39;: columns,&quot;</span>,</span>
<span id="cb3-80"><a href="#cb3-80"></a>  <span class="st">&quot;      &#39;autoWidth&#39;: true,&quot;</span>,</span>
<span id="cb3-81"><a href="#cb3-81"></a>  <span class="st">&quot;      &#39;deferRender&#39;: true,&quot;</span>,</span>
<span id="cb3-82"><a href="#cb3-82"></a>  <span class="st">&quot;      &#39;info&#39;: false,&quot;</span>,</span>
<span id="cb3-83"><a href="#cb3-83"></a>  <span class="st">&quot;      &#39;lengthChange&#39;: false,&quot;</span>,</span>
<span id="cb3-84"><a href="#cb3-84"></a>  <span class="st">&quot;      &#39;ordering&#39;: data.length &gt; 1,&quot;</span>,</span>
<span id="cb3-85"><a href="#cb3-85"></a>  <span class="st">&quot;      &#39;order&#39;: [],&quot;</span>,</span>
<span id="cb3-86"><a href="#cb3-86"></a>  <span class="st">&quot;      &#39;paging&#39;: false,&quot;</span>,</span>
<span id="cb3-87"><a href="#cb3-87"></a>  <span class="st">&quot;      &#39;scrollX&#39;: false,&quot;</span>,</span>
<span id="cb3-88"><a href="#cb3-88"></a>  <span class="st">&quot;      &#39;scrollY&#39;: false,&quot;</span>,</span>
<span id="cb3-89"><a href="#cb3-89"></a>  <span class="st">&quot;      &#39;searching&#39;: false,&quot;</span>,</span>
<span id="cb3-90"><a href="#cb3-90"></a>  <span class="st">&quot;      &#39;sortClasses&#39;: false,&quot;</span>,</span>
<span id="cb3-91"><a href="#cb3-91"></a>  <span class="st">&quot;      &#39;rowCallback&#39;: rowCallback,&quot;</span>,</span>
<span id="cb3-92"><a href="#cb3-92"></a>  <span class="st">&quot;      &#39;headerCallback&#39;: headerCallback,&quot;</span>,</span>
<span id="cb3-93"><a href="#cb3-93"></a>  <span class="st">&quot;      &#39;columnDefs&#39;: [{targets: &#39;_all&#39;, className: &#39;dt-center&#39;}]&quot;</span>,</span>
<span id="cb3-94"><a href="#cb3-94"></a>  <span class="st">&quot;    });&quot;</span>,</span>
<span id="cb3-95"><a href="#cb3-95"></a>  <span class="st">&quot;  } else {&quot;</span>,</span>
<span id="cb3-96"><a href="#cb3-96"></a>  <span class="st">&quot;    var subtable = $(id).DataTable({&quot;</span>,</span>
<span id="cb3-97"><a href="#cb3-97"></a>  <span class="st">&quot;      &#39;data&#39;: data,&quot;</span>,</span>
<span id="cb3-98"><a href="#cb3-98"></a>  <span class="st">&quot;      &#39;columns&#39;: columns,&quot;</span>,</span>
<span id="cb3-99"><a href="#cb3-99"></a>  <span class="st">&quot;      &#39;autoWidth&#39;: true,&quot;</span>,</span>
<span id="cb3-100"><a href="#cb3-100"></a>  <span class="st">&quot;      &#39;deferRender&#39;: true,&quot;</span>,</span>
<span id="cb3-101"><a href="#cb3-101"></a>  <span class="st">&quot;      &#39;info&#39;: false,&quot;</span>,</span>
<span id="cb3-102"><a href="#cb3-102"></a>  <span class="st">&quot;      &#39;lengthChange&#39;: false,&quot;</span>,</span>
<span id="cb3-103"><a href="#cb3-103"></a>  <span class="st">&quot;      &#39;ordering&#39;: data.length &gt; 1,&quot;</span>,</span>
<span id="cb3-104"><a href="#cb3-104"></a>  <span class="st">&quot;      &#39;order&#39;: [],&quot;</span>,</span>
<span id="cb3-105"><a href="#cb3-105"></a>  <span class="st">&quot;      &#39;paging&#39;: false,&quot;</span>,</span>
<span id="cb3-106"><a href="#cb3-106"></a>  <span class="st">&quot;      &#39;scrollX&#39;: false,&quot;</span>,</span>
<span id="cb3-107"><a href="#cb3-107"></a>  <span class="st">&quot;      &#39;scrollY&#39;: false,&quot;</span>,</span>
<span id="cb3-108"><a href="#cb3-108"></a>  <span class="st">&quot;      &#39;searching&#39;: false,&quot;</span>,</span>
<span id="cb3-109"><a href="#cb3-109"></a>  <span class="st">&quot;      &#39;sortClasses&#39;: false,&quot;</span>,</span>
<span id="cb3-110"><a href="#cb3-110"></a>  <span class="st">&quot;      &#39;rowCallback&#39;: rowCallback,&quot;</span>,</span>
<span id="cb3-111"><a href="#cb3-111"></a>  <span class="st">&quot;      &#39;headerCallback&#39;: headerCallback,&quot;</span>,</span>
<span id="cb3-112"><a href="#cb3-112"></a>  <span class="st">&quot;      &#39;columnDefs&#39;: [&quot;</span>, </span>
<span id="cb3-113"><a href="#cb3-113"></a>  <span class="st">&quot;        {targets: -1, visible: false},&quot;</span>, </span>
<span id="cb3-114"><a href="#cb3-114"></a>  <span class="st">&quot;        {targets: 0, orderable: false, className: &#39;details-control&#39;},&quot;</span>, </span>
<span id="cb3-115"><a href="#cb3-115"></a>  <span class="st">&quot;        {targets: &#39;_all&#39;, className: &#39;dt-center&#39;}&quot;</span>,</span>
<span id="cb3-116"><a href="#cb3-116"></a>  <span class="st">&quot;      ]&quot;</span>,</span>
<span id="cb3-117"><a href="#cb3-117"></a>  <span class="st">&quot;    }).column(0).nodes().to$().css({cursor: &#39;pointer&#39;});&quot;</span>,</span>
<span id="cb3-118"><a href="#cb3-118"></a>  <span class="st">&quot;  }&quot;</span>,</span>
<span id="cb3-119"><a href="#cb3-119"></a>  <span class="st">&quot;};&quot;</span>,</span>
<span id="cb3-120"><a href="#cb3-120"></a>  <span class="st">&quot;&quot;</span>,</span>
<span id="cb3-121"><a href="#cb3-121"></a>  <span class="st">&quot;// --- display the child table on click --- //&quot;</span>,</span>
<span id="cb3-122"><a href="#cb3-122"></a>  <span class="st">&quot;// array to store id&#39;s of already created child tables&quot;</span>,</span>
<span id="cb3-123"><a href="#cb3-123"></a>  <span class="st">&quot;var children = [];&quot;</span>, </span>
<span id="cb3-124"><a href="#cb3-124"></a>  <span class="st">&quot;table.on(&#39;click&#39;, &#39;td.details-control&#39;, function(){&quot;</span>,</span>
<span id="cb3-125"><a href="#cb3-125"></a>  <span class="st">&quot;  var tbl = $(this).closest(&#39;table&#39;),&quot;</span>,</span>
<span id="cb3-126"><a href="#cb3-126"></a>  <span class="st">&quot;      tblId = tbl.attr(&#39;id&#39;),&quot;</span>,</span>
<span id="cb3-127"><a href="#cb3-127"></a>  <span class="st">&quot;      td = $(this),&quot;</span>,</span>
<span id="cb3-128"><a href="#cb3-128"></a>  <span class="st">&quot;      row = $(tbl).DataTable().row(td.closest(&#39;tr&#39;)),&quot;</span>,</span>
<span id="cb3-129"><a href="#cb3-129"></a>  <span class="st">&quot;      rowIdx = row.index();&quot;</span>,</span>
<span id="cb3-130"><a href="#cb3-130"></a>  <span class="st">&quot;  if(row.child.isShown()){&quot;</span>,</span>
<span id="cb3-131"><a href="#cb3-131"></a>  <span class="st">&quot;    row.child.hide();&quot;</span>,</span>
<span id="cb3-132"><a href="#cb3-132"></a>  <span class="st">&quot;    td.html(&#39;&amp;oplus;&#39;);&quot;</span>,</span>
<span id="cb3-133"><a href="#cb3-133"></a>  <span class="st">&quot;  } else {&quot;</span>,</span>
<span id="cb3-134"><a href="#cb3-134"></a>  <span class="st">&quot;    var childId = tblId + &#39;-child-&#39; + rowIdx;&quot;</span>,</span>
<span id="cb3-135"><a href="#cb3-135"></a>  <span class="st">&quot;    if(children.indexOf(childId) === -1){&quot;</span>, </span>
<span id="cb3-136"><a href="#cb3-136"></a>  <span class="st">&quot;      // this child has not been created yet&quot;</span>,</span>
<span id="cb3-137"><a href="#cb3-137"></a>  <span class="st">&quot;      children.push(childId);&quot;</span>,</span>
<span id="cb3-138"><a href="#cb3-138"></a>  <span class="st">&quot;      row.child(formatHeader(row.data(), childId)).show();&quot;</span>,</span>
<span id="cb3-139"><a href="#cb3-139"></a>  <span class="st">&quot;      td.html(&#39;&amp;CircleMinus;&#39;);&quot;</span>,</span>
<span id="cb3-140"><a href="#cb3-140"></a>  <span class="st">&quot;      formatDatatable(row.data(), childId, rowIdx);&quot;</span>,</span>
<span id="cb3-141"><a href="#cb3-141"></a>  <span class="st">&quot;    }else{&quot;</span>,</span>
<span id="cb3-142"><a href="#cb3-142"></a>  <span class="st">&quot;      // this child has already been created&quot;</span>,</span>
<span id="cb3-143"><a href="#cb3-143"></a>  <span class="st">&quot;      row.child(true);&quot;</span>,</span>
<span id="cb3-144"><a href="#cb3-144"></a>  <span class="st">&quot;      td.html(&#39;&amp;CircleMinus;&#39;);&quot;</span>,</span>
<span id="cb3-145"><a href="#cb3-145"></a>  <span class="st">&quot;    }&quot;</span>,</span>
<span id="cb3-146"><a href="#cb3-146"></a>  <span class="st">&quot;  }&quot;</span>,</span>
<span id="cb3-147"><a href="#cb3-147"></a>  <span class="st">&quot;});&quot;</span>)</span></code></pre></div>
<p>Now, here is the code which generates the table. The first column contains some HTML (⊕) so we have to not escape it. The last column contains the child data, it has to be hidden. Finally we assign the class <code>details-control</code> to the first column, this is used by the callback.</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode numberSource r numberLines"><code class="sourceCode r"><span id="cb4-1"><a href="#cb4-1"></a><span class="kw">datatable</span>(</span>
<span id="cb4-2"><a href="#cb4-2"></a>  Dat, </span>
<span id="cb4-3"><a href="#cb4-3"></a>  <span class="dt">callback =</span> callback, <span class="dt">rownames =</span> rowNames, <span class="dt">escape =</span> <span class="op">-</span>colIdx<span class="dv">-1</span>,</span>
<span id="cb4-4"><a href="#cb4-4"></a>  <span class="dt">options =</span> <span class="kw">list</span>(</span>
<span id="cb4-5"><a href="#cb4-5"></a>    <span class="dt">paging =</span> <span class="ot">FALSE</span>,</span>
<span id="cb4-6"><a href="#cb4-6"></a>    <span class="dt">searching =</span> <span class="ot">FALSE</span>,</span>
<span id="cb4-7"><a href="#cb4-7"></a>    <span class="dt">columnDefs =</span> <span class="kw">list</span>(</span>
<span id="cb4-8"><a href="#cb4-8"></a>      <span class="kw">list</span>(</span>
<span id="cb4-9"><a href="#cb4-9"></a>        <span class="dt">visible =</span> <span class="ot">FALSE</span>, </span>
<span id="cb4-10"><a href="#cb4-10"></a>        <span class="dt">targets =</span> <span class="kw">ncol</span>(Dat)<span class="op">-</span><span class="dv">1</span><span class="op">+</span>colIdx</span>
<span id="cb4-11"><a href="#cb4-11"></a>      ),</span>
<span id="cb4-12"><a href="#cb4-12"></a>      <span class="kw">list</span>(</span>
<span id="cb4-13"><a href="#cb4-13"></a>        <span class="dt">orderable =</span> <span class="ot">FALSE</span>, </span>
<span id="cb4-14"><a href="#cb4-14"></a>        <span class="dt">className =</span> <span class="st">&quot;details-control&quot;</span>, </span>
<span id="cb4-15"><a href="#cb4-15"></a>        <span class="dt">targets =</span> colIdx</span>
<span id="cb4-16"><a href="#cb4-16"></a>      ),</span>
<span id="cb4-17"><a href="#cb4-17"></a>      <span class="kw">list</span>(</span>
<span id="cb4-18"><a href="#cb4-18"></a>        <span class="dt">className =</span> <span class="st">&quot;dt-center&quot;</span>, </span>
<span id="cb4-19"><a href="#cb4-19"></a>        <span class="dt">targets =</span> <span class="st">&quot;_all&quot;</span></span>
<span id="cb4-20"><a href="#cb4-20"></a>      )</span>
<span id="cb4-21"><a href="#cb4-21"></a>    )</span>
<span id="cb4-22"><a href="#cb4-22"></a>  )</span>
<span id="cb4-23"><a href="#cb4-23"></a>)</span></code></pre></div>
<p><img src="https://laustep.github.io/stlahblog/posts/figures/DTchildRows1.gif" /></p>
<h1 id="editing">Editing</h1>
<p>We use the JavaScript library <a href="https://github.com/ejbeaty/CellEdit">CellEdit</a> to allow cells, including the cells of the child tables, to be editable. Download the file <strong>dataTables.cellEdit.js</strong>.</p>
<p>Some CSS is required in order to make things pretty. Save the following CSS code in a file <strong>dataTables.cellEdit.css</strong>.</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode css"><code class="sourceCode css"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true"></a><span class="fu">.my-input-class</span> {</span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true"></a>  <span class="kw">padding</span>: <span class="dv">3</span><span class="dt">px</span> <span class="dv">6</span><span class="dt">px</span><span class="op">;</span></span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true"></a>  <span class="kw">border</span>: <span class="dv">1</span><span class="dt">px</span> <span class="dv">solid</span> <span class="cn">#ccc</span><span class="op">;</span></span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true"></a>  <span class="kw">border-radius</span>: <span class="dv">4</span><span class="dt">px</span><span class="op">;</span></span>
<span id="cb5-5"><a href="#cb5-5" aria-hidden="true"></a>  <span class="kw">width</span>: <span class="dv">60</span><span class="dt">px</span><span class="op">;</span></span>
<span id="cb5-6"><a href="#cb5-6" aria-hidden="true"></a>}</span>
<span id="cb5-7"><a href="#cb5-7" aria-hidden="true"></a></span>
<span id="cb5-8"><a href="#cb5-8" aria-hidden="true"></a><span class="fu">.my-confirm-class</span> {</span>
<span id="cb5-9"><a href="#cb5-9" aria-hidden="true"></a>  <span class="kw">padding</span>: <span class="dv">3</span><span class="dt">px</span> <span class="dv">6</span><span class="dt">px</span><span class="op">;</span></span>
<span id="cb5-10"><a href="#cb5-10" aria-hidden="true"></a>  <span class="kw">font-size</span>: <span class="dv">12</span><span class="dt">px</span><span class="op">;</span></span>
<span id="cb5-11"><a href="#cb5-11" aria-hidden="true"></a>  <span class="kw">color</span>: <span class="cn">white</span><span class="op">;</span></span>
<span id="cb5-12"><a href="#cb5-12" aria-hidden="true"></a>  <span class="kw">text-align</span>: <span class="dv">center</span><span class="op">;</span></span>
<span id="cb5-13"><a href="#cb5-13" aria-hidden="true"></a>  <span class="kw">vertical-align</span>: <span class="dv">middle</span><span class="op">;</span></span>
<span id="cb5-14"><a href="#cb5-14" aria-hidden="true"></a>  <span class="kw">border-radius</span>: <span class="dv">4</span><span class="dt">px</span><span class="op">;</span></span>
<span id="cb5-15"><a href="#cb5-15" aria-hidden="true"></a>  <span class="kw">background-color</span>: <span class="cn">#337ab7</span><span class="op">;</span></span>
<span id="cb5-16"><a href="#cb5-16" aria-hidden="true"></a>  <span class="kw">text-decoration</span>: <span class="dv">none</span><span class="op">;</span></span>
<span id="cb5-17"><a href="#cb5-17" aria-hidden="true"></a>}</span>
<span id="cb5-18"><a href="#cb5-18" aria-hidden="true"></a></span>
<span id="cb5-19"><a href="#cb5-19" aria-hidden="true"></a><span class="fu">.my-cancel-class</span> {</span>
<span id="cb5-20"><a href="#cb5-20" aria-hidden="true"></a>  <span class="kw">padding</span>: <span class="dv">3</span><span class="dt">px</span> <span class="dv">6</span><span class="dt">px</span><span class="op">;</span></span>
<span id="cb5-21"><a href="#cb5-21" aria-hidden="true"></a>  <span class="kw">font-size</span>: <span class="dv">12</span><span class="dt">px</span><span class="op">;</span></span>
<span id="cb5-22"><a href="#cb5-22" aria-hidden="true"></a>  <span class="kw">color</span>: <span class="cn">white</span><span class="op">;</span></span>
<span id="cb5-23"><a href="#cb5-23" aria-hidden="true"></a>  <span class="kw">text-align</span>: <span class="dv">center</span><span class="op">;</span></span>
<span id="cb5-24"><a href="#cb5-24" aria-hidden="true"></a>  <span class="kw">vertical-align</span>: <span class="dv">middle</span><span class="op">;</span></span>
<span id="cb5-25"><a href="#cb5-25" aria-hidden="true"></a>  <span class="kw">border-radius</span>: <span class="dv">4</span><span class="dt">px</span><span class="op">;</span></span>
<span id="cb5-26"><a href="#cb5-26" aria-hidden="true"></a>  <span class="kw">background-color</span>: <span class="cn">#a94442</span><span class="op">;</span></span>
<span id="cb5-27"><a href="#cb5-27" aria-hidden="true"></a>  <span class="kw">text-decoration</span>: <span class="dv">none</span><span class="op">;</span></span>
<span id="cb5-28"><a href="#cb5-28" aria-hidden="true"></a>}</span></code></pre></div>
<p>Now modify the callback as follows:</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode numberSource r numberLines"><code class="sourceCode r"><span id="cb6-1"><a href="#cb6-1"></a>callback &lt;-<span class="st"> </span><span class="kw">JS</span>(</span>
<span id="cb6-2"><a href="#cb6-2"></a>  <span class="st">&quot;function onUpdate(updatedCell, updatedRow, oldValue) {};&quot;</span>,</span>
<span id="cb6-3"><a href="#cb6-3"></a>  <span class="st">&quot;table.MakeCellsEditable({&quot;</span>,</span>
<span id="cb6-4"><a href="#cb6-4"></a>  <span class="st">&quot;  onUpdate: onUpdate,&quot;</span>,</span>
<span id="cb6-5"><a href="#cb6-5"></a>  <span class="st">&quot;  inputCss: &#39;my-input-class&#39;,&quot;</span>,</span>
<span id="cb6-6"><a href="#cb6-6"></a>  <span class="st">&quot;  confirmationButton: {&quot;</span>,</span>
<span id="cb6-7"><a href="#cb6-7"></a>  <span class="st">&quot;    confirmCss: &#39;my-confirm-class&#39;,&quot;</span>,</span>
<span id="cb6-8"><a href="#cb6-8"></a>  <span class="st">&quot;    cancelCss: &#39;my-cancel-class&#39;&quot;</span>,</span>
<span id="cb6-9"><a href="#cb6-9"></a>  <span class="st">&quot;  }&quot;</span>,</span>
<span id="cb6-10"><a href="#cb6-10"></a>  <span class="st">&quot;});&quot;</span>,</span>
<span id="cb6-11"><a href="#cb6-11"></a>  <span class="kw">sprintf</span>(<span class="st">&quot;var parentRows = [%s];&quot;</span>, <span class="kw">toString</span>(parentRows<span class="dv">-1</span>)),</span>
<span id="cb6-12"><a href="#cb6-12"></a>  </span>
<span id="cb6-13"><a href="#cb6-13"></a>  ......</span>
<span id="cb6-14"><a href="#cb6-14"></a>  </span>
<span id="cb6-15"><a href="#cb6-15"></a>  <span class="st">&quot;// --- make the datatable --- //&quot;</span>,</span>
<span id="cb6-16"><a href="#cb6-16"></a>  <span class="st">&quot;var formatDatatable = function(d, childId){&quot;</span>,</span>
<span id="cb6-17"><a href="#cb6-17"></a>  </span>
<span id="cb6-18"><a href="#cb6-18"></a>  ......</span>
<span id="cb6-19"><a href="#cb6-19"></a></span>
<span id="cb6-20"><a href="#cb6-20"></a>  <span class="st">&quot;    }).column(0).nodes().to$().css({cursor: &#39;pointer&#39;});&quot;</span>,</span>
<span id="cb6-21"><a href="#cb6-21"></a>  <span class="st">&quot;  }&quot;</span>,</span>
<span id="cb6-22"><a href="#cb6-22"></a>  <span class="st">&quot;  subtable.MakeCellsEditable({&quot;</span>,</span>
<span id="cb6-23"><a href="#cb6-23"></a>  <span class="st">&quot;    onUpdate: onUpdate,&quot;</span>,</span>
<span id="cb6-24"><a href="#cb6-24"></a>  <span class="st">&quot;    inputCss: &#39;my-input-class&#39;,&quot;</span>,</span>
<span id="cb6-25"><a href="#cb6-25"></a>  <span class="st">&quot;    confirmationButton: {&quot;</span>,</span>
<span id="cb6-26"><a href="#cb6-26"></a>  <span class="st">&quot;      confirmCss: &#39;my-confirm-class&#39;,&quot;</span>,</span>
<span id="cb6-27"><a href="#cb6-27"></a>  <span class="st">&quot;      cancelCss: &#39;my-cancel-class&#39;&quot;</span>,</span>
<span id="cb6-28"><a href="#cb6-28"></a>  <span class="st">&quot;    }&quot;</span>,</span>
<span id="cb6-29"><a href="#cb6-29"></a>  <span class="st">&quot;  });&quot;</span>,</span>
<span id="cb6-30"><a href="#cb6-30"></a>  <span class="st">&quot;};&quot;</span>,</span>
<span id="cb6-31"><a href="#cb6-31"></a>  <span class="st">&quot;&quot;</span>,</span>
<span id="cb6-32"><a href="#cb6-32"></a>  <span class="st">&quot;// --- display the child table on click --- //&quot;</span>,</span>
<span id="cb6-33"><a href="#cb6-33"></a></span>
<span id="cb6-34"><a href="#cb6-34"></a>  ......</span>
<span id="cb6-35"><a href="#cb6-35"></a>  </span>
<span id="cb6-36"><a href="#cb6-36"></a>  <span class="st">&quot;});&quot;</span>)</span></code></pre></div>
<p>Use the same code as before to generate the table but store the output:</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode numberSource r numberLines"><code class="sourceCode r"><span id="cb7-1"><a href="#cb7-1"></a>dtable &lt;-<span class="st"> </span><span class="kw">datatable</span>(</span>
<span id="cb7-2"><a href="#cb7-2"></a>  Dat, </span>
<span id="cb7-3"><a href="#cb7-3"></a>  <span class="dt">callback =</span> callback, <span class="dt">rownames =</span> rowNames, <span class="dt">escape =</span> <span class="op">-</span>colIdx<span class="dv">-1</span>,</span>
<span id="cb7-4"><a href="#cb7-4"></a>  <span class="dt">options =</span> <span class="kw">list</span>(</span>
<span id="cb7-5"><a href="#cb7-5"></a>    <span class="dt">paging =</span> <span class="ot">FALSE</span>,</span>
<span id="cb7-6"><a href="#cb7-6"></a>    <span class="dt">searching =</span> <span class="ot">FALSE</span>,</span>
<span id="cb7-7"><a href="#cb7-7"></a>    <span class="dt">columnDefs =</span> <span class="kw">list</span>(</span>
<span id="cb7-8"><a href="#cb7-8"></a>      <span class="kw">list</span>(</span>
<span id="cb7-9"><a href="#cb7-9"></a>        <span class="dt">visible =</span> <span class="ot">FALSE</span>, </span>
<span id="cb7-10"><a href="#cb7-10"></a>        <span class="dt">targets =</span> <span class="kw">ncol</span>(Dat)<span class="op">-</span><span class="dv">1</span><span class="op">+</span>colIdx</span>
<span id="cb7-11"><a href="#cb7-11"></a>      ),</span>
<span id="cb7-12"><a href="#cb7-12"></a>      <span class="kw">list</span>(</span>
<span id="cb7-13"><a href="#cb7-13"></a>        <span class="dt">orderable =</span> <span class="ot">FALSE</span>, </span>
<span id="cb7-14"><a href="#cb7-14"></a>        <span class="dt">className =</span> <span class="st">&quot;details-control&quot;</span>, </span>
<span id="cb7-15"><a href="#cb7-15"></a>        <span class="dt">targets =</span> colIdx</span>
<span id="cb7-16"><a href="#cb7-16"></a>      ),</span>
<span id="cb7-17"><a href="#cb7-17"></a>      <span class="kw">list</span>(</span>
<span id="cb7-18"><a href="#cb7-18"></a>        <span class="dt">className =</span> <span class="st">&quot;dt-center&quot;</span>, </span>
<span id="cb7-19"><a href="#cb7-19"></a>        <span class="dt">targets =</span> <span class="st">&quot;_all&quot;</span></span>
<span id="cb7-20"><a href="#cb7-20"></a>      )</span>
<span id="cb7-21"><a href="#cb7-21"></a>    )</span>
<span id="cb7-22"><a href="#cb7-22"></a>  )</span>
<span id="cb7-23"><a href="#cb7-23"></a>)</span></code></pre></div>
<p>Now we add the dependencies to the <code>datatable</code>:</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode numberSource r numberLines"><code class="sourceCode r"><span id="cb8-1"><a href="#cb8-1"></a>path &lt;-<span class="st"> &quot;path/to/cellEdit&quot;</span> <span class="co"># folder containing the files </span></span>
<span id="cb8-2"><a href="#cb8-2"></a>                           <span class="co"># dataTables.cellEdit.js and </span></span>
<span id="cb8-3"><a href="#cb8-3"></a>                           <span class="co"># dataTables.cellEdit.css</span></span>
<span id="cb8-4"><a href="#cb8-4"></a>dep &lt;-<span class="st"> </span>htmltools<span class="op">::</span><span class="kw">htmlDependency</span>(</span>
<span id="cb8-5"><a href="#cb8-5"></a>  <span class="st">&quot;CellEdit&quot;</span>, <span class="st">&quot;1.0.19&quot;</span>, path, </span>
<span id="cb8-6"><a href="#cb8-6"></a>  <span class="dt">script =</span> <span class="st">&quot;dataTables.cellEdit.js&quot;</span>, </span>
<span id="cb8-7"><a href="#cb8-7"></a>  <span class="dt">stylesheet =</span> <span class="st">&quot;dataTables.cellEdit.css&quot;</span>)</span>
<span id="cb8-8"><a href="#cb8-8"></a>dtable<span class="op">$</span>dependencies &lt;-<span class="st"> </span><span class="kw">c</span>(dtable<span class="op">$</span>dependencies, <span class="kw">list</span>(dep))</span>
<span id="cb8-9"><a href="#cb8-9"></a></span>
<span id="cb8-10"><a href="#cb8-10"></a>dtable</span></code></pre></div>
<p><img src="https://laustep.github.io/stlahblog/posts/figures/DTchildRows2.gif" /></p>
<h1 id="exporting">Exporting</h1>
<p>Now we show how to export a table with its child tables to an Excel file, when there is only one level of child tables (<em>i.e.</em> when the child tables of the main table do not have child tables themselves). To do so, we use the <code>customize</code> callback of the Excel button provided by the <code>Buttons</code> extension. I found this code on the DataTables forum. In the first row of the callback, <code>mytable</code> is the id of the datatable:</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode js"><code class="sourceCode javascript"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true"></a><span class="kw">var</span> table <span class="op">=</span> <span class="fu">$</span>(<span class="st">&#39;#mytable&#39;</span>)<span class="op">.</span><span class="fu">find</span>(<span class="st">&#39;table&#39;</span>)<span class="op">.</span><span class="fu">DataTable</span>()<span class="op">;</span></span></code></pre></div>
<p>If you don’t use Shiny, you have to set this id in the <code>elementId</code> argument of the <code>datatable</code> function. If you use Shiny, this id is the key of the element of the <code>output</code> object in which you assign a <code>renderDT</code>:</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode r"><code class="sourceCode r"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true"></a>output[[<span class="st">&quot;mytable&quot;</span>]] &lt;-<span class="st"> </span><span class="kw">renderDT</span>({</span>
<span id="cb10-2"><a href="#cb10-2" aria-hidden="true"></a>  ......</span>
<span id="cb10-3"><a href="#cb10-3" aria-hidden="true"></a>})</span></code></pre></div>
<p>The JavaScript code depends on whether the user desires a title in the Excel file, so this information has to be provided first.</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode numberSource r numberLines"><code class="sourceCode r"><span id="cb11-1"><a href="#cb11-1"></a>excelTitle =<span class="st"> </span><span class="ot">NULL</span> <span class="co"># enter title or set to NULL if you don&#39;t want a title</span></span>
<span id="cb11-2"><a href="#cb11-2"></a>js_customXLSX &lt;-<span class="st"> </span><span class="kw">JS</span>(</span>
<span id="cb11-3"><a href="#cb11-3"></a>  <span class="st">&quot;function(xlsx){&quot;</span>,</span>
<span id="cb11-4"><a href="#cb11-4"></a>  <span class="st">&quot;  var table = $(&#39;#mytable&#39;).find(&#39;table&#39;).DataTable();&quot;</span>,</span>
<span id="cb11-5"><a href="#cb11-5"></a>  <span class="st">&quot;  // Number of columns.&quot;</span>,</span>
<span id="cb11-6"><a href="#cb11-6"></a>  <span class="kw">sprintf</span>(<span class="st">&quot;  var ncols = %d;&quot;</span>, <span class="kw">ncol</span>(Dat)),</span>
<span id="cb11-7"><a href="#cb11-7"></a>  <span class="st">&quot;  // Is there a title?&quot;</span>,</span>
<span id="cb11-8"><a href="#cb11-8"></a>  <span class="kw">sprintf</span>(<span class="st">&quot;  var title = %s;&quot;</span>, </span>
<span id="cb11-9"><a href="#cb11-9"></a>          <span class="kw">ifelse</span>(<span class="kw">is.null</span>(excelTitle), <span class="st">&quot;false&quot;</span>, <span class="st">&quot;true&quot;</span>)),</span>
<span id="cb11-10"><a href="#cb11-10"></a>  <span class="st">&quot;  // Integer to Excel column: 0 -&gt; A, 1 -&gt; B, ..., 25 -&gt; Z, 26 -&gt; AA, ...&quot;</span>,</span>
<span id="cb11-11"><a href="#cb11-11"></a>  <span class="st">&quot;  var XLcolumn = function(j){&quot;</span>, </span>
<span id="cb11-12"><a href="#cb11-12"></a>  <span class="st">&quot;    return j &lt; 0 ? &quot;</span>,</span>
<span id="cb11-13"><a href="#cb11-13"></a>  <span class="st">&quot;      &#39;&#39; : XLcolumn(j/26-1) + String.fromCharCode(j % 26 + 65);&quot;</span>,</span>
<span id="cb11-14"><a href="#cb11-14"></a>  <span class="st">&quot;  };&quot;</span>,</span>
<span id="cb11-15"><a href="#cb11-15"></a>  <span class="st">&quot;  // Get sheet.&quot;</span>,</span>
<span id="cb11-16"><a href="#cb11-16"></a>  <span class="st">&quot;  var sheet = xlsx.xl.worksheets[&#39;sheet1.xml&#39;];&quot;</span>,</span>
<span id="cb11-17"><a href="#cb11-17"></a>  <span class="st">&quot;  // Get a clone of the sheet data.        &quot;</span>,</span>
<span id="cb11-18"><a href="#cb11-18"></a>  <span class="st">&quot;  var sheetData = $(&#39;sheetData&#39;, sheet).clone();&quot;</span>,</span>
<span id="cb11-19"><a href="#cb11-19"></a>  <span class="st">&quot;  // Clear the current sheet data for appending rows.&quot;</span>,</span>
<span id="cb11-20"><a href="#cb11-20"></a>  <span class="st">&quot;  $(&#39;sheetData&#39;, sheet).empty();&quot;</span>,</span>
<span id="cb11-21"><a href="#cb11-21"></a>  <span class="st">&quot;  // Row count in Excel sheet.&quot;</span>,</span>
<span id="cb11-22"><a href="#cb11-22"></a>  <span class="st">&quot;  var rowCount = 1;&quot;</span>,</span>
<span id="cb11-23"><a href="#cb11-23"></a>  <span class="st">&quot;  // Iterate each row in the sheet data.&quot;</span>,</span>
<span id="cb11-24"><a href="#cb11-24"></a>  <span class="st">&quot;  $(sheetData).children().each(function (index) {&quot;</span>,</span>
<span id="cb11-25"><a href="#cb11-25"></a>  <span class="st">&quot;    // Used for DT row() API to get child data.&quot;</span>,</span>
<span id="cb11-26"><a href="#cb11-26"></a>  <span class="st">&quot;    var rowIndex = title ? index - 2 : index - 1;&quot;</span>, </span>
<span id="cb11-27"><a href="#cb11-27"></a>  <span class="st">&quot;    // Don&#39;t process row if it&#39;s the title row or the header row.&quot;</span>,</span>
<span id="cb11-28"><a href="#cb11-28"></a>  <span class="st">&quot;    var i0 = title ? 1 : 0;&quot;</span>,</span>
<span id="cb11-29"><a href="#cb11-29"></a>  <span class="st">&quot;    if (index &gt; i0) {&quot;</span>, </span>
<span id="cb11-30"><a href="#cb11-30"></a>  <span class="st">&quot;      // Get row&quot;</span>,</span>
<span id="cb11-31"><a href="#cb11-31"></a>  <span class="st">&quot;      var row = $(this.outerHTML);&quot;</span>,</span>
<span id="cb11-32"><a href="#cb11-32"></a>  <span class="st">&quot;      // Set the Excel row attr to the current Excel row count.&quot;</span>,</span>
<span id="cb11-33"><a href="#cb11-33"></a>  <span class="st">&quot;      row.attr(&#39;r&#39;, rowCount);&quot;</span>,</span>
<span id="cb11-34"><a href="#cb11-34"></a>  <span class="st">&quot;      // Iterate each cell in the row to change the row number.&quot;</span>,</span>
<span id="cb11-35"><a href="#cb11-35"></a>  <span class="st">&quot;      row.children().each(function (index) {&quot;</span>,</span>
<span id="cb11-36"><a href="#cb11-36"></a>  <span class="st">&quot;        var cell = $(this);&quot;</span>,</span>
<span id="cb11-37"><a href="#cb11-37"></a>  <span class="st">&quot;        // Set each cell&#39;s row value.&quot;</span>,</span>
<span id="cb11-38"><a href="#cb11-38"></a>  <span class="st">&quot;        var rc = cell.attr(&#39;r&#39;);&quot;</span>,</span>
<span id="cb11-39"><a href="#cb11-39"></a>  <span class="st">&quot;        rc = rc.replace(/</span><span class="ch">\\</span><span class="st">d+$/, </span><span class="ch">\&quot;\&quot;</span><span class="st">) + rowCount;&quot;</span>,</span>
<span id="cb11-40"><a href="#cb11-40"></a>  <span class="st">&quot;        cell.attr(&#39;r&#39;, rc);&quot;</span>,</span>
<span id="cb11-41"><a href="#cb11-41"></a>  <span class="st">&quot;      });&quot;</span>,</span>
<span id="cb11-42"><a href="#cb11-42"></a>  <span class="st">&quot;      // Get the row HTML and append to sheetData.&quot;</span>,</span>
<span id="cb11-43"><a href="#cb11-43"></a>  <span class="st">&quot;      row = row[0].outerHTML;&quot;</span>,</span>
<span id="cb11-44"><a href="#cb11-44"></a>  <span class="st">&quot;      $(&#39;sheetData&#39;, sheet).append(row);&quot;</span>,</span>
<span id="cb11-45"><a href="#cb11-45"></a>  <span class="st">&quot;      rowCount++;&quot;</span>,</span>
<span id="cb11-46"><a href="#cb11-46"></a>  <span class="st">&quot;      // Get the child data - could be any data attached to the row.&quot;</span>,</span>
<span id="cb11-47"><a href="#cb11-47"></a>  <span class="st">&quot;      var data = table.row(&#39;:eq(&#39; + rowIndex + &#39;)&#39;).data();&quot;</span>,</span>
<span id="cb11-48"><a href="#cb11-48"></a>  <span class="st">&quot;      var childData = data[ncols-1];&quot;</span>, </span>
<span id="cb11-49"><a href="#cb11-49"></a>  <span class="st">&quot;      if(childData.length &gt; 0){&quot;</span>,</span>
<span id="cb11-50"><a href="#cb11-50"></a>  <span class="st">&quot;        var colNames = Object.keys(childData[0]);&quot;</span>,</span>
<span id="cb11-51"><a href="#cb11-51"></a>  <span class="st">&quot;        // Prepare Excel formatted row&quot;</span>,</span>
<span id="cb11-52"><a href="#cb11-52"></a>  <span class="st">&quot;        var headerRow = &#39;&lt;row r=</span><span class="ch">\&quot;</span><span class="st">&#39; + rowCount +&quot;</span>,</span>
<span id="cb11-53"><a href="#cb11-53"></a>  <span class="st">&quot;          &#39;</span><span class="ch">\&quot;</span><span class="st">&gt;&lt;c t=</span><span class="ch">\&quot;</span><span class="st">inlineStr</span><span class="ch">\&quot;</span><span class="st"> r=</span><span class="ch">\&quot;</span><span class="st">A&#39; + rowCount +&quot;</span>,</span>
<span id="cb11-54"><a href="#cb11-54"></a>  <span class="st">&quot;          &#39;</span><span class="ch">\&quot;</span><span class="st">&gt;&lt;is&gt;&lt;t&gt;&lt;/t&gt;&lt;/is&gt;&lt;/c&gt;&#39;;&quot;</span>,</span>
<span id="cb11-55"><a href="#cb11-55"></a>  <span class="st">&quot;        for(let i = 0; i &lt; colNames.length; i++){&quot;</span>,</span>
<span id="cb11-56"><a href="#cb11-56"></a>  <span class="st">&quot;          headerRow = headerRow +&quot;</span>,</span>
<span id="cb11-57"><a href="#cb11-57"></a>  <span class="st">&quot;            &#39;&lt;c t=</span><span class="ch">\&quot;</span><span class="st">inlineStr</span><span class="ch">\&quot;</span><span class="st"> r=</span><span class="ch">\&quot;</span><span class="st">&#39; + XLcolumn(i+1) + rowCount +&quot;</span>,</span>
<span id="cb11-58"><a href="#cb11-58"></a>  <span class="st">&quot;            &#39;</span><span class="ch">\&quot;</span><span class="st"> s=</span><span class="ch">\&quot;</span><span class="st">7</span><span class="ch">\&quot;</span><span class="st">&gt;&lt;is&gt;&lt;t&gt;&#39; + colNames[i] +&quot;</span>, </span>
<span id="cb11-59"><a href="#cb11-59"></a>  <span class="st">&quot;            &#39;&lt;/t&gt;&lt;/is&gt;&lt;/c&gt;&#39;;&quot;</span>,</span>
<span id="cb11-60"><a href="#cb11-60"></a>  <span class="st">&quot;        }&quot;</span>,</span>
<span id="cb11-61"><a href="#cb11-61"></a>  <span class="st">&quot;        headerRow = headerRow + &#39;&lt;/row&gt;&#39;;&quot;</span>,</span>
<span id="cb11-62"><a href="#cb11-62"></a>  <span class="st">&quot;        // Append header row to sheetData.&quot;</span>,</span>
<span id="cb11-63"><a href="#cb11-63"></a>  <span class="st">&quot;        $(&#39;sheetData&#39;, sheet).append(headerRow);&quot;</span>,</span>
<span id="cb11-64"><a href="#cb11-64"></a>  <span class="st">&quot;        rowCount++; // Increment excel row counter.&quot;</span>,</span>
<span id="cb11-65"><a href="#cb11-65"></a>  <span class="st">&quot;      }&quot;</span>,</span>
<span id="cb11-66"><a href="#cb11-66"></a>  <span class="st">&quot;      // The child data is an array of rows&quot;</span>,</span>
<span id="cb11-67"><a href="#cb11-67"></a>  <span class="st">&quot;      for(let c = 0; c &lt; childData.length; c++){&quot;</span>,</span>
<span id="cb11-68"><a href="#cb11-68"></a>  <span class="st">&quot;        // Get row data.&quot;</span>,</span>
<span id="cb11-69"><a href="#cb11-69"></a>  <span class="st">&quot;        var child = childData[c];&quot;</span>,</span>
<span id="cb11-70"><a href="#cb11-70"></a>  <span class="st">&quot;        // Prepare Excel formatted row&quot;</span>,</span>
<span id="cb11-71"><a href="#cb11-71"></a>  <span class="st">&quot;        var childRow = &#39;&lt;row r=</span><span class="ch">\&quot;</span><span class="st">&#39; + rowCount +&quot;</span>,</span>
<span id="cb11-72"><a href="#cb11-72"></a>  <span class="st">&quot;          &#39;</span><span class="ch">\&quot;</span><span class="st">&gt;&lt;c t=</span><span class="ch">\&quot;</span><span class="st">inlineStr</span><span class="ch">\&quot;</span><span class="st"> r=</span><span class="ch">\&quot;</span><span class="st">A&#39; + rowCount +&quot;</span>,</span>
<span id="cb11-73"><a href="#cb11-73"></a>  <span class="st">&quot;          &#39;</span><span class="ch">\&quot;</span><span class="st">&gt;&lt;is&gt;&lt;t&gt;&lt;/t&gt;&lt;/is&gt;&lt;/c&gt;&#39;;&quot;</span>,</span>
<span id="cb11-74"><a href="#cb11-74"></a>  <span class="st">&quot;        for(let i = 0; i &lt; colNames.length; i++){&quot;</span>,</span>
<span id="cb11-75"><a href="#cb11-75"></a>  <span class="st">&quot;          childRow = childRow +&quot;</span>,</span>
<span id="cb11-76"><a href="#cb11-76"></a>  <span class="st">&quot;            &#39;&lt;c t=</span><span class="ch">\&quot;</span><span class="st">inlineStr</span><span class="ch">\&quot;</span><span class="st"> r=</span><span class="ch">\&quot;</span><span class="st">&#39; + XLcolumn(i+1) + rowCount +&quot;</span>,</span>
<span id="cb11-77"><a href="#cb11-77"></a>  <span class="st">&quot;            &#39;</span><span class="ch">\&quot;</span><span class="st"> s=</span><span class="ch">\&quot;</span><span class="st">5</span><span class="ch">\&quot;</span><span class="st">&gt;&lt;is&gt;&lt;t&gt;&#39; + child[colNames[i]] +&quot;</span>, </span>
<span id="cb11-78"><a href="#cb11-78"></a>  <span class="st">&quot;            &#39;&lt;/t&gt;&lt;/is&gt;&lt;/c&gt;&#39;;&quot;</span>,</span>
<span id="cb11-79"><a href="#cb11-79"></a>  <span class="st">&quot;        }&quot;</span>,</span>
<span id="cb11-80"><a href="#cb11-80"></a>  <span class="st">&quot;        childRow = childRow + &#39;&lt;/row&gt;&#39;;&quot;</span>,</span>
<span id="cb11-81"><a href="#cb11-81"></a>  <span class="st">&quot;        // Append row to sheetData.&quot;</span>,</span>
<span id="cb11-82"><a href="#cb11-82"></a>  <span class="st">&quot;        $(&#39;sheetData&#39;, sheet).append(childRow);&quot;</span>,</span>
<span id="cb11-83"><a href="#cb11-83"></a>  <span class="st">&quot;        rowCount++; // Increment excel row counter.&quot;</span>,</span>
<span id="cb11-84"><a href="#cb11-84"></a>  <span class="st">&quot;      }&quot;</span>,</span>
<span id="cb11-85"><a href="#cb11-85"></a>  <span class="st">&quot;      // Just append the header row and increment excel row counter.&quot;</span>,</span>
<span id="cb11-86"><a href="#cb11-86"></a>  <span class="st">&quot;    } else {&quot;</span>,</span>
<span id="cb11-87"><a href="#cb11-87"></a>  <span class="st">&quot;      $(&#39;sheetData&#39;, sheet).append(this.outerHTML);&quot;</span>,</span>
<span id="cb11-88"><a href="#cb11-88"></a>  <span class="st">&quot;      rowCount++;&quot;</span>,</span>
<span id="cb11-89"><a href="#cb11-89"></a>  <span class="st">&quot;    }&quot;</span>,</span>
<span id="cb11-90"><a href="#cb11-90"></a>  <span class="st">&quot;  });&quot;</span>,</span>
<span id="cb11-91"><a href="#cb11-91"></a>  <span class="st">&quot;}&quot;</span></span>
<span id="cb11-92"><a href="#cb11-92"></a>)</span></code></pre></div>
<p>Let’s see an example.</p>
<div class="sourceCode" id="cb12"><pre class="sourceCode numberSource r numberLines"><code class="sourceCode r"><span id="cb12-1"><a href="#cb12-1"></a>dat0  =<span class="st"> </span>iris[<span class="dv">1</span><span class="op">:</span><span class="dv">3</span>,]         <span class="co"># main table, with three rows</span></span>
<span id="cb12-2"><a href="#cb12-2"></a>dat01 =<span class="st"> </span>airquality[<span class="dv">1</span><span class="op">:</span><span class="dv">4</span>,]   <span class="co"># |- child of first row</span></span>
<span id="cb12-3"><a href="#cb12-3"></a>dat02 =<span class="st"> </span>cars[<span class="dv">1</span><span class="op">:</span><span class="dv">2</span>,]         <span class="co"># |- child of second row</span></span>
<span id="cb12-4"><a href="#cb12-4"></a>dat03 =<span class="st"> </span>PlantGrowth[<span class="dv">1</span><span class="op">:</span><span class="dv">3</span>,]  <span class="co"># |- child of third row</span></span>
<span id="cb12-5"><a href="#cb12-5"></a>Dat &lt;-<span class="st"> </span><span class="kw">NestedData</span>(</span>
<span id="cb12-6"><a href="#cb12-6"></a>  <span class="dt">dat =</span> dat0, </span>
<span id="cb12-7"><a href="#cb12-7"></a>  <span class="dt">children =</span> <span class="kw">list</span>(dat01, dat02, dat03)</span>
<span id="cb12-8"><a href="#cb12-8"></a>)</span></code></pre></div>
<p>Below is the code generating the table with a button for the exporting. Remember, if you use Shiny, do not set <code>elementId</code>.</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode numberSource r numberLines"><code class="sourceCode r"><span id="cb13-1"><a href="#cb13-1"></a>dtable &lt;-<span class="st"> </span><span class="kw">datatable</span>(</span>
<span id="cb13-2"><a href="#cb13-2"></a>  Dat, </span>
<span id="cb13-3"><a href="#cb13-3"></a>  <span class="dt">callback =</span> callback, <span class="dt">rownames =</span> rowNames, <span class="dt">escape =</span> <span class="op">-</span>colIdx<span class="dv">-1</span>,</span>
<span id="cb13-4"><a href="#cb13-4"></a>  <span class="dt">extensions =</span> <span class="st">&quot;Buttons&quot;</span>, <span class="dt">elementId =</span> <span class="st">&quot;mytable&quot;</span>,</span>
<span id="cb13-5"><a href="#cb13-5"></a>  <span class="dt">options =</span> <span class="kw">list</span>(</span>
<span id="cb13-6"><a href="#cb13-6"></a>    <span class="dt">paging =</span> <span class="ot">FALSE</span>,</span>
<span id="cb13-7"><a href="#cb13-7"></a>    <span class="dt">searching =</span> <span class="ot">FALSE</span>,</span>
<span id="cb13-8"><a href="#cb13-8"></a>    <span class="dt">dom =</span> <span class="st">&quot;Bfrtip&quot;</span>,</span>
<span id="cb13-9"><a href="#cb13-9"></a>    <span class="dt">columnDefs =</span> <span class="kw">list</span>(</span>
<span id="cb13-10"><a href="#cb13-10"></a>      <span class="kw">list</span>(</span>
<span id="cb13-11"><a href="#cb13-11"></a>        <span class="dt">visible =</span> <span class="ot">FALSE</span>, </span>
<span id="cb13-12"><a href="#cb13-12"></a>        <span class="dt">targets =</span> <span class="kw">ncol</span>(Dat)<span class="op">-</span><span class="dv">1</span><span class="op">+</span>colIdx</span>
<span id="cb13-13"><a href="#cb13-13"></a>      ),</span>
<span id="cb13-14"><a href="#cb13-14"></a>      <span class="kw">list</span>(</span>
<span id="cb13-15"><a href="#cb13-15"></a>        <span class="dt">orderable =</span> <span class="ot">FALSE</span>, </span>
<span id="cb13-16"><a href="#cb13-16"></a>        <span class="dt">className =</span> <span class="st">&quot;details-control&quot;</span>, </span>
<span id="cb13-17"><a href="#cb13-17"></a>        <span class="dt">targets =</span> colIdx</span>
<span id="cb13-18"><a href="#cb13-18"></a>      ),</span>
<span id="cb13-19"><a href="#cb13-19"></a>      <span class="kw">list</span>(</span>
<span id="cb13-20"><a href="#cb13-20"></a>        <span class="dt">className =</span> <span class="st">&quot;dt-center&quot;</span>, </span>
<span id="cb13-21"><a href="#cb13-21"></a>        <span class="dt">targets =</span> <span class="st">&quot;_all&quot;</span></span>
<span id="cb13-22"><a href="#cb13-22"></a>      )</span>
<span id="cb13-23"><a href="#cb13-23"></a>    ),</span>
<span id="cb13-24"><a href="#cb13-24"></a>    <span class="dt">buttons =</span> <span class="kw">list</span>(</span>
<span id="cb13-25"><a href="#cb13-25"></a>      <span class="kw">list</span>(</span>
<span id="cb13-26"><a href="#cb13-26"></a>        <span class="dt">extend =</span> <span class="st">&quot;excel&quot;</span>,</span>
<span id="cb13-27"><a href="#cb13-27"></a>        <span class="dt">exportOptions =</span> <span class="kw">list</span>(</span>
<span id="cb13-28"><a href="#cb13-28"></a>          <span class="dt">orthogonal =</span> <span class="st">&quot;export&quot;</span>, </span>
<span id="cb13-29"><a href="#cb13-29"></a>          <span class="dt">columns =</span> <span class="dv">0</span><span class="op">:</span>(<span class="kw">ncol</span>(Dat)<span class="op">-</span><span class="dv">2</span>)</span>
<span id="cb13-30"><a href="#cb13-30"></a>        ),</span>
<span id="cb13-31"><a href="#cb13-31"></a>        <span class="dt">title =</span> excelTitle,</span>
<span id="cb13-32"><a href="#cb13-32"></a>        <span class="dt">orientation =</span> <span class="st">&quot;landscape&quot;</span>,</span>
<span id="cb13-33"><a href="#cb13-33"></a>        <span class="dt">customize =</span> js_customXLSX</span>
<span id="cb13-34"><a href="#cb13-34"></a>      )</span>
<span id="cb13-35"><a href="#cb13-35"></a>    )</span>
<span id="cb13-36"><a href="#cb13-36"></a>  )</span>
<span id="cb13-37"><a href="#cb13-37"></a>)</span></code></pre></div>
<p>Here is the Excel file one gets:</p>
<p><img src="https://laustep.github.io/stlahblog/posts/figures/DTchildRows3.png" /></p>

        </div>


        <div id="footer">
          Site proudly generated by
          <a href="http://jaspervdj.be/hakyll">Hakyll</a>
        </div>

      </div>

    </div>


  </div>

]]></description>
    <pubDate>Fri, 08 May 2020 00:00:00 UT</pubDate>
    <guid>https://laustep.github.io/stlahblog/posts/DT_childTables.html</guid>
    <dc:creator>Stéphane Laurent</dc:creator>
    <category>R</category>
</item>


<item>
    <title>Focal quadrics and their lines of curvature</title>
    <link>https://laustep.github.io/stlahblog/posts/focalQuadrics.html</link>
    <description><![CDATA[
  <div class="container-fluid">
    <div class="row">
      <div class="main col-sm-12">
        <div id="header">
          <div id="logo">
            <a href="https://laustep.github.io/stlahblog/">
              <img src="https://laustep.github.io/stlahblog/images/stla.jpg" alt="stla" width="100px" />
            </a>
          </div>
          <div id="navigation" style="margin-top:50px;">
            <a href="https://laustep.github.io/stlahblog/">Home</a>
            <a href="https://laustep.github.io/stlahblog/about.html">About</a>
            <a href="https://laustep.github.io/stlahblog/contact.html">Contact</a>
            <a href="https://laustep.github.io/stlahblog/archive.html">Archive</a>
          </div>
        </div>

        <div class="content">
          <h1>Focal quadrics and their lines of curvature</h1> 
          <div class="info">
    Posted on May  3, 2020
    
        by Stéphane Laurent
    
</div>
<div class="info">
    
    Tags: <a title="All pages tagged &#39;R&#39;." href="https://laustep.github.io/stlahblog/tags/R.html">R</a>, <a title="All pages tagged &#39;graphics&#39;." href="https://laustep.github.io/stlahblog/tags/graphics.html">graphics</a>, <a title="All pages tagged &#39;rgl&#39;." href="https://laustep.github.io/stlahblog/tags/rgl.html">rgl</a>, <a title="All pages tagged &#39;geometry&#39;." href="https://laustep.github.io/stlahblog/tags/geometry.html">geometry</a>, <a title="All pages tagged &#39;maths&#39;." href="https://laustep.github.io/stlahblog/tags/maths.html">maths</a>
    
</div>

<p>This blog post provides some R code for drawing focal quadrics and their curvatures lines with the <code>rgl</code> package.</p>
<h1 id="ellipsoid">Ellipsoid</h1>
<p>The <code>ellipsoidMesh</code> function below generates a mesh of the ellipsoid of equation <span class="math display">\[
\frac{x^2}{a^2} + \frac{y^2}{b^2} + \frac{z^2}{c^2} = 1.
\]</span></p>
<div class="sourceCode" id="cb1"><pre class="sourceCode numberSource r numberLines"><code class="sourceCode r"><span id="cb1-1"><a href="#cb1-1"></a><span class="kw">library</span>(rgl)</span>
<span id="cb1-2"><a href="#cb1-2"></a>ellipsoidMesh &lt;-<span class="st"> </span><span class="cf">function</span>(a, b, c, <span class="dt">smoothness =</span> <span class="dv">5</span>){</span>
<span id="cb1-3"><a href="#cb1-3"></a>  <span class="kw">stopifnot</span>(a <span class="op">&gt;</span><span class="st"> </span><span class="dv">0</span>, b <span class="op">&gt;</span><span class="st"> </span><span class="dv">0</span>, c <span class="op">&gt;</span><span class="st"> </span><span class="dv">0</span>)</span>
<span id="cb1-4"><a href="#cb1-4"></a>  sphere &lt;-<span class="st"> </span><span class="kw">subdivision3d</span>(<span class="kw">icosahedron3d</span>(), <span class="dt">depth =</span> smoothness)</span>
<span id="cb1-5"><a href="#cb1-5"></a>  sphere<span class="op">$</span>vb[4L,] &lt;-<span class="st"> </span></span>
<span id="cb1-6"><a href="#cb1-6"></a><span class="st">    </span><span class="kw">apply</span>(sphere<span class="op">$</span>vb[1L<span class="op">:</span>3L,], 2L, <span class="cf">function</span>(x) <span class="kw">sqrt</span>(<span class="kw">sum</span>(x<span class="op">*</span>x)))</span>
<span id="cb1-7"><a href="#cb1-7"></a>  sphere<span class="op">$</span>normals &lt;-<span class="st"> </span>sphere<span class="op">$</span>vb</span>
<span id="cb1-8"><a href="#cb1-8"></a>  <span class="kw">scale3d</span>(sphere, a, b, c)</span>
<span id="cb1-9"><a href="#cb1-9"></a>}</span></code></pre></div>
<p>The curvature lines of this ellipsoid are generated by the function <code>curvatureLinesE</code> given below. There are two families of curvature lines. The arguments <code>nu</code> and <code>nv</code> control the numbers of curvature lines in these two families. When the ellipsoid is tri-axial, <em>i.e.</em> when <span class="math inline">\(a\)</span>, <span class="math inline">\(b\)</span>, <span class="math inline">\(c\)</span> are distinct, the arguments <code>du</code> and <code>dv</code> must be positive and they control the size of the smallest curvature lines (if they were <span class="math inline">\(0\)</span>, the smallest curvature lines would degenerate to segments). When the ellipsoid is an ellipsoid of revolution, <em>i.e.</em> when two values of <span class="math inline">\(a\)</span>, <span class="math inline">\(b\)</span>, <span class="math inline">\(c\)</span> are equal, the curvature lines are the meridians and the parallels; in this case, <code>du</code> is ignored, and <code>dv</code>, which must be positive and strictly smaller than <span class="math inline">\(\frac{\pi}{2}\)</span>, control the size of the smallest parallel.</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode numberSource r numberLines"><code class="sourceCode r"><span id="cb2-1"><a href="#cb2-1"></a>curvatureLinesE &lt;-<span class="st"> </span><span class="cf">function</span>(a, b, c, nu, nv, du, dv, <span class="dt">npoints =</span> <span class="dv">100</span>){</span>
<span id="cb2-2"><a href="#cb2-2"></a>  <span class="kw">stopifnot</span>(a <span class="op">&gt;</span><span class="st"> </span><span class="dv">0</span>, b <span class="op">&gt;</span><span class="st"> </span><span class="dv">0</span>, c <span class="op">&gt;</span><span class="st"> </span><span class="dv">0</span>)</span>
<span id="cb2-3"><a href="#cb2-3"></a>  <span class="cf">if</span>((a <span class="op">!=</span><span class="st"> </span>b <span class="op">&amp;&amp;</span><span class="st"> </span>b <span class="op">!=</span><span class="st"> </span>c) <span class="op">&amp;&amp;</span><span class="st"> </span>(a <span class="op">&lt;</span><span class="st"> </span>b <span class="op">||</span><span class="st"> </span>b <span class="op">&lt;</span><span class="st"> </span>c)){</span>
<span id="cb2-4"><a href="#cb2-4"></a>    perm &lt;-<span class="st"> </span><span class="kw">order</span>(<span class="kw">c</span>(a,b,c), <span class="dt">decreasing =</span> <span class="ot">TRUE</span>)</span>
<span id="cb2-5"><a href="#cb2-5"></a>    abc &lt;-<span class="st"> </span><span class="kw">c</span>(a,b,c)[perm]</span>
<span id="cb2-6"><a href="#cb2-6"></a>    clines &lt;-<span class="st"> </span></span>
<span id="cb2-7"><a href="#cb2-7"></a><span class="st">      </span><span class="kw">curvatureLinesE</span>(abc[1L], abc[2L], abc[3L], nu, nv, du, dv, npoints)</span>
<span id="cb2-8"><a href="#cb2-8"></a>    <span class="kw">return</span>(<span class="kw">lapply</span>(clines, <span class="cf">function</span>(l) l[, perm]))</span>
<span id="cb2-9"><a href="#cb2-9"></a>  }</span>
<span id="cb2-10"><a href="#cb2-10"></a>  <span class="cf">if</span>(a <span class="op">!=</span><span class="st"> </span>b <span class="op">&amp;&amp;</span><span class="st"> </span>b <span class="op">!=</span><span class="st"> </span>c){</span>
<span id="cb2-11"><a href="#cb2-11"></a>    <span class="kw">stopifnot</span>(du <span class="op">&gt;</span><span class="st"> </span><span class="dv">0</span>, dv <span class="op">&gt;</span><span class="st"> </span><span class="dv">0</span>)</span>
<span id="cb2-12"><a href="#cb2-12"></a>    a2 &lt;-<span class="st"> </span>a<span class="op">^</span><span class="dv">2</span>; b2 &lt;-<span class="st"> </span>b<span class="op">^</span><span class="dv">2</span>; c2 &lt;-<span class="st"> </span>c<span class="op">^</span><span class="dv">2</span></span>
<span id="cb2-13"><a href="#cb2-13"></a>    h2ab &lt;-<span class="st"> </span>a2 <span class="op">-</span><span class="st"> </span>b2; h2ac &lt;-<span class="st"> </span>a2 <span class="op">-</span><span class="st"> </span>c2; h2bc &lt;-<span class="st"> </span>b2 <span class="op">-</span><span class="st"> </span>c2</span>
<span id="cb2-14"><a href="#cb2-14"></a>    <span class="cf">if</span>(du <span class="op">&gt;=</span><span class="st"> </span>h2ab) <span class="kw">stop</span>(<span class="st">&quot;`du` is too large.&quot;</span>)</span>
<span id="cb2-15"><a href="#cb2-15"></a>    <span class="cf">if</span>(dv <span class="op">&gt;=</span><span class="st"> </span>h2bc) <span class="kw">stop</span>(<span class="st">&quot;`dv` is too large.&quot;</span>)</span>
<span id="cb2-16"><a href="#cb2-16"></a>    out &lt;-<span class="st"> </span><span class="kw">vector</span>(<span class="st">&quot;list&quot;</span>, <span class="dv">2</span><span class="op">*</span>nv<span class="dv">-1</span> <span class="op">+</span><span class="st"> </span><span class="dv">2</span><span class="op">*</span>nu<span class="dv">-1</span>)</span>
<span id="cb2-17"><a href="#cb2-17"></a>    u_ &lt;-<span class="st"> </span><span class="kw">seq</span>(b2<span class="op">+</span>du, a2, <span class="dt">length.out =</span> nu)</span>
<span id="cb2-18"><a href="#cb2-18"></a>    s_ &lt;-<span class="st"> </span><span class="kw">seq</span>(b2, a2, <span class="dt">length.out =</span> npoints)</span>
<span id="cb2-19"><a href="#cb2-19"></a>    v_ &lt;-<span class="st"> </span><span class="kw">seq</span>(c2, b2<span class="op">-</span>dv, <span class="dt">length.out =</span> nv) </span>
<span id="cb2-20"><a href="#cb2-20"></a>    t_ &lt;-<span class="st"> </span><span class="kw">seq</span>(c2, b2, <span class="dt">length.out =</span> npoints)</span>
<span id="cb2-21"><a href="#cb2-21"></a>    mx &lt;-<span class="st"> </span>a <span class="op">/</span><span class="st"> </span><span class="kw">sqrt</span>(h2ac<span class="op">*</span>h2ab)</span>
<span id="cb2-22"><a href="#cb2-22"></a>    my &lt;-<span class="st"> </span>b <span class="op">/</span><span class="st"> </span><span class="kw">sqrt</span>(h2bc<span class="op">*</span>h2ab)</span>
<span id="cb2-23"><a href="#cb2-23"></a>    mz &lt;-<span class="st"> </span>c <span class="op">/</span><span class="st"> </span><span class="kw">sqrt</span>(h2bc<span class="op">*</span>h2ac)</span>
<span id="cb2-24"><a href="#cb2-24"></a>    <span class="cf">for</span>(j <span class="cf">in</span> 1L<span class="op">:</span>nv){</span>
<span id="cb2-25"><a href="#cb2-25"></a>      x &lt;-<span class="st"> </span>mx <span class="op">*</span><span class="st"> </span><span class="kw">sqrt</span>((a2<span class="op">-</span>s_)<span class="op">*</span>(a2<span class="op">-</span>v_[j]))</span>
<span id="cb2-26"><a href="#cb2-26"></a>      y &lt;-<span class="st"> </span>my <span class="op">*</span><span class="st"> </span><span class="kw">sqrt</span>((s_<span class="op">-</span>b2)<span class="op">*</span>(b2<span class="op">-</span>v_[j]))</span>
<span id="cb2-27"><a href="#cb2-27"></a>      z &lt;-<span class="st"> </span>mz <span class="op">*</span><span class="st"> </span><span class="kw">sqrt</span>((s_<span class="op">-</span>c2)<span class="op">*</span>(v_[j]<span class="op">-</span>c2))</span>
<span id="cb2-28"><a href="#cb2-28"></a>      M &lt;-<span class="st"> </span><span class="kw">rbind</span>(<span class="kw">cbind</span>(x, y, z), <span class="kw">cbind</span>(<span class="op">-</span>x, y, z)[(npoints<span class="dv">-1</span>)<span class="op">:</span>1L,])</span>
<span id="cb2-29"><a href="#cb2-29"></a>      M &lt;-<span class="st"> </span><span class="kw">rbind</span>(M, <span class="kw">cbind</span>(M[,1L], <span class="op">-</span>M[,2L], M[,3L])[(<span class="dv">2</span><span class="op">*</span>npoints<span class="dv">-2</span>)<span class="op">:</span>1L,])</span>
<span id="cb2-30"><a href="#cb2-30"></a>      out[[j]] &lt;-<span class="st"> </span>M</span>
<span id="cb2-31"><a href="#cb2-31"></a>      <span class="cf">if</span>(j <span class="op">&gt;</span><span class="st"> </span>1L){</span>
<span id="cb2-32"><a href="#cb2-32"></a>        out[[nv<span class="op">+</span>j<span class="dv">-1</span>]] &lt;-<span class="st"> </span><span class="kw">cbind</span>(M[,<span class="kw">c</span>(1L,2L)], <span class="op">-</span>M[,3L])</span>
<span id="cb2-33"><a href="#cb2-33"></a>      }</span>
<span id="cb2-34"><a href="#cb2-34"></a>    }</span>
<span id="cb2-35"><a href="#cb2-35"></a>    <span class="cf">for</span>(i <span class="cf">in</span> 1L<span class="op">:</span>nu){</span>
<span id="cb2-36"><a href="#cb2-36"></a>      x &lt;-<span class="st"> </span>mx <span class="op">*</span><span class="st"> </span><span class="kw">sqrt</span>((a2<span class="op">-</span>u_[i])<span class="op">*</span>(a2<span class="op">-</span>t_))</span>
<span id="cb2-37"><a href="#cb2-37"></a>      y &lt;-<span class="st"> </span>my <span class="op">*</span><span class="st"> </span><span class="kw">sqrt</span>((u_[i]<span class="op">-</span>b2)<span class="op">*</span>(b2<span class="op">-</span>t_))</span>
<span id="cb2-38"><a href="#cb2-38"></a>      z &lt;-<span class="st"> </span>mz <span class="op">*</span><span class="st"> </span><span class="kw">sqrt</span>((u_[i]<span class="op">-</span>c2)<span class="op">*</span>(t_<span class="op">-</span>c2))</span>
<span id="cb2-39"><a href="#cb2-39"></a>      M &lt;-<span class="st"> </span><span class="kw">rbind</span>(<span class="kw">cbind</span>(x, y, z), <span class="kw">cbind</span>(x, <span class="op">-</span>y, z)[(npoints<span class="dv">-1</span>)<span class="op">:</span>1L,])</span>
<span id="cb2-40"><a href="#cb2-40"></a>      M &lt;-<span class="st"> </span><span class="kw">rbind</span>(M, <span class="kw">cbind</span>(M[,<span class="kw">c</span>(1L,2L)], <span class="op">-</span>M[,3L])[(<span class="dv">2</span><span class="op">*</span>npoints<span class="dv">-2</span>)<span class="op">:</span>1L,])</span>
<span id="cb2-41"><a href="#cb2-41"></a>      out[[<span class="dv">2</span><span class="op">*</span>nv<span class="dv">-1</span><span class="op">+</span>i]] &lt;-<span class="st"> </span>M</span>
<span id="cb2-42"><a href="#cb2-42"></a>      <span class="cf">if</span>(i <span class="op">&lt;</span><span class="st"> </span>nu){</span>
<span id="cb2-43"><a href="#cb2-43"></a>        out[[<span class="dv">2</span><span class="op">*</span>nv<span class="dv">-1</span><span class="op">+</span>nu<span class="op">+</span>i]] &lt;-<span class="st"> </span><span class="kw">cbind</span>(<span class="op">-</span>M[,1L], M[,<span class="kw">c</span>(2L,3L)])</span>
<span id="cb2-44"><a href="#cb2-44"></a>      }</span>
<span id="cb2-45"><a href="#cb2-45"></a>    }</span>
<span id="cb2-46"><a href="#cb2-46"></a>  }<span class="cf">else</span>{ <span class="co"># a == b || b == c </span></span>
<span id="cb2-47"><a href="#cb2-47"></a>    <span class="co"># surface of revolution =&gt; curvature lines are meridians and parallels</span></span>
<span id="cb2-48"><a href="#cb2-48"></a>    <span class="kw">stopifnot</span>(dv <span class="op">&gt;</span><span class="st"> </span><span class="dv">0</span>, dv <span class="op">&lt;</span><span class="st"> </span>pi<span class="op">/</span><span class="dv">2</span>)</span>
<span id="cb2-49"><a href="#cb2-49"></a>    out &lt;-<span class="st"> </span><span class="kw">vector</span>(<span class="st">&quot;list&quot;</span>, nu <span class="op">+</span><span class="st"> </span>nv)</span>
<span id="cb2-50"><a href="#cb2-50"></a>    u_ &lt;-<span class="st"> </span><span class="kw">seq</span>(<span class="dv">0</span>, <span class="dv">2</span><span class="op">*</span>pi, <span class="dt">length.out =</span> nu<span class="op">+</span><span class="dv">1</span>)[<span class="op">-</span>1L]</span>
<span id="cb2-51"><a href="#cb2-51"></a>    s_ &lt;-<span class="st"> </span><span class="kw">seq</span>(<span class="dv">0</span>, <span class="dv">2</span><span class="op">*</span>pi, <span class="dt">length.out =</span> npoints)</span>
<span id="cb2-52"><a href="#cb2-52"></a>    v_ &lt;-<span class="st"> </span><span class="kw">seq</span>(<span class="op">-</span>pi<span class="op">/</span><span class="dv">2</span><span class="op">+</span>dv, pi<span class="op">/</span><span class="dv">2</span><span class="op">-</span>dv, <span class="dt">length.out =</span> nv) </span>
<span id="cb2-53"><a href="#cb2-53"></a>    t_ &lt;-<span class="st"> </span><span class="kw">seq</span>(<span class="op">-</span>pi, pi, <span class="dt">length.out =</span> npoints)</span>
<span id="cb2-54"><a href="#cb2-54"></a>    coss_ &lt;-<span class="st"> </span><span class="kw">cos</span>(s_); sins_ &lt;-<span class="st"> </span><span class="kw">sin</span>(s_)</span>
<span id="cb2-55"><a href="#cb2-55"></a>    cost_ &lt;-<span class="st"> </span><span class="kw">cos</span>(t_); sint_ &lt;-<span class="st"> </span><span class="kw">sin</span>(t_)</span>
<span id="cb2-56"><a href="#cb2-56"></a>    <span class="cf">for</span>(j <span class="cf">in</span> 1L<span class="op">:</span>nv){</span>
<span id="cb2-57"><a href="#cb2-57"></a>      x &lt;-<span class="st"> </span>a <span class="op">*</span><span class="st"> </span>coss_ <span class="op">*</span><span class="st"> </span><span class="kw">cos</span>(v_[j])</span>
<span id="cb2-58"><a href="#cb2-58"></a>      y &lt;-<span class="st"> </span>b <span class="op">*</span><span class="st"> </span>sins_ <span class="op">*</span><span class="st"> </span><span class="kw">cos</span>(v_[j])</span>
<span id="cb2-59"><a href="#cb2-59"></a>      z &lt;-<span class="st"> </span>c <span class="op">*</span><span class="st"> </span><span class="kw">sin</span>(v_[j])</span>
<span id="cb2-60"><a href="#cb2-60"></a>      out[[j]] &lt;-<span class="st"> </span><span class="kw">cbind</span>(x, y, z)</span>
<span id="cb2-61"><a href="#cb2-61"></a>    }</span>
<span id="cb2-62"><a href="#cb2-62"></a>    <span class="cf">for</span>(i <span class="cf">in</span> 1L<span class="op">:</span>nu){</span>
<span id="cb2-63"><a href="#cb2-63"></a>      x &lt;-<span class="st"> </span>a <span class="op">*</span><span class="st"> </span><span class="kw">cos</span>(u_[i]) <span class="op">*</span><span class="st"> </span>cost_</span>
<span id="cb2-64"><a href="#cb2-64"></a>      y &lt;-<span class="st"> </span>b <span class="op">*</span><span class="st"> </span><span class="kw">sin</span>(u_[i]) <span class="op">*</span><span class="st"> </span>cost_</span>
<span id="cb2-65"><a href="#cb2-65"></a>      z &lt;-<span class="st"> </span>c <span class="op">*</span><span class="st"> </span>sint_</span>
<span id="cb2-66"><a href="#cb2-66"></a>      out[[nv<span class="op">+</span>i]] &lt;-<span class="st"> </span><span class="kw">cbind</span>(x, y, z)</span>
<span id="cb2-67"><a href="#cb2-67"></a>    }</span>
<span id="cb2-68"><a href="#cb2-68"></a>  }</span>
<span id="cb2-69"><a href="#cb2-69"></a>  out</span>
<span id="cb2-70"><a href="#cb2-70"></a>}</span></code></pre></div>
<p>Here is an example:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode numberSource r numberLines"><code class="sourceCode r"><span id="cb3-1"><a href="#cb3-1"></a>a =<span class="st"> </span><span class="dv">7</span>; b =<span class="st"> </span><span class="dv">5</span>; c =<span class="st"> </span><span class="dv">3</span></span>
<span id="cb3-2"><a href="#cb3-2"></a>mesh &lt;-<span class="st"> </span><span class="kw">ellipsoidMesh</span>(a, b, c)</span>
<span id="cb3-3"><a href="#cb3-3"></a>clines &lt;-<span class="st"> </span><span class="kw">curvatureLinesE</span>(a, b, c, <span class="dt">nu =</span> <span class="dv">5</span>, <span class="dt">nv =</span> <span class="dv">5</span>, <span class="dt">du =</span> <span class="fl">0.4</span>, <span class="dt">dv =</span> <span class="dv">1</span>, </span>
<span id="cb3-4"><a href="#cb3-4"></a>                          <span class="dt">npoints =</span> <span class="dv">300</span>)</span>
<span id="cb3-5"><a href="#cb3-5"></a><span class="kw">shade3d</span>(mesh, <span class="dt">col =</span> <span class="st">&quot;springgreen&quot;</span>)</span>
<span id="cb3-6"><a href="#cb3-6"></a><span class="kw">invisible</span>(<span class="kw">lapply</span>(clines, <span class="cf">function</span>(l){</span>
<span id="cb3-7"><a href="#cb3-7"></a>  <span class="kw">shade3d</span>(<span class="kw">cylinder3d</span>(l, <span class="dt">radius =</span> <span class="fl">0.08</span>, <span class="dt">sides =</span> <span class="dv">30</span>))</span>
<span id="cb3-8"><a href="#cb3-8"></a>}))</span></code></pre></div>
<p><img src="https://laustep.github.io/stlahblog/posts/figures/quadrics_E.png" /></p>
<h1 id="one-sheeted-hyperboloid">One-sheeted hyperboloid</h1>
<p>There are three types of one-sheeted hyperboloids, corresponding to these equations: <span class="math display">\[
\frac{x^2}{a^2} + \frac{y^2}{b^2} - \frac{z^2}{c^2} = 1 \\
\frac{x^2}{a^2} - \frac{y^2}{b^2} + \frac{z^2}{c^2} = 1 \\
-\frac{x^2}{a^2} + \frac{y^2}{b^2} + \frac{z^2}{c^2} = 1.
\]</span> The <code>hyperboloidMesh</code> function below generates a mesh of the one-sheeted hyperboloid; the <code>signature</code> argument corresponds to one of the above equations, it must be <code>"++-"</code>, <code>"+-+"</code> or <code>"-++"</code>. The mesh is made of quadrilaterals and their number is controlled by the arguments <code>nu</code> and <code>nv</code>. The hyperboloid is infinite along the direction corresponding to the minus sign, and the argument <code>vmin</code> controls the truncation of the hyperboloid in this direction.</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode numberSource r numberLines"><code class="sourceCode r"><span id="cb4-1"><a href="#cb4-1"></a>hyperboloidMesh &lt;-<span class="st"> </span><span class="cf">function</span>(a, b, c, signature, nu, nv, vmin){</span>
<span id="cb4-2"><a href="#cb4-2"></a>  <span class="kw">stopifnot</span>(signature <span class="op">%in%</span><span class="st"> </span><span class="kw">c</span>(<span class="st">&quot;++-&quot;</span>, <span class="st">&quot;+-+&quot;</span>, <span class="st">&quot;-++&quot;</span>))</span>
<span id="cb4-3"><a href="#cb4-3"></a>  <span class="kw">stopifnot</span>(vmin <span class="op">&lt;</span><span class="st"> </span><span class="dv">1</span>, a <span class="op">&gt;</span><span class="st"> </span><span class="dv">0</span>, b <span class="op">&gt;</span><span class="st"> </span><span class="dv">0</span>, c <span class="op">&gt;</span><span class="st"> </span><span class="dv">0</span>)</span>
<span id="cb4-4"><a href="#cb4-4"></a>  <span class="cf">if</span>(signature <span class="op">==</span><span class="st"> &quot;+-+&quot;</span>){</span>
<span id="cb4-5"><a href="#cb4-5"></a>    mesh &lt;-<span class="st"> </span><span class="kw">hyperboloidMesh</span>(a, c, b, <span class="st">&quot;++-&quot;</span>, nu, nv, vmin)</span>
<span id="cb4-6"><a href="#cb4-6"></a>    mesh<span class="op">$</span>vb &lt;-<span class="st"> </span>mesh<span class="op">$</span>vb[<span class="kw">c</span>(1L,3L,2L,4L),]</span>
<span id="cb4-7"><a href="#cb4-7"></a>    mesh<span class="op">$</span>normals &lt;-<span class="st"> </span>mesh<span class="op">$</span>normals[<span class="kw">c</span>(1L,3L,2L),]</span>
<span id="cb4-8"><a href="#cb4-8"></a>    mesh<span class="op">$</span>ib &lt;-<span class="st"> </span>mesh<span class="op">$</span>ib[4L<span class="op">:</span>1L,]</span>
<span id="cb4-9"><a href="#cb4-9"></a>    <span class="kw">return</span>(mesh)</span>
<span id="cb4-10"><a href="#cb4-10"></a>  }<span class="cf">else</span> <span class="cf">if</span>(signature <span class="op">==</span><span class="st"> &quot;-++&quot;</span>){</span>
<span id="cb4-11"><a href="#cb4-11"></a>    mesh &lt;-<span class="st"> </span><span class="kw">hyperboloidMesh</span>(c, b, a, <span class="st">&quot;++-&quot;</span>, nu, nv, vmin)</span>
<span id="cb4-12"><a href="#cb4-12"></a>    mesh<span class="op">$</span>vb &lt;-<span class="st"> </span>mesh<span class="op">$</span>vb[<span class="kw">c</span>(3L,2L,1L,4L),]</span>
<span id="cb4-13"><a href="#cb4-13"></a>    mesh<span class="op">$</span>normals &lt;-<span class="st"> </span>mesh<span class="op">$</span>normals[<span class="kw">c</span>(3L,2L,1L),]</span>
<span id="cb4-14"><a href="#cb4-14"></a>    mesh<span class="op">$</span>ib &lt;-<span class="st"> </span>mesh<span class="op">$</span>ib[4L<span class="op">:</span>1L,]</span>
<span id="cb4-15"><a href="#cb4-15"></a>    <span class="kw">return</span>(mesh)</span>
<span id="cb4-16"><a href="#cb4-16"></a>  }</span>
<span id="cb4-17"><a href="#cb4-17"></a>  c0 &lt;-<span class="st"> </span>c</span>
<span id="cb4-18"><a href="#cb4-18"></a>  <span class="cf">if</span>(b <span class="op">&gt;</span><span class="st"> </span>a){</span>
<span id="cb4-19"><a href="#cb4-19"></a>    exchange &lt;-<span class="st"> </span><span class="ot">TRUE</span></span>
<span id="cb4-20"><a href="#cb4-20"></a>    a0 &lt;-<span class="st"> </span>b; b0 &lt;-<span class="st"> </span>a</span>
<span id="cb4-21"><a href="#cb4-21"></a>  }<span class="cf">else</span>{</span>
<span id="cb4-22"><a href="#cb4-22"></a>    exchange &lt;-<span class="st"> </span><span class="ot">FALSE</span></span>
<span id="cb4-23"><a href="#cb4-23"></a>    a0 &lt;-<span class="st"> </span>a; b0 &lt;-<span class="st"> </span>b</span>
<span id="cb4-24"><a href="#cb4-24"></a>  }</span>
<span id="cb4-25"><a href="#cb4-25"></a>  Mu2 &lt;-<span class="st"> </span>a0<span class="op">^</span><span class="dv">2</span></span>
<span id="cb4-26"><a href="#cb4-26"></a>  h2ab &lt;-<span class="st"> </span>Mu2 <span class="op">-</span><span class="st"> </span>b0<span class="op">^</span><span class="dv">2</span>; h2ac &lt;-<span class="st"> </span>c0<span class="op">^</span><span class="dv">2</span> <span class="op">+</span><span class="st"> </span>Mu2</span>
<span id="cb4-27"><a href="#cb4-27"></a>  c2 &lt;-<span class="st"> </span><span class="dv">1</span>; a2 &lt;-<span class="st"> </span>c2 <span class="op">+</span><span class="st"> </span>h2ac; b2 &lt;-<span class="st"> </span>a2 <span class="op">-</span><span class="st"> </span>h2ab</span>
<span id="cb4-28"><a href="#cb4-28"></a>  h2bc &lt;-<span class="st"> </span>b2 <span class="op">-</span><span class="st"> </span>c2</span>
<span id="cb4-29"><a href="#cb4-29"></a>  <span class="co">#</span></span>
<span id="cb4-30"><a href="#cb4-30"></a>  vertices &lt;-<span class="st"> </span>Normals &lt;-<span class="st"> </span><span class="kw">matrix</span>(<span class="ot">NA_real_</span>, <span class="dt">nrow =</span> 3L, <span class="dt">ncol =</span> nu<span class="op">*</span>nv)</span>
<span id="cb4-31"><a href="#cb4-31"></a>  indices &lt;-<span class="st"> </span><span class="kw">matrix</span>(<span class="ot">NA_integer_</span>, <span class="dt">nrow =</span> 4L, <span class="dt">ncol =</span> (nu<span class="dv">-1</span>)<span class="op">*</span>(nv<span class="dv">-1</span>))</span>
<span id="cb4-32"><a href="#cb4-32"></a>  v_ &lt;-<span class="st"> </span><span class="kw">seq</span>(vmin, c2, <span class="dt">length.out =</span> nv)</span>
<span id="cb4-33"><a href="#cb4-33"></a>  <span class="co">#</span></span>
<span id="cb4-34"><a href="#cb4-34"></a>  <span class="cf">if</span>(a0 <span class="op">!=</span><span class="st"> </span>b0){</span>
<span id="cb4-35"><a href="#cb4-35"></a>    u_ &lt;-<span class="st"> </span><span class="kw">seq</span>(b2, a2, <span class="dt">length.out =</span> nu)</span>
<span id="cb4-36"><a href="#cb4-36"></a>    x &lt;-<span class="st"> </span>a0 <span class="op">/</span><span class="st"> </span><span class="kw">sqrt</span>(h2ac<span class="op">*</span>h2ab) <span class="op">*</span><span class="st"> </span><span class="kw">sqrt</span>(a2<span class="op">-</span>u_)</span>
<span id="cb4-37"><a href="#cb4-37"></a>    y &lt;-<span class="st"> </span>b0 <span class="op">/</span><span class="st"> </span><span class="kw">sqrt</span>(h2bc<span class="op">*</span>h2ab) <span class="op">*</span><span class="st"> </span><span class="kw">sqrt</span>(u_<span class="op">-</span>b2)</span>
<span id="cb4-38"><a href="#cb4-38"></a>    z &lt;-<span class="st"> </span>c0 <span class="op">/</span><span class="st"> </span><span class="kw">sqrt</span>(h2bc<span class="op">*</span>h2ac) <span class="op">*</span><span class="st"> </span><span class="kw">sqrt</span>(u_<span class="op">-</span>c2)</span>
<span id="cb4-39"><a href="#cb4-39"></a>  }<span class="cf">else</span>{</span>
<span id="cb4-40"><a href="#cb4-40"></a>    u_ &lt;-<span class="st"> </span><span class="kw">seq</span>(<span class="dv">0</span>, <span class="dv">2</span><span class="op">*</span>pi, <span class="dt">length.out =</span> nu<span class="op">+</span><span class="dv">1</span>)[<span class="op">-</span>1L]</span>
<span id="cb4-41"><a href="#cb4-41"></a>    z &lt;-<span class="st"> </span><span class="kw">rep</span>(c0<span class="op">/</span><span class="kw">sqrt</span>(h2ac), nu)</span>
<span id="cb4-42"><a href="#cb4-42"></a>    mxy &lt;-<span class="st"> </span>a0 <span class="op">/</span><span class="st"> </span><span class="kw">sqrt</span>(h2ac)</span>
<span id="cb4-43"><a href="#cb4-43"></a>    x &lt;-<span class="st"> </span>mxy <span class="op">*</span><span class="st"> </span><span class="kw">cos</span>(u_)</span>
<span id="cb4-44"><a href="#cb4-44"></a>    y &lt;-<span class="st"> </span>mxy <span class="op">*</span><span class="st"> </span><span class="kw">sin</span>(u_)</span>
<span id="cb4-45"><a href="#cb4-45"></a>  }</span>
<span id="cb4-46"><a href="#cb4-46"></a>  <span class="cf">for</span>(i <span class="cf">in</span> <span class="dv">1</span><span class="op">:</span>nu){</span>
<span id="cb4-47"><a href="#cb4-47"></a>    <span class="cf">for</span>(j <span class="cf">in</span> <span class="dv">1</span><span class="op">:</span>nv){</span>
<span id="cb4-48"><a href="#cb4-48"></a>      P &lt;-<span class="st"> </span>vertices[, (i<span class="dv">-1</span>)<span class="op">*</span>nv<span class="op">+</span>j] &lt;-<span class="st"> </span><span class="kw">c</span>(</span>
<span id="cb4-49"><a href="#cb4-49"></a>        x[i] <span class="op">*</span><span class="st"> </span><span class="kw">sqrt</span>(a2<span class="op">-</span>v_[j]),</span>
<span id="cb4-50"><a href="#cb4-50"></a>        y[i] <span class="op">*</span><span class="st"> </span><span class="kw">sqrt</span>(b2<span class="op">-</span>v_[j]),</span>
<span id="cb4-51"><a href="#cb4-51"></a>        z[i] <span class="op">*</span><span class="st"> </span><span class="kw">sqrt</span>(c2<span class="op">-</span>v_[j])</span>
<span id="cb4-52"><a href="#cb4-52"></a>      )</span>
<span id="cb4-53"><a href="#cb4-53"></a>      Normals[, (i<span class="dv">-1</span>)<span class="op">*</span>nv<span class="op">+</span>j] &lt;-<span class="st"> </span><span class="kw">c</span>(P[1L]<span class="op">/</span>a0<span class="op">^</span><span class="dv">2</span>, P[2L]<span class="op">/</span>b0<span class="op">^</span><span class="dv">2</span>, <span class="op">-</span>P[3L]<span class="op">/</span>c0<span class="op">^</span><span class="dv">2</span>)</span>
<span id="cb4-54"><a href="#cb4-54"></a>    }</span>
<span id="cb4-55"><a href="#cb4-55"></a>  }</span>
<span id="cb4-56"><a href="#cb4-56"></a>  <span class="co"># quads</span></span>
<span id="cb4-57"><a href="#cb4-57"></a>  <span class="cf">for</span>(i <span class="cf">in</span> 1L<span class="op">:</span>(nu<span class="dv">-1</span>)){</span>
<span id="cb4-58"><a href="#cb4-58"></a>    im1 &lt;-<span class="st"> </span>i<span class="op">-</span>1L</span>
<span id="cb4-59"><a href="#cb4-59"></a>    <span class="cf">for</span>(j <span class="cf">in</span> 1L<span class="op">:</span>(nv<span class="dv">-1</span>)){</span>
<span id="cb4-60"><a href="#cb4-60"></a>      jp1 &lt;-<span class="st"> </span>j<span class="op">+</span>1L</span>
<span id="cb4-61"><a href="#cb4-61"></a>      quad &lt;-<span class="st"> </span><span class="kw">c</span>(im1<span class="op">*</span>nv<span class="op">+</span>j, im1<span class="op">*</span>nv<span class="op">+</span>jp1, i<span class="op">*</span>nv<span class="op">+</span>jp1, i<span class="op">*</span>nv<span class="op">+</span>j)</span>
<span id="cb4-62"><a href="#cb4-62"></a>      indices[, im1<span class="op">*</span>(nv<span class="dv">-1</span>)<span class="op">+</span>j] &lt;-<span class="st"> </span><span class="cf">if</span>(exchange) <span class="kw">rev</span>(quad) <span class="cf">else</span> quad</span>
<span id="cb4-63"><a href="#cb4-63"></a>    }</span>
<span id="cb4-64"><a href="#cb4-64"></a>  }</span>
<span id="cb4-65"><a href="#cb4-65"></a>  vertices &lt;-<span class="st"> </span><span class="kw">cbind</span>(vertices, <span class="kw">c</span>(<span class="op">-</span><span class="dv">1</span>,<span class="dv">1</span>,<span class="dv">1</span>) <span class="op">*</span><span class="st"> </span>vertices)</span>
<span id="cb4-66"><a href="#cb4-66"></a>  indices &lt;-<span class="st"> </span><span class="kw">cbind</span>(indices, indices[4L<span class="op">:</span>1L,] <span class="op">+</span><span class="st"> </span>nu<span class="op">*</span>nv)</span>
<span id="cb4-67"><a href="#cb4-67"></a>  Normals &lt;-<span class="st"> </span><span class="kw">cbind</span>(Normals, <span class="kw">c</span>(<span class="op">-</span><span class="dv">1</span>,<span class="dv">1</span>,<span class="dv">1</span>) <span class="op">*</span><span class="st"> </span>Normals)</span>
<span id="cb4-68"><a href="#cb4-68"></a>  vertices &lt;-<span class="st"> </span><span class="kw">cbind</span>(vertices, <span class="kw">c</span>(<span class="dv">1</span>,<span class="op">-</span><span class="dv">1</span>,<span class="dv">1</span>) <span class="op">*</span><span class="st"> </span>vertices)</span>
<span id="cb4-69"><a href="#cb4-69"></a>  indices &lt;-<span class="st"> </span><span class="kw">cbind</span>(indices, indices[4L<span class="op">:</span>1L,] <span class="op">+</span><span class="st"> </span><span class="dv">2</span><span class="op">*</span>nu<span class="op">*</span>nv)</span>
<span id="cb4-70"><a href="#cb4-70"></a>  Normals &lt;-<span class="st"> </span><span class="kw">cbind</span>(Normals, <span class="kw">c</span>(<span class="dv">1</span>,<span class="op">-</span><span class="dv">1</span>,<span class="dv">1</span>) <span class="op">*</span><span class="st"> </span>Normals)</span>
<span id="cb4-71"><a href="#cb4-71"></a>  vertices &lt;-<span class="st"> </span><span class="kw">cbind</span>(vertices, <span class="kw">c</span>(<span class="dv">1</span>,<span class="dv">1</span>,<span class="op">-</span><span class="dv">1</span>) <span class="op">*</span><span class="st"> </span>vertices)</span>
<span id="cb4-72"><a href="#cb4-72"></a>  indices &lt;-<span class="st"> </span><span class="kw">cbind</span>(indices, indices[4L<span class="op">:</span>1L,] <span class="op">+</span><span class="st"> </span><span class="dv">4</span><span class="op">*</span>nu<span class="op">*</span>nv)</span>
<span id="cb4-73"><a href="#cb4-73"></a>  Normals &lt;-<span class="st"> </span><span class="kw">cbind</span>(Normals, <span class="kw">c</span>(<span class="dv">1</span>,<span class="dv">1</span>,<span class="op">-</span><span class="dv">1</span>) <span class="op">*</span><span class="st"> </span>Normals)</span>
<span id="cb4-74"><a href="#cb4-74"></a>  mesh &lt;-<span class="st"> </span><span class="kw">qmesh3d</span>(</span>
<span id="cb4-75"><a href="#cb4-75"></a>    <span class="dt">vertices =</span> <span class="cf">if</span>(exchange) vertices[<span class="kw">c</span>(2L,1L,3L),] <span class="cf">else</span> vertices,</span>
<span id="cb4-76"><a href="#cb4-76"></a>    <span class="dt">indices =</span> indices,</span>
<span id="cb4-77"><a href="#cb4-77"></a>    <span class="dt">homogeneous =</span> <span class="ot">FALSE</span>,</span>
<span id="cb4-78"><a href="#cb4-78"></a>    <span class="dt">normals =</span> <span class="kw">t</span>(<span class="cf">if</span>(exchange) Normals[<span class="kw">c</span>(2L,1L,3L),] <span class="cf">else</span> Normals)</span>
<span id="cb4-79"><a href="#cb4-79"></a>  )</span>
<span id="cb4-80"><a href="#cb4-80"></a>  mesh</span>
<span id="cb4-81"><a href="#cb4-81"></a>}</span></code></pre></div>
<p>The <code>curvatureLinesH1</code> function below generates some curvature lines of the one-sheeted hyperboloid. There are two families of curvature lines and the desired numbers of lines in them are controlled by the arguments <code>nu</code> and <code>nv</code>.</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode numberSource r numberLines"><code class="sourceCode r"><span id="cb5-1"><a href="#cb5-1"></a>curvatureLinesH1 &lt;-<span class="st"> </span><span class="cf">function</span>(a, b, c, <span class="dt">signature =</span> <span class="st">&quot;++-&quot;</span>, nu, nv, vmin,  </span>
<span id="cb5-2"><a href="#cb5-2"></a>                             <span class="dt">npoints =</span> <span class="dv">100</span>){</span>
<span id="cb5-3"><a href="#cb5-3"></a>  <span class="kw">stopifnot</span>(signature <span class="op">%in%</span><span class="st"> </span><span class="kw">c</span>(<span class="st">&quot;++-&quot;</span>, <span class="st">&quot;+-+&quot;</span>, <span class="st">&quot;-++&quot;</span>))</span>
<span id="cb5-4"><a href="#cb5-4"></a>  <span class="kw">stopifnot</span>(vmin <span class="op">&lt;</span><span class="st"> </span><span class="dv">1</span>, a <span class="op">&gt;</span><span class="st"> </span><span class="dv">0</span>, b <span class="op">&gt;</span><span class="st"> </span><span class="dv">0</span>, c <span class="op">&gt;</span><span class="st"> </span><span class="dv">0</span>)</span>
<span id="cb5-5"><a href="#cb5-5"></a>  <span class="cf">if</span>(signature <span class="op">==</span><span class="st"> &quot;+-+&quot;</span>){</span>
<span id="cb5-6"><a href="#cb5-6"></a>    clines &lt;-<span class="st"> </span><span class="kw">curvatureLinesH1</span>(a, c, b, <span class="st">&quot;++-&quot;</span>, nu, nv, vmin, npoints)</span>
<span id="cb5-7"><a href="#cb5-7"></a>    <span class="kw">return</span>(<span class="kw">lapply</span>(clines, <span class="cf">function</span>(l) l[,<span class="kw">c</span>(1L,3L,2L)]))</span>
<span id="cb5-8"><a href="#cb5-8"></a>  }<span class="cf">else</span> <span class="cf">if</span>(signature <span class="op">==</span><span class="st"> &quot;-++&quot;</span>){</span>
<span id="cb5-9"><a href="#cb5-9"></a>    clines &lt;-<span class="st"> </span><span class="kw">curvatureLinesH1</span>(c, b, a, <span class="st">&quot;++-&quot;</span>, nu, nv, vmin, npoints)</span>
<span id="cb5-10"><a href="#cb5-10"></a>    <span class="kw">return</span>(<span class="kw">lapply</span>(clines, <span class="cf">function</span>(l) l[,<span class="kw">c</span>(3L,2L,1L)]))</span>
<span id="cb5-11"><a href="#cb5-11"></a>  }</span>
<span id="cb5-12"><a href="#cb5-12"></a>  c0 &lt;-<span class="st"> </span>c</span>
<span id="cb5-13"><a href="#cb5-13"></a>  <span class="cf">if</span>(b <span class="op">&gt;</span><span class="st"> </span>a){</span>
<span id="cb5-14"><a href="#cb5-14"></a>    exchange &lt;-<span class="st"> </span><span class="ot">TRUE</span></span>
<span id="cb5-15"><a href="#cb5-15"></a>    a0 &lt;-<span class="st"> </span>b; b0 &lt;-<span class="st"> </span>a</span>
<span id="cb5-16"><a href="#cb5-16"></a>  }<span class="cf">else</span>{</span>
<span id="cb5-17"><a href="#cb5-17"></a>    exchange &lt;-<span class="st"> </span><span class="ot">FALSE</span></span>
<span id="cb5-18"><a href="#cb5-18"></a>    a0 &lt;-<span class="st"> </span>a; b0 &lt;-<span class="st"> </span>b</span>
<span id="cb5-19"><a href="#cb5-19"></a>  }</span>
<span id="cb5-20"><a href="#cb5-20"></a>  Mu2 &lt;-<span class="st"> </span>a0<span class="op">^</span><span class="dv">2</span></span>
<span id="cb5-21"><a href="#cb5-21"></a>  h2ab &lt;-<span class="st"> </span>Mu2 <span class="op">-</span><span class="st"> </span>b0<span class="op">^</span><span class="dv">2</span>; h2ac &lt;-<span class="st"> </span>c0<span class="op">^</span><span class="dv">2</span> <span class="op">+</span><span class="st"> </span>Mu2</span>
<span id="cb5-22"><a href="#cb5-22"></a>  c2 &lt;-<span class="st"> </span><span class="dv">1</span>; a2 &lt;-<span class="st"> </span>c2 <span class="op">+</span><span class="st"> </span>h2ac; b2 &lt;-<span class="st"> </span>a2 <span class="op">-</span><span class="st"> </span>h2ab</span>
<span id="cb5-23"><a href="#cb5-23"></a>  h2bc &lt;-<span class="st"> </span>b2 <span class="op">-</span><span class="st"> </span>c2</span>
<span id="cb5-24"><a href="#cb5-24"></a>  <span class="co">#  </span></span>
<span id="cb5-25"><a href="#cb5-25"></a>  v_ &lt;-<span class="st"> </span><span class="kw">seq</span>(vmin, c2, <span class="dt">length.out =</span> nv)</span>
<span id="cb5-26"><a href="#cb5-26"></a>  t_ &lt;-<span class="st"> </span><span class="kw">seq</span>(vmin, c2, <span class="dt">length.out =</span> npoints)</span>
<span id="cb5-27"><a href="#cb5-27"></a>  <span class="co">#</span></span>
<span id="cb5-28"><a href="#cb5-28"></a>  <span class="cf">if</span>(a0 <span class="op">!=</span><span class="st"> </span>b0){</span>
<span id="cb5-29"><a href="#cb5-29"></a>    u_ &lt;-<span class="st"> </span><span class="kw">seq</span>(b2, a2, <span class="dt">length.out =</span> nu)</span>
<span id="cb5-30"><a href="#cb5-30"></a>    s_ &lt;-<span class="st"> </span><span class="kw">seq</span>(b2, a2, <span class="dt">length.out =</span> npoints)</span>
<span id="cb5-31"><a href="#cb5-31"></a>    mx &lt;-<span class="st"> </span>a0 <span class="op">/</span><span class="st"> </span><span class="kw">sqrt</span>(h2ac<span class="op">*</span>h2ab)</span>
<span id="cb5-32"><a href="#cb5-32"></a>    my &lt;-<span class="st"> </span>b0 <span class="op">/</span><span class="st"> </span><span class="kw">sqrt</span>(h2bc<span class="op">*</span>h2ab)</span>
<span id="cb5-33"><a href="#cb5-33"></a>    mz &lt;-<span class="st"> </span>c0 <span class="op">/</span><span class="st"> </span><span class="kw">sqrt</span>(h2bc<span class="op">*</span>h2ac)</span>
<span id="cb5-34"><a href="#cb5-34"></a>    out &lt;-<span class="st"> </span><span class="kw">vector</span>(<span class="st">&quot;list&quot;</span>, <span class="dv">2</span><span class="op">*</span>nv <span class="op">+</span><span class="st"> </span><span class="dv">4</span><span class="op">*</span>nu <span class="op">-</span><span class="st"> </span><span class="dv">5</span>)</span>
<span id="cb5-35"><a href="#cb5-35"></a>    <span class="cf">for</span>(j <span class="cf">in</span> 1L<span class="op">:</span>nv){</span>
<span id="cb5-36"><a href="#cb5-36"></a>      x &lt;-<span class="st"> </span>mx <span class="op">*</span><span class="st"> </span><span class="kw">sqrt</span>((a2<span class="op">-</span>s_)<span class="op">*</span>(a2<span class="op">-</span>v_[j]))</span>
<span id="cb5-37"><a href="#cb5-37"></a>      y &lt;-<span class="st"> </span>my <span class="op">*</span><span class="st"> </span><span class="kw">sqrt</span>((s_<span class="op">-</span>b2)<span class="op">*</span>(b2<span class="op">-</span>v_[j]))</span>
<span id="cb5-38"><a href="#cb5-38"></a>      z &lt;-<span class="st"> </span>mz <span class="op">*</span><span class="st"> </span><span class="kw">sqrt</span>((s_<span class="op">-</span>c2)<span class="op">*</span>(c2<span class="op">-</span>v_[j]))</span>
<span id="cb5-39"><a href="#cb5-39"></a>      M &lt;-<span class="st"> </span><span class="kw">rbind</span>(<span class="kw">cbind</span>(x, y, z), <span class="kw">cbind</span>(<span class="op">-</span>x, y, z)[(npoints<span class="dv">-1</span>)<span class="op">:</span>1L,])</span>
<span id="cb5-40"><a href="#cb5-40"></a>      M &lt;-<span class="st"> </span><span class="kw">rbind</span>(M, <span class="kw">cbind</span>(M[,1L], <span class="op">-</span>M[,2L], M[,3L])[(<span class="dv">2</span><span class="op">*</span>npoints<span class="dv">-2</span>)<span class="op">:</span>1L,])</span>
<span id="cb5-41"><a href="#cb5-41"></a>      out[[j]] &lt;-<span class="st"> </span>M</span>
<span id="cb5-42"><a href="#cb5-42"></a>      <span class="cf">if</span>(j <span class="op">&lt;</span><span class="st"> </span>nv){</span>
<span id="cb5-43"><a href="#cb5-43"></a>        out[[nv<span class="op">+</span>j]] &lt;-<span class="st"> </span><span class="kw">cbind</span>(M[,<span class="kw">c</span>(1L,2L)], <span class="op">-</span>M[,3L])</span>
<span id="cb5-44"><a href="#cb5-44"></a>      }</span>
<span id="cb5-45"><a href="#cb5-45"></a>    }</span>
<span id="cb5-46"><a href="#cb5-46"></a>    <span class="cf">for</span>(i <span class="cf">in</span> 1L<span class="op">:</span>nu){</span>
<span id="cb5-47"><a href="#cb5-47"></a>      x &lt;-<span class="st"> </span>mx <span class="op">*</span><span class="st"> </span><span class="kw">sqrt</span>((a2<span class="op">-</span>u_[i])<span class="op">*</span>(a2<span class="op">-</span>t_))</span>
<span id="cb5-48"><a href="#cb5-48"></a>      y &lt;-<span class="st"> </span>my <span class="op">*</span><span class="st"> </span><span class="kw">sqrt</span>((u_[i]<span class="op">-</span>b2)<span class="op">*</span>(b2<span class="op">-</span>t_))</span>
<span id="cb5-49"><a href="#cb5-49"></a>      z &lt;-<span class="st"> </span>mz <span class="op">*</span><span class="st"> </span><span class="kw">sqrt</span>((u_[i]<span class="op">-</span>c2)<span class="op">*</span>(c2<span class="op">-</span>t_))</span>
<span id="cb5-50"><a href="#cb5-50"></a>      M &lt;-<span class="st"> </span><span class="kw">rbind</span>(<span class="kw">cbind</span>(x, y, z), <span class="kw">cbind</span>(x, y, <span class="op">-</span>z)[(npoints<span class="dv">-1</span>)<span class="op">:</span>1L,])</span>
<span id="cb5-51"><a href="#cb5-51"></a>      out[[<span class="dv">2</span><span class="op">*</span>nv<span class="dv">-1</span><span class="op">+</span>i]] &lt;-<span class="st"> </span>M</span>
<span id="cb5-52"><a href="#cb5-52"></a>      <span class="cf">if</span>(i <span class="op">&lt;</span><span class="st"> </span>nu){</span>
<span id="cb5-53"><a href="#cb5-53"></a>        out[[<span class="dv">2</span><span class="op">*</span>nv<span class="dv">-1</span><span class="op">+</span>nu<span class="op">+</span>i]] &lt;-<span class="st"> </span><span class="kw">cbind</span>(<span class="op">-</span>M[,1L], M[,<span class="kw">c</span>(2L,3L)])</span>
<span id="cb5-54"><a href="#cb5-54"></a>        <span class="cf">if</span>(i<span class="op">&gt;</span>1L) out[[<span class="dv">2</span><span class="op">*</span>nv<span class="op">+</span><span class="dv">3</span><span class="op">*</span>nu<span class="op">+</span>i<span class="dv">-4</span>]] &lt;-<span class="st"> </span><span class="kw">cbind</span>(<span class="op">-</span>M[,<span class="kw">c</span>(1L,2L)], M[,3L])</span>
<span id="cb5-55"><a href="#cb5-55"></a>      }</span>
<span id="cb5-56"><a href="#cb5-56"></a>      <span class="cf">if</span>(i <span class="op">&gt;</span><span class="st"> </span>1L){</span>
<span id="cb5-57"><a href="#cb5-57"></a>        out[[<span class="dv">2</span><span class="op">*</span>nv<span class="op">+</span><span class="dv">2</span><span class="op">*</span>nu<span class="op">+</span>i<span class="dv">-3</span>]] &lt;-<span class="st"> </span><span class="kw">cbind</span>(M[,1L], <span class="op">-</span>M[,2L], M[,3L])</span>
<span id="cb5-58"><a href="#cb5-58"></a>      }</span>
<span id="cb5-59"><a href="#cb5-59"></a>    }</span>
<span id="cb5-60"><a href="#cb5-60"></a>  }<span class="cf">else</span>{ <span class="co"># a0 = b0</span></span>
<span id="cb5-61"><a href="#cb5-61"></a>    u_ &lt;-<span class="st"> </span><span class="kw">seq</span>(<span class="dv">0</span>, <span class="dv">2</span><span class="op">*</span>pi, <span class="dt">length.out =</span> nu<span class="op">+</span><span class="dv">1</span>)[<span class="op">-</span>1L]</span>
<span id="cb5-62"><a href="#cb5-62"></a>    s_ &lt;-<span class="st"> </span><span class="kw">seq</span>(<span class="dv">0</span>, <span class="dv">2</span><span class="op">*</span>pi, <span class="dt">length.out =</span> npoints)</span>
<span id="cb5-63"><a href="#cb5-63"></a>    coss_ &lt;-<span class="st"> </span><span class="kw">cos</span>(s_); sins_ &lt;-<span class="st"> </span><span class="kw">sin</span>(s_)</span>
<span id="cb5-64"><a href="#cb5-64"></a>    mxy &lt;-<span class="st"> </span>a0 <span class="op">/</span><span class="st"> </span><span class="kw">sqrt</span>(h2ac)</span>
<span id="cb5-65"><a href="#cb5-65"></a>    mz &lt;-<span class="st"> </span>c0 <span class="op">/</span><span class="st"> </span><span class="kw">sqrt</span>(h2bc)</span>
<span id="cb5-66"><a href="#cb5-66"></a>    out &lt;-<span class="st"> </span><span class="kw">vector</span>(<span class="st">&quot;list&quot;</span>, <span class="dv">2</span><span class="op">*</span>nv <span class="op">+</span><span class="st"> </span><span class="dv">4</span><span class="op">*</span>nu <span class="op">-</span><span class="st"> </span><span class="dv">5</span>)</span>
<span id="cb5-67"><a href="#cb5-67"></a>    <span class="cf">for</span>(j <span class="cf">in</span> 1L<span class="op">:</span>nv){</span>
<span id="cb5-68"><a href="#cb5-68"></a>      x &lt;-<span class="st"> </span>mxy <span class="op">*</span><span class="st"> </span><span class="kw">sqrt</span>(a2<span class="op">-</span>v_[j]) <span class="op">*</span><span class="st"> </span>coss_</span>
<span id="cb5-69"><a href="#cb5-69"></a>      y &lt;-<span class="st"> </span>mxy <span class="op">*</span><span class="st"> </span><span class="kw">sqrt</span>(b2<span class="op">-</span>v_[j]) <span class="op">*</span><span class="st"> </span>sins_</span>
<span id="cb5-70"><a href="#cb5-70"></a>      z &lt;-<span class="st"> </span>mz <span class="op">*</span><span class="st"> </span><span class="kw">sqrt</span>(c2<span class="op">-</span>v_[j]) </span>
<span id="cb5-71"><a href="#cb5-71"></a>      M &lt;-<span class="st"> </span><span class="kw">cbind</span>(x, y, z)</span>
<span id="cb5-72"><a href="#cb5-72"></a>      out[[j]] &lt;-<span class="st"> </span>M</span>
<span id="cb5-73"><a href="#cb5-73"></a>      <span class="cf">if</span>(j <span class="op">&lt;</span><span class="st"> </span>nv){</span>
<span id="cb5-74"><a href="#cb5-74"></a>        out[[nv<span class="op">+</span>j]] &lt;-<span class="st"> </span><span class="kw">cbind</span>(M[,<span class="kw">c</span>(1L,2L)], <span class="op">-</span>M[,3L])</span>
<span id="cb5-75"><a href="#cb5-75"></a>      }</span>
<span id="cb5-76"><a href="#cb5-76"></a>    }</span>
<span id="cb5-77"><a href="#cb5-77"></a>    r &lt;-<span class="st"> </span>mxy <span class="op">*</span><span class="st"> </span><span class="kw">sqrt</span>(a2<span class="op">-</span>t_)</span>
<span id="cb5-78"><a href="#cb5-78"></a>    z &lt;-<span class="st"> </span>mz <span class="op">*</span><span class="st"> </span><span class="kw">sqrt</span>(c2<span class="op">-</span>t_)</span>
<span id="cb5-79"><a href="#cb5-79"></a>    <span class="cf">for</span>(i <span class="cf">in</span> 1L<span class="op">:</span>nu){</span>
<span id="cb5-80"><a href="#cb5-80"></a>      x &lt;-<span class="st"> </span>r <span class="op">*</span><span class="st"> </span><span class="kw">cos</span>(u_[i])</span>
<span id="cb5-81"><a href="#cb5-81"></a>      y &lt;-<span class="st"> </span>r <span class="op">*</span><span class="st"> </span><span class="kw">sin</span>(u_[i])</span>
<span id="cb5-82"><a href="#cb5-82"></a>      M &lt;-<span class="st"> </span><span class="kw">rbind</span>(<span class="kw">cbind</span>(x, y, z), <span class="kw">cbind</span>(x, y, <span class="op">-</span>z)[(npoints<span class="dv">-1</span>)<span class="op">:</span>1L,])</span>
<span id="cb5-83"><a href="#cb5-83"></a>      out[[<span class="dv">2</span><span class="op">*</span>nv<span class="dv">-1</span><span class="op">+</span>i]] &lt;-<span class="st"> </span>M</span>
<span id="cb5-84"><a href="#cb5-84"></a>      <span class="cf">if</span>(i <span class="op">&lt;</span><span class="st"> </span>nu){</span>
<span id="cb5-85"><a href="#cb5-85"></a>        out[[<span class="dv">2</span><span class="op">*</span>nv<span class="dv">-1</span><span class="op">+</span>nu<span class="op">+</span>i]] &lt;-<span class="st"> </span><span class="kw">cbind</span>(<span class="op">-</span>M[,1L], M[,<span class="kw">c</span>(2L,3L)])</span>
<span id="cb5-86"><a href="#cb5-86"></a>        <span class="cf">if</span>(i<span class="op">&gt;</span>1L) out[[<span class="dv">2</span><span class="op">*</span>nv<span class="op">+</span><span class="dv">3</span><span class="op">*</span>nu<span class="op">+</span>i<span class="dv">-4</span>]] &lt;-<span class="st"> </span><span class="kw">cbind</span>(<span class="op">-</span>M[,<span class="kw">c</span>(1L,2L)], M[,3L])</span>
<span id="cb5-87"><a href="#cb5-87"></a>      }</span>
<span id="cb5-88"><a href="#cb5-88"></a>      <span class="cf">if</span>(i <span class="op">&gt;</span><span class="st"> </span>1L){</span>
<span id="cb5-89"><a href="#cb5-89"></a>        out[[<span class="dv">2</span><span class="op">*</span>nv<span class="op">+</span><span class="dv">2</span><span class="op">*</span>nu<span class="op">+</span>i<span class="dv">-3</span>]] &lt;-<span class="st"> </span><span class="kw">cbind</span>(M[,1L], <span class="op">-</span>M[,2L], M[,3L])</span>
<span id="cb5-90"><a href="#cb5-90"></a>      }</span>
<span id="cb5-91"><a href="#cb5-91"></a>    }</span>
<span id="cb5-92"><a href="#cb5-92"></a>  }</span>
<span id="cb5-93"><a href="#cb5-93"></a>  <span class="cf">if</span>(exchange){</span>
<span id="cb5-94"><a href="#cb5-94"></a>    out &lt;-<span class="st"> </span><span class="kw">lapply</span>(out, <span class="cf">function</span>(M){</span>
<span id="cb5-95"><a href="#cb5-95"></a>      M[, <span class="kw">c</span>(2L,1L,3L)]</span>
<span id="cb5-96"><a href="#cb5-96"></a>    })</span>
<span id="cb5-97"><a href="#cb5-97"></a>  }</span>
<span id="cb5-98"><a href="#cb5-98"></a>  out</span>
<span id="cb5-99"><a href="#cb5-99"></a>}</span></code></pre></div>
<p>Here is an example:</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode numberSource r numberLines"><code class="sourceCode r"><span id="cb6-1"><a href="#cb6-1"></a>sgntr =<span class="st"> &quot;++-&quot;</span></span>
<span id="cb6-2"><a href="#cb6-2"></a>a =<span class="st"> </span><span class="dv">4</span>; b =<span class="st"> </span><span class="dv">6</span>; c =<span class="st"> </span><span class="dv">5</span></span>
<span id="cb6-3"><a href="#cb6-3"></a>mesh &lt;-<span class="st"> </span><span class="kw">hyperboloidMesh</span>(a, b, c, sgntr, <span class="dt">nu =</span> <span class="dv">100</span>, <span class="dt">nv =</span> <span class="dv">100</span>, <span class="dt">vmin =</span> <span class="dv">-150</span>)</span>
<span id="cb6-4"><a href="#cb6-4"></a>clines &lt;-<span class="st"> </span><span class="kw">curvatureLinesH1</span>(a, b, c, sgntr, <span class="dt">nu =</span> <span class="dv">5</span>, <span class="dt">nv =</span> <span class="dv">5</span>, <span class="dt">vmin =</span> <span class="dv">-150</span>)</span>
<span id="cb6-5"><a href="#cb6-5"></a><span class="kw">shade3d</span>(mesh, <span class="dt">color =</span> <span class="st">&quot;chartreuse4&quot;</span>, <span class="dt">back =</span> <span class="st">&quot;culled&quot;</span>) </span>
<span id="cb6-6"><a href="#cb6-6"></a><span class="kw">shade3d</span>(mesh, <span class="dt">color =</span> <span class="st">&quot;yellow&quot;</span>, <span class="dt">front =</span> <span class="st">&quot;culled&quot;</span>) </span>
<span id="cb6-7"><a href="#cb6-7"></a><span class="kw">invisible</span>(<span class="kw">lapply</span>(clines, <span class="cf">function</span>(l){</span>
<span id="cb6-8"><a href="#cb6-8"></a>  <span class="kw">shade3d</span>(<span class="kw">cylinder3d</span>(l, <span class="dt">radius =</span> <span class="fl">0.1</span>, <span class="dt">sides =</span> <span class="dv">30</span>))</span>
<span id="cb6-9"><a href="#cb6-9"></a>}))</span></code></pre></div>
<p><img src="https://laustep.github.io/stlahblog/posts/figures/quadrics_H1.png" /></p>
<h1 id="two-sheeted-hyperboloid">Two-sheeted hyperboloid</h1>
<p>There are three types of two-sheeted hyperboloids, corresponding to these equations: <span class="math display">\[
\frac{x^2}{a^2} - \frac{y^2}{b^2} - \frac{z^2}{c^2} = 1 \\
-\frac{x^2}{a^2} - \frac{y^2}{b^2} + \frac{z^2}{c^2} = 1 \\
-\frac{x^2}{a^2} + \frac{y^2}{b^2} - \frac{z^2}{c^2} = 1.
\]</span> The <code>twoSheetsHyperboloidMesh</code> function below generates a mesh of the two-sheeted hyperboloid; the <code>signature</code> argument corresponds to one of the above equations, it must be <code>"+--"</code>, <code>"--+"</code> or <code>"-+-"</code>. The mesh is made of quadrilaterals and their number is controlled by the arguments <code>nu</code> and <code>nv</code>. The two-sheeted hyperboloid is infinite and the argument <code>vmin</code> is here to control its truncation.</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode numberSource r numberLines"><code class="sourceCode r"><span id="cb7-1"><a href="#cb7-1"></a>twoSheetsHyperboloidMesh &lt;-<span class="st"> </span><span class="cf">function</span>(a, b, c, signature, nu, nv, vmin){</span>
<span id="cb7-2"><a href="#cb7-2"></a>  <span class="kw">stopifnot</span>(signature <span class="op">%in%</span><span class="st"> </span><span class="kw">c</span>(<span class="st">&quot;+--&quot;</span>, <span class="st">&quot;--+&quot;</span>, <span class="st">&quot;-+-&quot;</span>))</span>
<span id="cb7-3"><a href="#cb7-3"></a>  <span class="kw">stopifnot</span>(vmin <span class="op">&lt;</span><span class="st"> </span><span class="dv">1</span>)</span>
<span id="cb7-4"><a href="#cb7-4"></a>  <span class="cf">if</span>(signature <span class="op">==</span><span class="st"> &quot;--+&quot;</span>){</span>
<span id="cb7-5"><a href="#cb7-5"></a>    mesh &lt;-<span class="st"> </span><span class="kw">twoSheetsHyperboloidMesh</span>(c, b, a, <span class="st">&quot;+--&quot;</span>, nu, nv, vmin)</span>
<span id="cb7-6"><a href="#cb7-6"></a>    mesh<span class="op">$</span>vb &lt;-<span class="st"> </span>mesh<span class="op">$</span>vb[<span class="kw">c</span>(3L,2L,1L,4L),]</span>
<span id="cb7-7"><a href="#cb7-7"></a>    mesh<span class="op">$</span>normals &lt;-<span class="st"> </span>mesh<span class="op">$</span>normals[<span class="kw">c</span>(3L,2L,1L),]</span>
<span id="cb7-8"><a href="#cb7-8"></a>    mesh<span class="op">$</span>ib &lt;-<span class="st"> </span>mesh<span class="op">$</span>ib[4L<span class="op">:</span>1L,]</span>
<span id="cb7-9"><a href="#cb7-9"></a>    <span class="kw">return</span>(mesh)</span>
<span id="cb7-10"><a href="#cb7-10"></a>  }<span class="cf">else</span> <span class="cf">if</span>(signature <span class="op">==</span><span class="st"> &quot;-+-&quot;</span>){</span>
<span id="cb7-11"><a href="#cb7-11"></a>    mesh &lt;-<span class="st"> </span><span class="kw">twoSheetsHyperboloidMesh</span>(b, a, c, <span class="st">&quot;+--&quot;</span>, nu, nv, vmin)</span>
<span id="cb7-12"><a href="#cb7-12"></a>    mesh<span class="op">$</span>vb &lt;-<span class="st"> </span>mesh<span class="op">$</span>vb[<span class="kw">c</span>(2L,1L,3L,4L),]</span>
<span id="cb7-13"><a href="#cb7-13"></a>    mesh<span class="op">$</span>normals &lt;-<span class="st"> </span>mesh<span class="op">$</span>normals[<span class="kw">c</span>(2L,1L,3L),]</span>
<span id="cb7-14"><a href="#cb7-14"></a>    mesh<span class="op">$</span>ib &lt;-<span class="st"> </span>mesh<span class="op">$</span>ib[4L<span class="op">:</span>1L,]</span>
<span id="cb7-15"><a href="#cb7-15"></a>    <span class="kw">return</span>(mesh)</span>
<span id="cb7-16"><a href="#cb7-16"></a>  }</span>
<span id="cb7-17"><a href="#cb7-17"></a>  a0 &lt;-<span class="st"> </span>a</span>
<span id="cb7-18"><a href="#cb7-18"></a>  <span class="cf">if</span>(b <span class="op">&gt;</span><span class="st"> </span>c){</span>
<span id="cb7-19"><a href="#cb7-19"></a>    exchange &lt;-<span class="st"> </span><span class="ot">TRUE</span></span>
<span id="cb7-20"><a href="#cb7-20"></a>    b0 &lt;-<span class="st"> </span>c; c0 &lt;-<span class="st"> </span>b</span>
<span id="cb7-21"><a href="#cb7-21"></a>  }<span class="cf">else</span>{</span>
<span id="cb7-22"><a href="#cb7-22"></a>    exchange &lt;-<span class="st"> </span><span class="ot">FALSE</span></span>
<span id="cb7-23"><a href="#cb7-23"></a>    b0 &lt;-<span class="st"> </span>b; c0 &lt;-<span class="st"> </span>c</span>
<span id="cb7-24"><a href="#cb7-24"></a>  }</span>
<span id="cb7-25"><a href="#cb7-25"></a>  Nu2 &lt;-<span class="st"> </span>a0<span class="op">^</span><span class="dv">2</span></span>
<span id="cb7-26"><a href="#cb7-26"></a>  h2ab &lt;-<span class="st"> </span>b0<span class="op">^</span><span class="dv">2</span> <span class="op">+</span><span class="st"> </span>Nu2; h2ac &lt;-<span class="st"> </span>c0<span class="op">^</span><span class="dv">2</span> <span class="op">+</span><span class="st"> </span>Nu2</span>
<span id="cb7-27"><a href="#cb7-27"></a>  c2 &lt;-<span class="st"> </span><span class="dv">1</span>; a2 &lt;-<span class="st"> </span>c2 <span class="op">+</span><span class="st"> </span>h2ac; b2 &lt;-<span class="st"> </span>a2 <span class="op">-</span><span class="st"> </span>h2ab</span>
<span id="cb7-28"><a href="#cb7-28"></a>  h2bc &lt;-<span class="st"> </span>b2 <span class="op">-</span><span class="st"> </span>c2</span>
<span id="cb7-29"><a href="#cb7-29"></a>  <span class="co">#</span></span>
<span id="cb7-30"><a href="#cb7-30"></a>  vertices &lt;-<span class="st"> </span>Normals &lt;-<span class="st"> </span><span class="kw">matrix</span>(<span class="ot">NA_real_</span>, <span class="dt">nrow =</span> 3L, <span class="dt">ncol =</span> nu<span class="op">*</span>nv)</span>
<span id="cb7-31"><a href="#cb7-31"></a>  indices &lt;-<span class="st"> </span><span class="kw">matrix</span>(<span class="ot">NA_integer_</span>, <span class="dt">nrow =</span> 4L, <span class="dt">ncol =</span> (nu<span class="dv">-1</span>)<span class="op">*</span>(nv<span class="dv">-1</span>))</span>
<span id="cb7-32"><a href="#cb7-32"></a>  v_ &lt;-<span class="st"> </span><span class="kw">seq</span>(vmin, c2, <span class="dt">length.out =</span> nv)</span>
<span id="cb7-33"><a href="#cb7-33"></a>  <span class="co">#</span></span>
<span id="cb7-34"><a href="#cb7-34"></a>  <span class="cf">if</span>(b0 <span class="op">!=</span><span class="st"> </span>c0){</span>
<span id="cb7-35"><a href="#cb7-35"></a>    u_ &lt;-<span class="st"> </span><span class="kw">seq</span>(c2, b2, <span class="dt">length.out =</span> nu)</span>
<span id="cb7-36"><a href="#cb7-36"></a>    x &lt;-<span class="st"> </span>a0 <span class="op">/</span><span class="st"> </span><span class="kw">sqrt</span>(h2ac<span class="op">*</span>h2ab) <span class="op">*</span><span class="st"> </span><span class="kw">sqrt</span>(a2<span class="op">-</span>u_)</span>
<span id="cb7-37"><a href="#cb7-37"></a>    y &lt;-<span class="st"> </span>b0 <span class="op">/</span><span class="st"> </span><span class="kw">sqrt</span>(h2bc<span class="op">*</span>h2ab) <span class="op">*</span><span class="st"> </span><span class="kw">sqrt</span>(b2<span class="op">-</span>u_)</span>
<span id="cb7-38"><a href="#cb7-38"></a>    z &lt;-<span class="st"> </span>c0 <span class="op">/</span><span class="st"> </span><span class="kw">sqrt</span>(h2bc<span class="op">*</span>h2ac) <span class="op">*</span><span class="st"> </span><span class="kw">sqrt</span>(u_<span class="op">-</span>c2)</span>
<span id="cb7-39"><a href="#cb7-39"></a>  }<span class="cf">else</span>{</span>
<span id="cb7-40"><a href="#cb7-40"></a>    u_ &lt;-<span class="st"> </span><span class="kw">seq</span>(<span class="dv">0</span>, <span class="dv">2</span><span class="op">*</span>pi, <span class="dt">length.out =</span> nu<span class="op">+</span><span class="dv">1</span>)[<span class="op">-</span>1L]</span>
<span id="cb7-41"><a href="#cb7-41"></a>    x &lt;-<span class="st"> </span><span class="kw">rep</span>(a0<span class="op">/</span><span class="kw">sqrt</span>(h2ac), nu)</span>
<span id="cb7-42"><a href="#cb7-42"></a>    myz &lt;-<span class="st"> </span>b0 <span class="op">/</span><span class="st"> </span><span class="kw">sqrt</span>(h2ab)</span>
<span id="cb7-43"><a href="#cb7-43"></a>    y &lt;-<span class="st"> </span>myz <span class="op">*</span><span class="st"> </span><span class="kw">cos</span>(u_)</span>
<span id="cb7-44"><a href="#cb7-44"></a>    z &lt;-<span class="st"> </span>myz <span class="op">*</span><span class="st"> </span><span class="kw">sin</span>(u_)</span>
<span id="cb7-45"><a href="#cb7-45"></a>  }</span>
<span id="cb7-46"><a href="#cb7-46"></a>  <span class="cf">for</span>(i <span class="cf">in</span> <span class="dv">1</span><span class="op">:</span>nu){</span>
<span id="cb7-47"><a href="#cb7-47"></a>    <span class="cf">for</span>(j <span class="cf">in</span> <span class="dv">1</span><span class="op">:</span>nv){</span>
<span id="cb7-48"><a href="#cb7-48"></a>      P &lt;-<span class="st"> </span>vertices[, (i<span class="dv">-1</span>)<span class="op">*</span>nv<span class="op">+</span>j] &lt;-<span class="st"> </span><span class="kw">c</span>(</span>
<span id="cb7-49"><a href="#cb7-49"></a>        x[i] <span class="op">*</span><span class="st"> </span><span class="kw">sqrt</span>(a2<span class="op">-</span>v_[j]),</span>
<span id="cb7-50"><a href="#cb7-50"></a>        y[i] <span class="op">*</span><span class="st"> </span><span class="kw">sqrt</span>(b2<span class="op">-</span>v_[j]),</span>
<span id="cb7-51"><a href="#cb7-51"></a>        z[i] <span class="op">*</span><span class="st"> </span><span class="kw">sqrt</span>(c2<span class="op">-</span>v_[j])</span>
<span id="cb7-52"><a href="#cb7-52"></a>      )</span>
<span id="cb7-53"><a href="#cb7-53"></a>      Normals[, (i<span class="dv">-1</span>)<span class="op">*</span>nv<span class="op">+</span>j] &lt;-<span class="st"> </span><span class="kw">c</span>(P[1L]<span class="op">/</span>a0<span class="op">^</span><span class="dv">2</span>, <span class="op">-</span>P[2L]<span class="op">/</span>b0<span class="op">^</span><span class="dv">2</span>, <span class="op">-</span>P[3L]<span class="op">/</span>c0<span class="op">^</span><span class="dv">2</span>)</span>
<span id="cb7-54"><a href="#cb7-54"></a>    }</span>
<span id="cb7-55"><a href="#cb7-55"></a>  }</span>
<span id="cb7-56"><a href="#cb7-56"></a>  <span class="co"># quads</span></span>
<span id="cb7-57"><a href="#cb7-57"></a>  <span class="cf">for</span>(i <span class="cf">in</span> 1L<span class="op">:</span>(nu<span class="dv">-1</span>)){</span>
<span id="cb7-58"><a href="#cb7-58"></a>    im1 &lt;-<span class="st"> </span>i<span class="op">-</span>1L</span>
<span id="cb7-59"><a href="#cb7-59"></a>    <span class="cf">for</span>(j <span class="cf">in</span> 1L<span class="op">:</span>(nv<span class="dv">-1</span>)){</span>
<span id="cb7-60"><a href="#cb7-60"></a>      jp1 &lt;-<span class="st"> </span>j<span class="op">+</span>1L</span>
<span id="cb7-61"><a href="#cb7-61"></a>      quad &lt;-<span class="st"> </span><span class="kw">c</span>(im1<span class="op">*</span>nv<span class="op">+</span>j, im1<span class="op">*</span>nv<span class="op">+</span>jp1, i<span class="op">*</span>nv<span class="op">+</span>jp1, i<span class="op">*</span>nv<span class="op">+</span>j)</span>
<span id="cb7-62"><a href="#cb7-62"></a>      indices[, im1<span class="op">*</span>(nv<span class="dv">-1</span>)<span class="op">+</span>j] &lt;-<span class="st"> </span><span class="cf">if</span>(exchange) <span class="kw">rev</span>(quad) <span class="cf">else</span> quad</span>
<span id="cb7-63"><a href="#cb7-63"></a>    }</span>
<span id="cb7-64"><a href="#cb7-64"></a>  }</span>
<span id="cb7-65"><a href="#cb7-65"></a>  vertices &lt;-<span class="st"> </span><span class="kw">cbind</span>(vertices, <span class="kw">c</span>(<span class="op">-</span><span class="dv">1</span>,<span class="dv">1</span>,<span class="dv">1</span>) <span class="op">*</span><span class="st"> </span>vertices)</span>
<span id="cb7-66"><a href="#cb7-66"></a>  indices &lt;-<span class="st"> </span><span class="kw">cbind</span>(indices, indices[4L<span class="op">:</span>1L,] <span class="op">+</span><span class="st"> </span>nu<span class="op">*</span>nv)</span>
<span id="cb7-67"><a href="#cb7-67"></a>  Normals &lt;-<span class="st"> </span><span class="kw">cbind</span>(Normals, <span class="kw">c</span>(<span class="op">-</span><span class="dv">1</span>,<span class="dv">1</span>,<span class="dv">1</span>) <span class="op">*</span><span class="st"> </span>Normals)</span>
<span id="cb7-68"><a href="#cb7-68"></a>  vertices &lt;-<span class="st"> </span><span class="kw">cbind</span>(vertices, <span class="kw">c</span>(<span class="dv">1</span>,<span class="op">-</span><span class="dv">1</span>,<span class="dv">1</span>) <span class="op">*</span><span class="st"> </span>vertices)</span>
<span id="cb7-69"><a href="#cb7-69"></a>  indices &lt;-<span class="st"> </span><span class="kw">cbind</span>(indices, indices[4L<span class="op">:</span>1L,] <span class="op">+</span><span class="st"> </span><span class="dv">2</span><span class="op">*</span>nu<span class="op">*</span>nv)</span>
<span id="cb7-70"><a href="#cb7-70"></a>  Normals &lt;-<span class="st"> </span><span class="kw">cbind</span>(Normals, <span class="kw">c</span>(<span class="dv">1</span>,<span class="op">-</span><span class="dv">1</span>,<span class="dv">1</span>) <span class="op">*</span><span class="st"> </span>Normals)</span>
<span id="cb7-71"><a href="#cb7-71"></a>  vertices &lt;-<span class="st"> </span><span class="kw">cbind</span>(vertices, <span class="kw">c</span>(<span class="dv">1</span>,<span class="dv">1</span>,<span class="op">-</span><span class="dv">1</span>) <span class="op">*</span><span class="st"> </span>vertices)</span>
<span id="cb7-72"><a href="#cb7-72"></a>  indices &lt;-<span class="st"> </span><span class="kw">cbind</span>(indices, indices[4L<span class="op">:</span>1L,] <span class="op">+</span><span class="st"> </span><span class="dv">4</span><span class="op">*</span>nu<span class="op">*</span>nv)</span>
<span id="cb7-73"><a href="#cb7-73"></a>  Normals &lt;-<span class="st"> </span><span class="kw">cbind</span>(Normals, <span class="kw">c</span>(<span class="dv">1</span>,<span class="dv">1</span>,<span class="op">-</span><span class="dv">1</span>) <span class="op">*</span><span class="st"> </span>Normals)</span>
<span id="cb7-74"><a href="#cb7-74"></a>  mesh &lt;-<span class="st"> </span><span class="kw">qmesh3d</span>(</span>
<span id="cb7-75"><a href="#cb7-75"></a>    <span class="dt">vertices =</span> <span class="cf">if</span>(exchange) vertices[<span class="kw">c</span>(1L,3L,2L),] <span class="cf">else</span> vertices,</span>
<span id="cb7-76"><a href="#cb7-76"></a>    <span class="dt">indices =</span> indices,</span>
<span id="cb7-77"><a href="#cb7-77"></a>    <span class="dt">homogeneous =</span> <span class="ot">FALSE</span>,</span>
<span id="cb7-78"><a href="#cb7-78"></a>    <span class="dt">normals =</span> <span class="op">-</span><span class="kw">t</span>(<span class="cf">if</span>(exchange) Normals[<span class="kw">c</span>(1L,3L,2L),] <span class="cf">else</span> Normals)</span>
<span id="cb7-79"><a href="#cb7-79"></a>  )</span>
<span id="cb7-80"><a href="#cb7-80"></a>  mesh</span>
<span id="cb7-81"><a href="#cb7-81"></a>}</span></code></pre></div>
<p>The <code>curvatureLinesH2</code> function below generates some curvature lines of the two-sheeted hyperboloid. The role of the arguments <code>du</code> and <code>dv</code> is similar to the role of the arguments <code>du</code> and <code>dv</code> in <code>curvatureLinesE</code>.</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode numberSource r numberLines"><code class="sourceCode r"><span id="cb8-1"><a href="#cb8-1"></a>curvatureLinesH2 &lt;-<span class="st"> </span><span class="cf">function</span>(a, b, c, signature, nu, nv, vmin, du, dv, </span>
<span id="cb8-2"><a href="#cb8-2"></a>                             <span class="dt">npoints =</span> <span class="dv">100</span>){</span>
<span id="cb8-3"><a href="#cb8-3"></a>  <span class="kw">stopifnot</span>(signature <span class="op">%in%</span><span class="st"> </span><span class="kw">c</span>(<span class="st">&quot;+--&quot;</span>, <span class="st">&quot;--+&quot;</span>, <span class="st">&quot;-+-&quot;</span>))</span>
<span id="cb8-4"><a href="#cb8-4"></a>  <span class="kw">stopifnot</span>(du <span class="op">&gt;</span><span class="st"> </span><span class="dv">0</span>, dv <span class="op">&gt;</span><span class="st"> </span><span class="dv">0</span>, vmin <span class="op">&lt;</span><span class="st"> </span><span class="dv">1</span>)</span>
<span id="cb8-5"><a href="#cb8-5"></a>  <span class="cf">if</span>(signature <span class="op">==</span><span class="st"> &quot;--+&quot;</span>){</span>
<span id="cb8-6"><a href="#cb8-6"></a>    clines &lt;-<span class="st"> </span></span>
<span id="cb8-7"><a href="#cb8-7"></a><span class="st">      </span><span class="kw">curvatureLinesH2</span>(c, b, a, <span class="st">&quot;+--&quot;</span>, nu, nv, vmin, du, dv, npoints)</span>
<span id="cb8-8"><a href="#cb8-8"></a>    <span class="kw">return</span>(<span class="kw">lapply</span>(clines, <span class="cf">function</span>(l) l[, <span class="kw">c</span>(3L,2L,1L)]))</span>
<span id="cb8-9"><a href="#cb8-9"></a>  }<span class="cf">else</span> <span class="cf">if</span>(signature <span class="op">==</span><span class="st"> &quot;-+-&quot;</span>){</span>
<span id="cb8-10"><a href="#cb8-10"></a>    clines &lt;-<span class="st"> </span></span>
<span id="cb8-11"><a href="#cb8-11"></a><span class="st">      </span><span class="kw">curvatureLinesH2</span>(b, a, c, <span class="st">&quot;+--&quot;</span>, nu, nv, vmin, du, dv, npoints)</span>
<span id="cb8-12"><a href="#cb8-12"></a>    <span class="kw">return</span>(<span class="kw">lapply</span>(clines, <span class="cf">function</span>(l) l[, <span class="kw">c</span>(2L,1L,3L)]))</span>
<span id="cb8-13"><a href="#cb8-13"></a>  }</span>
<span id="cb8-14"><a href="#cb8-14"></a>  a0 &lt;-<span class="st"> </span>a</span>
<span id="cb8-15"><a href="#cb8-15"></a>  <span class="cf">if</span>(b <span class="op">&gt;</span><span class="st"> </span>c){</span>
<span id="cb8-16"><a href="#cb8-16"></a>    exchange &lt;-<span class="st"> </span><span class="ot">TRUE</span></span>
<span id="cb8-17"><a href="#cb8-17"></a>    b0 &lt;-<span class="st"> </span>c; c0 &lt;-<span class="st"> </span>b</span>
<span id="cb8-18"><a href="#cb8-18"></a>  }<span class="cf">else</span>{</span>
<span id="cb8-19"><a href="#cb8-19"></a>    exchange &lt;-<span class="st"> </span><span class="ot">FALSE</span></span>
<span id="cb8-20"><a href="#cb8-20"></a>    b0 &lt;-<span class="st"> </span>b; c0 &lt;-<span class="st"> </span>c</span>
<span id="cb8-21"><a href="#cb8-21"></a>  }</span>
<span id="cb8-22"><a href="#cb8-22"></a>  Nu2 &lt;-<span class="st"> </span>a0<span class="op">^</span><span class="dv">2</span></span>
<span id="cb8-23"><a href="#cb8-23"></a>  h2ab &lt;-<span class="st"> </span>b0<span class="op">^</span><span class="dv">2</span> <span class="op">+</span><span class="st"> </span>Nu2; h2ac &lt;-<span class="st"> </span>c0<span class="op">^</span><span class="dv">2</span> <span class="op">+</span><span class="st"> </span>Nu2</span>
<span id="cb8-24"><a href="#cb8-24"></a>  c2 &lt;-<span class="st"> </span><span class="dv">1</span>; a2 &lt;-<span class="st"> </span>c2 <span class="op">+</span><span class="st"> </span>h2ac; b2 &lt;-<span class="st"> </span>a2 <span class="op">-</span><span class="st"> </span>h2ab</span>
<span id="cb8-25"><a href="#cb8-25"></a>  h2bc &lt;-<span class="st"> </span>b2 <span class="op">-</span><span class="st"> </span>c2</span>
<span id="cb8-26"><a href="#cb8-26"></a>  <span class="co">#</span></span>
<span id="cb8-27"><a href="#cb8-27"></a>  <span class="cf">if</span>(b0 <span class="op">!=</span><span class="st"> </span>c0 <span class="op">&amp;&amp;</span><span class="st"> </span>c2<span class="op">+</span>du <span class="op">&gt;=</span><span class="st"> </span>b2){</span>
<span id="cb8-28"><a href="#cb8-28"></a>    <span class="kw">stop</span>(<span class="st">&quot;`du` is too large.&quot;</span>)</span>
<span id="cb8-29"><a href="#cb8-29"></a>  }</span>
<span id="cb8-30"><a href="#cb8-30"></a>  <span class="cf">if</span>(vmin <span class="op">&gt;=</span><span class="st"> </span>c2<span class="op">-</span>dv){</span>
<span id="cb8-31"><a href="#cb8-31"></a>    <span class="kw">stop</span>(<span class="st">&quot;`dv` is too large&quot;</span>)</span>
<span id="cb8-32"><a href="#cb8-32"></a>  }</span>
<span id="cb8-33"><a href="#cb8-33"></a>  v_ &lt;-<span class="st"> </span><span class="kw">seq</span>(vmin, c2<span class="op">-</span>dv, <span class="dt">length.out =</span> nv)</span>
<span id="cb8-34"><a href="#cb8-34"></a>  t_ &lt;-<span class="st"> </span><span class="kw">seq</span>(vmin, c2, <span class="dt">length.out =</span> npoints)</span>
<span id="cb8-35"><a href="#cb8-35"></a>  out &lt;-<span class="st"> </span><span class="kw">vector</span>(<span class="st">&quot;list&quot;</span>, <span class="dv">2</span><span class="op">*</span>nv <span class="op">+</span><span class="st"> </span><span class="dv">4</span><span class="op">*</span>nu <span class="op">-</span><span class="st"> </span><span class="dv">2</span>)</span>
<span id="cb8-36"><a href="#cb8-36"></a>  <span class="co">#</span></span>
<span id="cb8-37"><a href="#cb8-37"></a>  <span class="cf">if</span>(b0 <span class="op">!=</span><span class="st"> </span>c0){</span>
<span id="cb8-38"><a href="#cb8-38"></a>    u_ &lt;-<span class="st"> </span><span class="kw">seq</span>(c2<span class="op">+</span>du, b2, <span class="dt">length.out =</span> nu)</span>
<span id="cb8-39"><a href="#cb8-39"></a>    s_ &lt;-<span class="st"> </span><span class="kw">seq</span>(c2, b2, <span class="dt">length.out =</span> npoints)</span>
<span id="cb8-40"><a href="#cb8-40"></a>    mx &lt;-<span class="st"> </span>a0 <span class="op">/</span><span class="st"> </span><span class="kw">sqrt</span>(h2ac<span class="op">*</span>h2ab)</span>
<span id="cb8-41"><a href="#cb8-41"></a>    my &lt;-<span class="st"> </span>b0 <span class="op">/</span><span class="st"> </span><span class="kw">sqrt</span>(h2bc<span class="op">*</span>h2ab)</span>
<span id="cb8-42"><a href="#cb8-42"></a>    mz &lt;-<span class="st"> </span>c0 <span class="op">/</span><span class="st"> </span><span class="kw">sqrt</span>(h2bc<span class="op">*</span>h2ac)</span>
<span id="cb8-43"><a href="#cb8-43"></a>    <span class="cf">for</span>(j <span class="cf">in</span> 1L<span class="op">:</span>nv){</span>
<span id="cb8-44"><a href="#cb8-44"></a>      x &lt;-<span class="st"> </span>mx <span class="op">*</span><span class="st"> </span><span class="kw">sqrt</span>((a2<span class="op">-</span>s_)<span class="op">*</span>(a2<span class="op">-</span>v_[j]))</span>
<span id="cb8-45"><a href="#cb8-45"></a>      y &lt;-<span class="st"> </span>my <span class="op">*</span><span class="st"> </span><span class="kw">sqrt</span>((b2<span class="op">-</span>s_)<span class="op">*</span>(b2<span class="op">-</span>v_[j]))</span>
<span id="cb8-46"><a href="#cb8-46"></a>      z &lt;-<span class="st"> </span>mz <span class="op">*</span><span class="st"> </span><span class="kw">sqrt</span>((s_<span class="op">-</span>c2)<span class="op">*</span>(c2<span class="op">-</span>v_[j]))</span>
<span id="cb8-47"><a href="#cb8-47"></a>      M1 &lt;-<span class="st"> </span><span class="kw">rbind</span>(<span class="kw">cbind</span>(x, y, z), <span class="kw">cbind</span>(x, <span class="op">-</span>y, z)[(npoints<span class="dv">-1</span>)<span class="op">:</span>1L,])</span>
<span id="cb8-48"><a href="#cb8-48"></a>      M2 &lt;-<span class="st"> </span><span class="kw">cbind</span>(M1[,<span class="kw">c</span>(1L,2L)], <span class="op">-</span>M1[,3L])</span>
<span id="cb8-49"><a href="#cb8-49"></a>      M &lt;-<span class="st"> </span><span class="kw">rbind</span>(M1, M2[(<span class="dv">2</span><span class="op">*</span>npoints<span class="dv">-2</span>)<span class="op">:</span>1L,])</span>
<span id="cb8-50"><a href="#cb8-50"></a>      out[[j]] &lt;-<span class="st"> </span><span class="cf">if</span>(exchange) M[,<span class="kw">c</span>(1L,3L,2L)] <span class="cf">else</span> M</span>
<span id="cb8-51"><a href="#cb8-51"></a>      out[[nv<span class="op">+</span>j]] &lt;-<span class="st"> </span></span>
<span id="cb8-52"><a href="#cb8-52"></a><span class="st">        </span><span class="kw">cbind</span>(<span class="op">-</span>M[,1L], <span class="cf">if</span>(exchange) M[,<span class="kw">c</span>(3L,2L)] <span class="cf">else</span> M[,<span class="kw">c</span>(2L,3L)])</span>
<span id="cb8-53"><a href="#cb8-53"></a>    }</span>
<span id="cb8-54"><a href="#cb8-54"></a>    <span class="cf">for</span>(i <span class="cf">in</span> 1L<span class="op">:</span>nu){</span>
<span id="cb8-55"><a href="#cb8-55"></a>      x &lt;-<span class="st"> </span>mx <span class="op">*</span><span class="st"> </span><span class="kw">sqrt</span>((a2<span class="op">-</span>u_[i])<span class="op">*</span>(a2<span class="op">-</span>t_))</span>
<span id="cb8-56"><a href="#cb8-56"></a>      y &lt;-<span class="st"> </span>my <span class="op">*</span><span class="st"> </span><span class="kw">sqrt</span>((b2<span class="op">-</span>u_[i])<span class="op">*</span>(b2<span class="op">-</span>t_))</span>
<span id="cb8-57"><a href="#cb8-57"></a>      z &lt;-<span class="st"> </span>mz <span class="op">*</span><span class="st"> </span><span class="kw">sqrt</span>((u_[i]<span class="op">-</span>c2)<span class="op">*</span>(c2<span class="op">-</span>t_))</span>
<span id="cb8-58"><a href="#cb8-58"></a>      M &lt;-<span class="st"> </span><span class="kw">rbind</span>(<span class="kw">cbind</span>(x, y, z), <span class="kw">cbind</span>(x, y, <span class="op">-</span>z)[(npoints<span class="dv">-1</span>)<span class="op">:</span>1L,])</span>
<span id="cb8-59"><a href="#cb8-59"></a>      out[[<span class="dv">2</span><span class="op">*</span>nv<span class="op">+</span>i]] &lt;-<span class="st"> </span><span class="cf">if</span>(exchange) M[,<span class="kw">c</span>(1L,3L,2L)] <span class="cf">else</span> M</span>
<span id="cb8-60"><a href="#cb8-60"></a>      <span class="cf">if</span>(i <span class="op">&lt;</span><span class="st"> </span>nu){</span>
<span id="cb8-61"><a href="#cb8-61"></a>        out[[<span class="dv">2</span><span class="op">*</span>nv<span class="op">+</span>nu<span class="op">+</span>i]] &lt;-<span class="st"> </span><span class="cf">if</span>(exchange) </span>
<span id="cb8-62"><a href="#cb8-62"></a>          <span class="kw">cbind</span>(M[,<span class="kw">c</span>(1L,3L)], <span class="op">-</span>M[,2L]) </span>
<span id="cb8-63"><a href="#cb8-63"></a>        <span class="cf">else</span> </span>
<span id="cb8-64"><a href="#cb8-64"></a>          <span class="kw">cbind</span>(M[,1L], <span class="op">-</span>M[,2L], M[,3L])</span>
<span id="cb8-65"><a href="#cb8-65"></a>      }</span>
<span id="cb8-66"><a href="#cb8-66"></a>    }</span>
<span id="cb8-67"><a href="#cb8-67"></a>  }<span class="cf">else</span>{ <span class="co"># b0 = c0</span></span>
<span id="cb8-68"><a href="#cb8-68"></a>    u_ &lt;-<span class="st"> </span><span class="kw">seq</span>(<span class="dv">0</span>, <span class="dv">2</span><span class="op">*</span>pi, <span class="dt">length.out =</span> nu<span class="op">+</span><span class="dv">1</span>)[<span class="op">-</span>1L] </span>
<span id="cb8-69"><a href="#cb8-69"></a>    s_ &lt;-<span class="st"> </span><span class="kw">seq</span>(<span class="dv">0</span>, <span class="dv">2</span><span class="op">*</span>pi, <span class="dt">length.out =</span> npoints)</span>
<span id="cb8-70"><a href="#cb8-70"></a>    mx &lt;-<span class="st"> </span>a0 <span class="op">/</span><span class="st"> </span><span class="kw">sqrt</span>(h2ac)</span>
<span id="cb8-71"><a href="#cb8-71"></a>    myz &lt;-<span class="st"> </span>b0 <span class="op">/</span><span class="st"> </span><span class="kw">sqrt</span>(h2ab)</span>
<span id="cb8-72"><a href="#cb8-72"></a>    <span class="cf">for</span>(j <span class="cf">in</span> <span class="dv">1</span><span class="op">:</span>nv){</span>
<span id="cb8-73"><a href="#cb8-73"></a>      x &lt;-<span class="st"> </span>mx <span class="op">*</span><span class="st"> </span><span class="kw">sqrt</span>(a2<span class="op">-</span>v_[j])</span>
<span id="cb8-74"><a href="#cb8-74"></a>      y &lt;-<span class="st"> </span>myz <span class="op">*</span><span class="st"> </span><span class="kw">sqrt</span>(b2<span class="op">-</span>v_[j]) <span class="op">*</span><span class="st"> </span><span class="kw">cos</span>(s_)</span>
<span id="cb8-75"><a href="#cb8-75"></a>      z &lt;-<span class="st"> </span>myz <span class="op">*</span><span class="st"> </span><span class="kw">sqrt</span>(c2<span class="op">-</span>v_[j]) <span class="op">*</span><span class="st"> </span><span class="kw">sin</span>(s_)</span>
<span id="cb8-76"><a href="#cb8-76"></a>      M &lt;-<span class="st"> </span><span class="kw">cbind</span>(x, y, z)</span>
<span id="cb8-77"><a href="#cb8-77"></a>      out[[j]] &lt;-<span class="st"> </span><span class="cf">if</span>(exchange) M[,<span class="kw">c</span>(1L,3L,2L)] <span class="cf">else</span> M</span>
<span id="cb8-78"><a href="#cb8-78"></a>      out[[nv<span class="op">+</span>j]] &lt;-<span class="st"> </span></span>
<span id="cb8-79"><a href="#cb8-79"></a><span class="st">        </span><span class="kw">cbind</span>(<span class="op">-</span>M[,1L], <span class="cf">if</span>(exchange) M[,<span class="kw">c</span>(3L,2L)] <span class="cf">else</span> M[,<span class="kw">c</span>(2L,3L)])</span>
<span id="cb8-80"><a href="#cb8-80"></a>    }</span>
<span id="cb8-81"><a href="#cb8-81"></a>    <span class="cf">for</span>(i <span class="cf">in</span> <span class="dv">1</span><span class="op">:</span>nu){</span>
<span id="cb8-82"><a href="#cb8-82"></a>      x &lt;-<span class="st"> </span>mx <span class="op">*</span><span class="st"> </span><span class="kw">sqrt</span>(a2<span class="op">-</span>t_)</span>
<span id="cb8-83"><a href="#cb8-83"></a>      y &lt;-<span class="st"> </span>myz <span class="op">*</span><span class="st"> </span><span class="kw">sqrt</span>(b2<span class="op">-</span>t_) <span class="op">*</span><span class="st"> </span><span class="kw">cos</span>(u_[i])</span>
<span id="cb8-84"><a href="#cb8-84"></a>      z &lt;-<span class="st"> </span>myz <span class="op">*</span><span class="st"> </span><span class="kw">sqrt</span>(c2<span class="op">-</span>t_) <span class="op">*</span><span class="st"> </span><span class="kw">sin</span>(u_[i])</span>
<span id="cb8-85"><a href="#cb8-85"></a>      M &lt;-<span class="st"> </span><span class="kw">rbind</span>(<span class="kw">cbind</span>(x, y, z), <span class="kw">cbind</span>(x, <span class="op">-</span>y, <span class="op">-</span>z)[(npoints<span class="dv">-1</span>)<span class="op">:</span>1L,])</span>
<span id="cb8-86"><a href="#cb8-86"></a>      out[[<span class="dv">2</span><span class="op">*</span>nv<span class="op">+</span>i]] &lt;-<span class="st"> </span><span class="cf">if</span>(exchange) M[,<span class="kw">c</span>(1L,3L,2L)] <span class="cf">else</span> M</span>
<span id="cb8-87"><a href="#cb8-87"></a>      <span class="cf">if</span>(i <span class="op">&lt;</span><span class="st"> </span>nu){</span>
<span id="cb8-88"><a href="#cb8-88"></a>        out[[<span class="dv">2</span><span class="op">*</span>nv<span class="op">+</span>nu<span class="op">+</span>i]] &lt;-<span class="st"> </span><span class="cf">if</span>(exchange) </span>
<span id="cb8-89"><a href="#cb8-89"></a>          <span class="kw">cbind</span>(M[,<span class="kw">c</span>(1L,3L)], <span class="op">-</span>M[,2L]) </span>
<span id="cb8-90"><a href="#cb8-90"></a>        <span class="cf">else</span> </span>
<span id="cb8-91"><a href="#cb8-91"></a>          <span class="kw">cbind</span>(M[,1L], <span class="op">-</span>M[,2L], M[,3L])</span>
<span id="cb8-92"><a href="#cb8-92"></a>      }</span>
<span id="cb8-93"><a href="#cb8-93"></a>    }</span>
<span id="cb8-94"><a href="#cb8-94"></a>  }</span>
<span id="cb8-95"><a href="#cb8-95"></a>  <span class="co">#</span></span>
<span id="cb8-96"><a href="#cb8-96"></a>  out[(<span class="dv">2</span><span class="op">*</span>nv<span class="op">+</span><span class="dv">2</span><span class="op">*</span>nu)<span class="op">:</span>(<span class="dv">2</span><span class="op">*</span>nv<span class="op">+</span><span class="dv">4</span><span class="op">*</span>nu<span class="dv">-2</span>)] &lt;-<span class="st"> </span></span>
<span id="cb8-97"><a href="#cb8-97"></a><span class="st">    </span><span class="kw">lapply</span>(out[(<span class="dv">2</span><span class="op">*</span>nv<span class="op">+</span><span class="dv">1</span>)<span class="op">:</span>(<span class="dv">2</span><span class="op">*</span>nv<span class="op">+</span><span class="dv">2</span><span class="op">*</span>nu<span class="dv">-1</span>)], <span class="cf">function</span>(M){</span>
<span id="cb8-98"><a href="#cb8-98"></a>      <span class="kw">cbind</span>(<span class="op">-</span>M[,1L], M[,<span class="kw">c</span>(2L,3L)])</span>
<span id="cb8-99"><a href="#cb8-99"></a>    })</span>
<span id="cb8-100"><a href="#cb8-100"></a>  out</span>
<span id="cb8-101"><a href="#cb8-101"></a>}</span></code></pre></div>
<p>An example:</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode numberSource r numberLines"><code class="sourceCode r"><span id="cb9-1"><a href="#cb9-1"></a>a =<span class="st"> </span><span class="dv">6</span>; b =<span class="st"> </span><span class="dv">5</span>; c =<span class="st"> </span><span class="dv">3</span></span>
<span id="cb9-2"><a href="#cb9-2"></a>sgntr =<span class="st"> &quot;-+-&quot;</span></span>
<span id="cb9-3"><a href="#cb9-3"></a>mesh &lt;-<span class="st"> </span><span class="kw">twoSheetsHyperboloidMesh</span>(a, b, c, sgntr, <span class="dv">100</span>, <span class="dv">100</span>, <span class="dt">vmin =</span> <span class="dv">-500</span>)</span>
<span id="cb9-4"><a href="#cb9-4"></a>clines &lt;-<span class="st"> </span><span class="kw">curvatureLinesH2</span>(a, b, c, sgntr, <span class="dt">nu =</span> <span class="dv">5</span>, <span class="dt">nv =</span> <span class="dv">5</span>, <span class="dt">vmin =</span> <span class="dv">-500</span>, </span>
<span id="cb9-5"><a href="#cb9-5"></a>                           <span class="dt">du =</span> <span class="dv">1</span>, <span class="dt">dv =</span> <span class="dv">20</span>, <span class="dt">npoints =</span> <span class="dv">300</span>)</span>
<span id="cb9-6"><a href="#cb9-6"></a><span class="kw">shade3d</span>(mesh, <span class="dt">color =</span> <span class="st">&quot;navyblue&quot;</span>, <span class="dt">back =</span> <span class="st">&quot;culled&quot;</span>) </span>
<span id="cb9-7"><a href="#cb9-7"></a><span class="kw">shade3d</span>(mesh, <span class="dt">color =</span> <span class="st">&quot;goldenrod&quot;</span>, <span class="dt">front =</span> <span class="st">&quot;culled&quot;</span>)</span>
<span id="cb9-8"><a href="#cb9-8"></a><span class="kw">invisible</span>(<span class="kw">lapply</span>(clines, <span class="cf">function</span>(l){</span>
<span id="cb9-9"><a href="#cb9-9"></a>  <span class="kw">shade3d</span>(<span class="kw">cylinder3d</span>(l, <span class="dt">radius =</span> <span class="fl">0.2</span>, <span class="dt">sides =</span> <span class="dv">30</span>))</span>
<span id="cb9-10"><a href="#cb9-10"></a>}))</span></code></pre></div>
<p><img src="https://laustep.github.io/stlahblog/posts/figures/quadrics_H2.png" /></p>
<h1 id="general-quadric">General quadric</h1>
<p>A general quadric in <span class="math inline">\(\mathbb{R}^3\)</span> has equation <span class="math display">\[
(x \quad y \quad z)\, A 
\begin{pmatrix} x \\ y \\ z \end{pmatrix} 
+ J&#39; \begin{pmatrix} x \\ y \\ z \end{pmatrix}
+ K = 0,
\]</span> where <span class="math inline">\(A\)</span> is a symmetric <span class="math inline">\((3\times 3)\)</span>-matrix, <span class="math inline">\(J \in \mathbb{R}^3\)</span>, and <span class="math inline">\(K \in \mathbb{R}\)</span>. Let’s treat an example. We follow the strategy given at page 45 of Brannan &amp; al’s book <em>Geometry</em> (<a href="http://math.haifa.ac.il/ROVENSKI/B2.pdf">pdf</a>).</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode numberSource r numberLines"><code class="sourceCode r"><span id="cb10-1"><a href="#cb10-1"></a>A =<span class="st"> </span><span class="kw">matrix</span>(<span class="kw">c</span>(</span>
<span id="cb10-2"><a href="#cb10-2"></a>   <span class="dv">5</span>, <span class="dv">-1</span>, <span class="dv">-1</span>, </span>
<span id="cb10-3"><a href="#cb10-3"></a>  <span class="dv">-1</span>,  <span class="dv">3</span>,  <span class="dv">1</span>,</span>
<span id="cb10-4"><a href="#cb10-4"></a>  <span class="dv">-1</span>,  <span class="dv">1</span>, <span class="dv">-3</span></span>
<span id="cb10-5"><a href="#cb10-5"></a>  ), <span class="dt">nrow =</span> 3L, <span class="dt">ncol =</span> 3L)</span>
<span id="cb10-6"><a href="#cb10-6"></a>J =<span class="st"> </span><span class="kw">c</span>(<span class="dv">4</span>, <span class="dv">6</span>, <span class="dv">8</span>)</span>
<span id="cb10-7"><a href="#cb10-7"></a>K =<span class="st"> </span><span class="dv">-10</span></span>
<span id="cb10-8"><a href="#cb10-8"></a><span class="co"># computes spectral decomposition of A</span></span>
<span id="cb10-9"><a href="#cb10-9"></a>eig &lt;-<span class="st"> </span><span class="kw">eigen</span>(A)</span>
<span id="cb10-10"><a href="#cb10-10"></a>P &lt;-<span class="st"> </span>eig<span class="op">$</span>vectors</span>
<span id="cb10-11"><a href="#cb10-11"></a>( evalues &lt;-<span class="st"> </span>eig<span class="op">$</span>values )</span>
<span id="cb10-12"><a href="#cb10-12"></a><span class="co">## [1]  5.614627  2.632676 -3.247303</span></span></code></pre></div>
<p>There is no eigenvalue equal to <span class="math inline">\(0\)</span>; this is the first necessary condition in order for the solution of the equation to be a focal quadric.</p>
<p>Now we write the equation in the form <span class="math display">\[
\lambda_1 {(x&#39;&#39;)}^2 + \lambda_2 {(y&#39;&#39;)}^2 + \lambda_3 {(z&#39;&#39;)}^2 = 
\mathrm{rhs}
\]</span> where <span class="math inline">\(\lambda_1\)</span>, <span class="math inline">\(\lambda_2\)</span>, <span class="math inline">\(\lambda_3\)</span> are the eigenvalues of <span class="math inline">\(A\)</span>, and <span class="math inline">\((x&#39;&#39;,y&#39;&#39;,z&#39;&#39;)\)</span> is a new coordinate system.</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode numberSource r numberLines"><code class="sourceCode r"><span id="cb11-1"><a href="#cb11-1"></a>center &lt;-<span class="st"> </span><span class="kw">c</span>(<span class="kw">t</span>(J) <span class="op">%*%</span><span class="st"> </span>P) <span class="op">/</span><span class="st"> </span>evalues <span class="op">/</span><span class="st"> </span><span class="dv">2</span></span>
<span id="cb11-2"><a href="#cb11-2"></a>( rhs &lt;-<span class="st"> </span><span class="kw">sum</span>(evalues <span class="op">*</span><span class="st"> </span>center<span class="op">^</span><span class="dv">2</span>) <span class="op">-</span><span class="st"> </span>K )</span>
<span id="cb11-3"><a href="#cb11-3"></a><span class="co">## [1] 11.5</span></span></code></pre></div>
<div class="sourceCode" id="cb12"><pre class="sourceCode numberSource r numberLines"><code class="sourceCode r"><span id="cb12-1"><a href="#cb12-1"></a>( sgntr &lt;-<span class="st"> </span><span class="kw">paste0</span>(<span class="kw">ifelse</span>(rhs<span class="op">*</span>evalues <span class="op">&gt;</span><span class="st"> </span><span class="dv">0</span>, <span class="st">&quot;+&quot;</span>, <span class="st">&quot;-&quot;</span>), <span class="dt">collapse =</span> <span class="st">&quot;&quot;</span>) )</span>
<span id="cb12-2"><a href="#cb12-2"></a><span class="co">## [1] &quot;++-&quot;</span></span></code></pre></div>
<p>We find <span class="math inline">\(\mathrm{rhs} \neq 0\)</span>, so the solution of the equation is a focal quadric. If <span class="math inline">\(\mathrm{rhs} = 0\)</span>, the solution is a cone.</p>
<p>The signature is <span class="math inline">\(++-\)</span>, so the solution of the equation is a one-sheeted hyperboloid. By dividing both members of the previous equality by <span class="math inline">\(\mathrm{rhs}\)</span>, we get its equation in standard form.</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode numberSource r numberLines"><code class="sourceCode r"><span id="cb13-1"><a href="#cb13-1"></a>abc &lt;-<span class="st"> </span><span class="kw">sqrt</span>(<span class="kw">abs</span>(rhs<span class="op">/</span>evalues))</span>
<span id="cb13-2"><a href="#cb13-2"></a>a &lt;-<span class="st"> </span>abc[<span class="dv">1</span>]; b &lt;-<span class="st"> </span>abc[<span class="dv">2</span>]; c &lt;-<span class="st"> </span>abc[<span class="dv">3</span>]</span>
<span id="cb13-3"><a href="#cb13-3"></a>mesh0 &lt;-<span class="st"> </span><span class="kw">hyperboloidMesh</span>(a, b, c, sgntr, <span class="dv">100</span>, <span class="dv">100</span>, <span class="dv">-5</span>)</span>
<span id="cb13-4"><a href="#cb13-4"></a><span class="co"># final quadric mesh:</span></span>
<span id="cb13-5"><a href="#cb13-5"></a>mesh &lt;-<span class="st"> </span><span class="kw">rotate3d</span>(</span>
<span id="cb13-6"><a href="#cb13-6"></a>  <span class="kw">translate3d</span>(mesh0, <span class="op">-</span>center[<span class="dv">1</span>], <span class="op">-</span>center[<span class="dv">2</span>], <span class="op">-</span>center[<span class="dv">3</span>]), </span>
<span id="cb13-7"><a href="#cb13-7"></a>  <span class="dt">matrix =</span> <span class="kw">t</span>(P)</span>
<span id="cb13-8"><a href="#cb13-8"></a>)</span></code></pre></div>
<p>We can check that the equation is fulfilled for some vertices of the final mesh:</p>
<div class="sourceCode" id="cb14"><pre class="sourceCode numberSource r numberLines"><code class="sourceCode r"><span id="cb14-1"><a href="#cb14-1"></a><span class="kw">apply</span>(mesh<span class="op">$</span>vb[<span class="op">-</span><span class="dv">4</span>, <span class="dv">1</span><span class="op">:</span><span class="dv">5</span>], 2L, <span class="cf">function</span>(x){</span>
<span id="cb14-2"><a href="#cb14-2"></a>  <span class="kw">c</span>(<span class="kw">t</span>(x) <span class="op">%*%</span><span class="st"> </span>A <span class="op">%*%</span><span class="st"> </span>x <span class="op">+</span><span class="st"> </span><span class="kw">t</span>(J) <span class="op">%*%</span><span class="st"> </span>x) <span class="op">+</span><span class="st"> </span>K</span>
<span id="cb14-3"><a href="#cb14-3"></a>})</span>
<span id="cb14-4"><a href="#cb14-4"></a><span class="co">## [1] 5.684342e-14 7.105427e-14 4.973799e-14 4.973799e-14 4.263256e-14</span></span></code></pre></div>
<p>Up to small numerical errors, we indeed get <span class="math inline">\(0\)</span> for each of the five vertices.</p>

        </div>


        <div id="footer">
          Site proudly generated by
          <a href="http://jaspervdj.be/hakyll">Hakyll</a>
        </div>

      </div>

    </div>


  </div>

]]></description>
    <pubDate>Sun, 03 May 2020 00:00:00 UT</pubDate>
    <guid>https://laustep.github.io/stlahblog/posts/focalQuadrics.html</guid>
    <dc:creator>Stéphane Laurent</dc:creator>
    <category>R</category>
</item>


<item>
    <title>Drawing slices of a hypersurface with R</title>
    <link>https://laustep.github.io/stlahblog/posts/slicedHypersurface.html</link>
    <description><![CDATA[
    <div class="container-fluid">
    <div class="row">
      <div class="main col-sm-12">
        <div id="header">
          <div id="logo">
            <a href="https://laustep.github.io/stlahblog/">
              <img src="https://laustep.github.io/stlahblog/images/stla.jpg" alt="stla" width="100px" />
            </a>
          </div>
          <div id="navigation" style="margin-top:50px;">
            <a href="https://laustep.github.io/stlahblog/">Home</a>
            <a href="https://laustep.github.io/stlahblog/about.html">About</a>
            <a href="https://laustep.github.io/stlahblog/contact.html">Contact</a>
            <a href="https://laustep.github.io/stlahblog/archive.html">Archive</a>
          </div>
        </div>

        <div class="content">
          <h1>Drawing slices of a hypersurface with R</h1> 
          <div class="info">
    Posted on May  1, 2020
    
        by Stéphane Laurent
    
</div>
<div class="info">
    
    Tags: <a title="All pages tagged &#39;R&#39;." href="https://laustep.github.io/stlahblog/tags/R.html">R</a>, <a title="All pages tagged &#39;graphics&#39;." href="https://laustep.github.io/stlahblog/tags/graphics.html">graphics</a>, <a title="All pages tagged &#39;rgl&#39;." href="https://laustep.github.io/stlahblog/tags/rgl.html">rgl</a>, <a title="All pages tagged &#39;geometry&#39;." href="https://laustep.github.io/stlahblog/tags/geometry.html">geometry</a>, <a title="All pages tagged &#39;maths&#39;." href="https://laustep.github.io/stlahblog/tags/maths.html">maths</a>
    
</div>

<p>Let <span class="math inline">\(s \colon I \times J \times K \to \mathbb{R}^4\)</span> be a parameterization of a hypersurface <span class="math inline">\(\mathcal{S}\)</span>, where <span class="math inline">\(I,J,K \subset \mathbb{R}\)</span> are some intervals. I’m going to show how to draw the cross-section of <span class="math inline">\(\mathcal{S}\)</span> by a hyperplane with R.</p>
<p>For the illustration, we consider the <a href="http://hi.gher.space/wiki/Tiger"><em>tiger</em></a>:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode numberSource r numberLines"><code class="sourceCode r"><span id="cb1-1"><a href="#cb1-1"></a>R1 =<span class="st"> </span><span class="dv">2</span>; R2 =<span class="st"> </span><span class="dv">2</span>; r =<span class="st"> </span><span class="fl">0.5</span></span>
<span id="cb1-2"><a href="#cb1-2"></a>s &lt;-<span class="st"> </span><span class="cf">function</span>(u, v, w){</span>
<span id="cb1-3"><a href="#cb1-3"></a>  <span class="kw">rbind</span>(</span>
<span id="cb1-4"><a href="#cb1-4"></a>    <span class="kw">cos</span>(u) <span class="op">*</span><span class="st"> </span>(R1 <span class="op">+</span><span class="st"> </span>r<span class="op">*</span><span class="kw">cos</span>(w)),</span>
<span id="cb1-5"><a href="#cb1-5"></a>    <span class="kw">sin</span>(u) <span class="op">*</span><span class="st"> </span>(R1 <span class="op">+</span><span class="st"> </span>r<span class="op">*</span><span class="kw">cos</span>(w)),</span>
<span id="cb1-6"><a href="#cb1-6"></a>    <span class="kw">cos</span>(v) <span class="op">*</span><span class="st"> </span>(R2 <span class="op">+</span><span class="st"> </span>r<span class="op">*</span><span class="kw">sin</span>(w)),</span>
<span id="cb1-7"><a href="#cb1-7"></a>    <span class="kw">sin</span>(v) <span class="op">*</span><span class="st"> </span>(R2 <span class="op">+</span><span class="st"> </span>r<span class="op">*</span><span class="kw">sin</span>(w))</span>
<span id="cb1-8"><a href="#cb1-8"></a>  )</span>
<span id="cb1-9"><a href="#cb1-9"></a>}</span></code></pre></div>
<p>Take a hyperplane: <span class="math display">\[
\mathcal{P}\colon \quad \langle \mathbf{a}, \mathbf{x} \rangle = b,
\]</span> let <span class="math inline">\(\vec{\mathbf{n}} = \frac{\mathbf{a}}{\Vert\mathbf{a}\Vert}\)</span> be a unit normal vector of <span class="math inline">\(\mathcal{P}\)</span>, and <span class="math inline">\(\mathbf{x}_0\)</span> be an arbitrary point in <span class="math inline">\(\mathcal{P}\)</span>.</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode numberSource r numberLines"><code class="sourceCode r"><span id="cb2-1"><a href="#cb2-1"></a>a =<span class="st"> </span><span class="kw">c</span>(<span class="dv">1</span>, <span class="dv">1</span>, <span class="dv">1</span>, <span class="dv">1</span>); b =<span class="st"> </span><span class="dv">2</span>        <span class="co"># plane x+y+z+w = 2</span></span>
<span id="cb2-2"><a href="#cb2-2"></a>x0 =<span class="st"> </span><span class="kw">c</span>(b, b, b, b)<span class="op">/</span><span class="dv">4</span>            <span class="co"># a point in this plane</span></span>
<span id="cb2-3"><a href="#cb2-3"></a>nrml &lt;-<span class="st"> </span>a<span class="op">/</span><span class="kw">sqrt</span>(<span class="kw">c</span>(<span class="kw">crossprod</span>(a))) <span class="co"># unit normal</span></span></code></pre></div>
<p>Compute a mesh <span class="math inline">\(\mathcal{M}_0\)</span> of the isosurface <span class="math display">\[
\bigl(s(u,v,w) - \mathbf{x}_0\bigr) \cdot \vec{\mathbf{n}} = 0.
\]</span></p>
<div class="sourceCode" id="cb3"><pre class="sourceCode numberSource r numberLines"><code class="sourceCode r"><span id="cb3-1"><a href="#cb3-1"></a><span class="kw">library</span>(misc3d)</span>
<span id="cb3-2"><a href="#cb3-2"></a>f &lt;-<span class="st"> </span><span class="cf">function</span>(u, v, w){</span>
<span id="cb3-3"><a href="#cb3-3"></a>  <span class="kw">c</span>(<span class="kw">crossprod</span>(<span class="kw">s</span>(u, v, w), nrml))</span>
<span id="cb3-4"><a href="#cb3-4"></a>}</span>
<span id="cb3-5"><a href="#cb3-5"></a>u_ &lt;-<span class="st"> </span>v_ &lt;-<span class="st"> </span>w_ &lt;-<span class="st"> </span><span class="kw">seq</span>(<span class="dv">0</span>, <span class="dv">2</span><span class="op">*</span>pi, <span class="dt">length.out =</span> 100L)</span>
<span id="cb3-6"><a href="#cb3-6"></a>g &lt;-<span class="st"> </span><span class="kw">expand.grid</span>(<span class="dt">u =</span> u_, <span class="dt">v =</span> v_, <span class="dt">w =</span> w_)</span>
<span id="cb3-7"><a href="#cb3-7"></a>voxel &lt;-<span class="st"> </span><span class="kw">array</span>(<span class="kw">with</span>(g, <span class="kw">f</span>(u,v,w)), <span class="dt">dim =</span> <span class="kw">c</span>(100L,100L,100L))</span>
<span id="cb3-8"><a href="#cb3-8"></a>surf &lt;-<span class="st"> </span><span class="kw">computeContour3d</span>(voxel, <span class="dt">level =</span> <span class="kw">sum</span>(x0<span class="op">*</span>nrml), </span>
<span id="cb3-9"><a href="#cb3-9"></a>                         <span class="dt">x =</span> u_, <span class="dt">y =</span> v_, <span class="dt">z =</span> w_)</span>
<span id="cb3-10"><a href="#cb3-10"></a>trgls &lt;-<span class="st"> </span><span class="kw">makeTriangles</span>(surf)</span>
<span id="cb3-11"><a href="#cb3-11"></a>mesh0 &lt;-<span class="st"> </span>misc3d<span class="op">:::</span><span class="kw">t2ve</span>(trgls)</span></code></pre></div>
<p>Denote by <span class="math inline">\(\mathcal{V}\mathcal{S}_0 \subset I \times J \times K\)</span> the set of vertices of <span class="math inline">\(\mathcal{M}_0\)</span>, and set <span class="math inline">\(\mathcal{V}\mathcal{S} = s(\mathcal{V}\mathcal{S}_0) \subset \mathbb{R}^4\)</span>.</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode numberSource r numberLines"><code class="sourceCode r"><span id="cb4-1"><a href="#cb4-1"></a>VS0 &lt;-<span class="st"> </span>mesh0<span class="op">$</span>vb</span>
<span id="cb4-2"><a href="#cb4-2"></a>VS &lt;-<span class="st"> </span><span class="kw">s</span>(VS0[1L,], VS0[2L,], VS0[3L,]) </span></code></pre></div>
<p>Let <span class="math inline">\(R\)</span> be a rotation in <span class="math inline">\(\mathbb{R}^4\)</span> which sends <span class="math inline">\(\vec{\mathbf{n}} =: \vec{\mathbf{v}}_1\)</span> to the vector <span class="math inline">\((0,0,0,1) =: \vec{\mathbf{v}}_2\)</span>. One can take <span class="math inline">\(R\)</span> corresponding to the matrix <span class="math display">\[
\frac{2}{{(\vec{\mathbf{v}}_1+\vec{\mathbf{v}}_2)}&#39;
(\vec{\mathbf{v}}_1+\vec{\mathbf{v}}_2)}
(\vec{\mathbf{v}}_1+\vec{\mathbf{v}}_2)
{(\vec{\mathbf{v}}_1+\vec{\mathbf{v}}_2)}&#39; - I_4.
\]</span></p>
<div class="sourceCode" id="cb5"><pre class="sourceCode numberSource r numberLines"><code class="sourceCode r"><span id="cb5-1"><a href="#cb5-1"></a>rotationMatrix4D &lt;-<span class="st"> </span><span class="cf">function</span>(v1, v2){</span>
<span id="cb5-2"><a href="#cb5-2"></a>  v1 &lt;-<span class="st"> </span>v1 <span class="op">/</span><span class="st"> </span><span class="kw">sqrt</span>(<span class="kw">c</span>(<span class="kw">crossprod</span>(v1)))</span>
<span id="cb5-3"><a href="#cb5-3"></a>  v2 &lt;-<span class="st"> </span>v2 <span class="op">/</span><span class="st"> </span><span class="kw">sqrt</span>(<span class="kw">c</span>(<span class="kw">crossprod</span>(v2)))</span>
<span id="cb5-4"><a href="#cb5-4"></a>  <span class="dv">2</span><span class="op">*</span><span class="kw">tcrossprod</span>(v1<span class="op">+</span>v2)<span class="op">/</span><span class="kw">c</span>(<span class="kw">crossprod</span>(v1<span class="op">+</span>v2)) <span class="op">-</span><span class="st"> </span><span class="kw">diag</span>(4L)</span>
<span id="cb5-5"><a href="#cb5-5"></a>}</span>
<span id="cb5-6"><a href="#cb5-6"></a>Rot &lt;-<span class="st"> </span><span class="kw">rotationMatrix4D</span>(nrml, <span class="kw">c</span>(<span class="dv">0</span>,<span class="dv">0</span>,<span class="dv">0</span>,<span class="dv">1</span>))</span></code></pre></div>
<p>Now define <span class="math inline">\(\mathcal{V}\mathcal{S}&#39; = R(\mathcal{V}\mathcal{S}) \subset \mathbb{R}^4\)</span>. Then all points in <span class="math inline">\(\mathcal{V}\mathcal{S}&#39;\)</span> are equal on their fourth coordinate (up to numerical errors in R):</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode numberSource r numberLines"><code class="sourceCode r"><span id="cb6-1"><a href="#cb6-1"></a>VSprime &lt;-<span class="st"> </span>Rot <span class="op">%*%</span><span class="st"> </span>VS</span>
<span id="cb6-2"><a href="#cb6-2"></a><span class="kw">head</span>(<span class="kw">t</span>(VSprime))</span>
<span id="cb6-3"><a href="#cb6-3"></a><span class="co">##           [,1]      [,2]      [,3]      [,4]</span></span>
<span id="cb6-4"><a href="#cb6-4"></a><span class="co">## [1,]  2.203740 -1.329658 -1.620365 0.9999785</span></span>
<span id="cb6-5"><a href="#cb6-5"></a><span class="co">## [2,] -1.324840  2.206491 -1.657871 1.0002417</span></span>
<span id="cb6-6"><a href="#cb6-6"></a><span class="co">## [3,] -1.320131  2.212244 -1.636339 0.9999972</span></span>
<span id="cb6-7"><a href="#cb6-7"></a><span class="co">## [4,] -1.417790  2.116178 -1.698381 0.9999926</span></span>
<span id="cb6-8"><a href="#cb6-8"></a><span class="co">## [5,]  2.219859 -1.310784 -1.651340 0.9999841</span></span>
<span id="cb6-9"><a href="#cb6-9"></a><span class="co">## [6,]  2.253515 -1.275147 -1.633245 1.0005005</span></span></code></pre></div>
<p>Finally, define <span class="math inline">\(\mathcal{V}\mathcal{S}&#39;&#39; \subset \mathbb{R}^3\)</span> as the set obtained by removing the fourth coordinates of the elements of <span class="math inline">\(\mathcal{V}\mathcal{S}&#39;\)</span>, and define the mesh <span class="math inline">\(\mathcal{M}\)</span> whose set of vertices is <span class="math inline">\(\mathcal{V}\mathcal{S}&#39;&#39;\)</span> and with the same edges as <span class="math inline">\(\mathcal{M}_0\)</span>:</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode numberSource r numberLines"><code class="sourceCode r"><span id="cb7-1"><a href="#cb7-1"></a><span class="kw">library</span>(rgl)</span>
<span id="cb7-2"><a href="#cb7-2"></a>mesh &lt;-<span class="st"> </span><span class="kw">tmesh3d</span>(</span>
<span id="cb7-3"><a href="#cb7-3"></a>  <span class="dt">vertices =</span> VSprime[<span class="op">-</span>4L,],</span>
<span id="cb7-4"><a href="#cb7-4"></a>  <span class="dt">indices =</span> mesh0<span class="op">$</span>ib,</span>
<span id="cb7-5"><a href="#cb7-5"></a>  <span class="dt">homogeneous =</span> <span class="ot">FALSE</span>,</span>
<span id="cb7-6"><a href="#cb7-6"></a>  <span class="dt">normals =</span> ?</span>
<span id="cb7-7"><a href="#cb7-7"></a>)</span></code></pre></div>
<p>What about the normals? If you have an implicit equation defining <span class="math inline">\(\mathcal{S}\)</span>, that is, <span class="math inline">\(\mathcal{S} = \iota^{-1}(0)\)</span> with <span class="math inline">\(\iota\colon \mathbb{R}^4 \to \mathbb{R}\)</span>, then a normal to <span class="math inline">\(\mathcal{S}\)</span> at a point <span class="math inline">\(\mathbf{x} \in \mathbb{R}^4\)</span> is given by the gradient of <span class="math inline">\(\iota\)</span> at <span class="math inline">\(\mathbf{x}\)</span>. For the tiger, we know an implicit equation, and it is not difficult to get the gradient:</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode numberSource r numberLines"><code class="sourceCode r"><span id="cb8-1"><a href="#cb8-1"></a>sNormal &lt;-<span class="st"> </span><span class="cf">function</span>(XYZT){</span>
<span id="cb8-2"><a href="#cb8-2"></a>  x &lt;-<span class="st"> </span>XYZT[1L,]; y &lt;-<span class="st"> </span>XYZT[2L,]; z &lt;-<span class="st"> </span>XYZT[3L,]; t &lt;-<span class="st"> </span>XYZT[4L,]</span>
<span id="cb8-3"><a href="#cb8-3"></a>  <span class="kw">rbind</span>(</span>
<span id="cb8-4"><a href="#cb8-4"></a>    x <span class="op">*</span><span class="st"> </span>(<span class="dv">1</span> <span class="op">-</span><span class="st"> </span>R1<span class="op">/</span><span class="kw">sqrt</span>(x<span class="op">^</span><span class="dv">2</span><span class="op">+</span>y<span class="op">^</span><span class="dv">2</span>)),</span>
<span id="cb8-5"><a href="#cb8-5"></a>    y <span class="op">*</span><span class="st"> </span>(<span class="dv">1</span> <span class="op">-</span><span class="st"> </span>R1<span class="op">/</span><span class="kw">sqrt</span>(x<span class="op">^</span><span class="dv">2</span><span class="op">+</span>y<span class="op">^</span><span class="dv">2</span>)),</span>
<span id="cb8-6"><a href="#cb8-6"></a>    z <span class="op">*</span><span class="st"> </span>(<span class="dv">1</span> <span class="op">-</span><span class="st"> </span>R2<span class="op">/</span><span class="kw">sqrt</span>(z<span class="op">^</span><span class="dv">2</span><span class="op">+</span>t<span class="op">^</span><span class="dv">2</span>)),</span>
<span id="cb8-7"><a href="#cb8-7"></a>    t <span class="op">*</span><span class="st"> </span>(<span class="dv">1</span> <span class="op">-</span><span class="st"> </span>R2<span class="op">/</span><span class="kw">sqrt</span>(z<span class="op">^</span><span class="dv">2</span><span class="op">+</span>t<span class="op">^</span><span class="dv">2</span>))</span>
<span id="cb8-8"><a href="#cb8-8"></a>  )</span>
<span id="cb8-9"><a href="#cb8-9"></a>}</span>
<span id="cb8-10"><a href="#cb8-10"></a>Normals &lt;-<span class="st"> </span><span class="kw">sNormal</span>(VS)</span></code></pre></div>
<p>Once you get the normals:</p>
<ul>
<li><p>project them to the hyperplane <span class="math inline">\(\mathcal{P}\)</span>;</p></li>
<li><p>apply the rotation <span class="math inline">\(R\)</span> to the projected normals;</p></li>
<li><p>remove the fourth coordinates (all equal);</p></li>
<li><p>if necessary, negate the normals.</p></li>
</ul>
<p>The projection of <span class="math inline">\(\mathbf{x} \in \mathbb{R}^4\)</span> to the hyperplane <span class="math inline">\(\mathcal{P}\)</span> is given by <span class="math display">\[
\mathbf{x} - 
\frac{\langle \mathbf{a}, \mathbf{x} \rangle - b}{\Vert \mathbf{a} \Vert^2} 
\mathbf{a}.
\]</span></p>
<div class="sourceCode" id="cb9"><pre class="sourceCode numberSource r numberLines"><code class="sourceCode r"><span id="cb9-1"><a href="#cb9-1"></a><span class="co"># projection onto hyperplane &lt;a,x&gt; = b</span></span>
<span id="cb9-2"><a href="#cb9-2"></a>projection &lt;-<span class="st"> </span><span class="cf">function</span>(a, b, X){</span>
<span id="cb9-3"><a href="#cb9-3"></a>  X <span class="op">-</span><span class="st"> </span><span class="kw">tcrossprod</span>(a<span class="op">/</span><span class="kw">c</span>(<span class="kw">crossprod</span>(a)), <span class="kw">colSums</span>(a<span class="op">*</span>X)<span class="op">-</span>b)</span>
<span id="cb9-4"><a href="#cb9-4"></a>}</span>
<span id="cb9-5"><a href="#cb9-5"></a>mesh &lt;-<span class="st"> </span><span class="kw">tmesh3d</span>(</span>
<span id="cb9-6"><a href="#cb9-6"></a>  <span class="dt">vertices =</span> VSprime[<span class="op">-</span>4L,], </span>
<span id="cb9-7"><a href="#cb9-7"></a>  <span class="dt">indices =</span> mesh0<span class="op">$</span>ib, </span>
<span id="cb9-8"><a href="#cb9-8"></a>  <span class="dt">homogeneous =</span> <span class="ot">FALSE</span>,</span>
<span id="cb9-9"><a href="#cb9-9"></a>  <span class="dt">normals =</span> <span class="op">-</span><span class="kw">t</span>((Rot <span class="op">%*%</span><span class="st"> </span><span class="kw">projection</span>(a, b, Normals))[<span class="op">-</span>4L,])</span>
<span id="cb9-10"><a href="#cb9-10"></a>)</span></code></pre></div>
<p>This works:</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode r"><code class="sourceCode r"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true"></a><span class="kw">shade3d</span>(mesh, <span class="dt">color =</span> <span class="st">&quot;darkmagenta&quot;</span>)</span></code></pre></div>
<p><img src="https://laustep.github.io/stlahblog/posts/figures/tiger1.png" /></p>
<p>Here is another way to get the normals. The normal at the point <span class="math inline">\(s(u,v,w)\)</span> is <span class="math display">\[
\frac{\partial s}{\partial u}(u,v,w) \times
\frac{\partial s}{\partial v}(u,v,w) \times
\frac{\partial s}{\partial w}(u,v,w) 
\]</span> where <span class="math inline">\(\cdot \times \cdot \times \cdot\)</span> is the <em>ternary cross-product</em> in <span class="math inline">\(\mathbb{R}^4\)</span>, defined by <span class="math display">\[
\vec v_1 \times \vec v_2 \times \vec v_3 = 
\left\vert\begin{matrix}
\vec i &amp; \vec j &amp; \vec k &amp; \vec l \\ 
v_{1x} &amp; v_{1y} &amp; v_{1z} &amp; v_{1t} \\ 
v_{2x} &amp; v_{2y} &amp; v_{2z} &amp; v_{2t} \\ 
v_{3x} &amp; v_{3y} &amp; v_{3z} &amp; v_{3t} 
\end{matrix}\right\vert.
\]</span></p>
<div class="sourceCode" id="cb11"><pre class="sourceCode numberSource r numberLines"><code class="sourceCode r"><span id="cb11-1"><a href="#cb11-1"></a>crossProd4D &lt;-<span class="st"> </span><span class="cf">function</span>(v1, v2, v3){</span>
<span id="cb11-2"><a href="#cb11-2"></a>  M &lt;-<span class="st"> </span><span class="kw">rbind</span>(v1, v2, v3)</span>
<span id="cb11-3"><a href="#cb11-3"></a>  <span class="kw">c</span>(<span class="kw">det</span>(M[,<span class="op">-</span>1L]), <span class="op">-</span><span class="kw">det</span>(M[,<span class="op">-</span>2L]), <span class="kw">det</span>(M[,<span class="op">-</span>3L]), <span class="op">-</span><span class="kw">det</span>(M[,<span class="op">-</span>4L]))</span>
<span id="cb11-4"><a href="#cb11-4"></a>}</span>
<span id="cb11-5"><a href="#cb11-5"></a>sNormal &lt;-<span class="st"> </span><span class="cf">function</span>(uvw){</span>
<span id="cb11-6"><a href="#cb11-6"></a>  u &lt;-<span class="st"> </span>uvw[1L]; v &lt;-<span class="st"> </span>uvw[2L]; w &lt;-<span class="st"> </span>uvw[3L]</span>
<span id="cb11-7"><a href="#cb11-7"></a>  Du &lt;-<span class="st"> </span><span class="kw">c</span>((R1 <span class="op">+</span><span class="st"> </span>r<span class="op">*</span><span class="kw">cos</span>(w))<span class="op">*</span><span class="kw">c</span>(<span class="op">-</span><span class="kw">sin</span>(u),<span class="kw">cos</span>(u)), <span class="dv">0</span>, <span class="dv">0</span>)</span>
<span id="cb11-8"><a href="#cb11-8"></a>  Dv &lt;-<span class="st"> </span><span class="kw">c</span>(<span class="dv">0</span>, <span class="dv">0</span>, (R2 <span class="op">+</span><span class="st"> </span>r<span class="op">*</span><span class="kw">sin</span>(w))<span class="op">*</span><span class="kw">c</span>(<span class="op">-</span><span class="kw">sin</span>(v),<span class="kw">cos</span>(v)))</span>
<span id="cb11-9"><a href="#cb11-9"></a>  Dw &lt;-<span class="st"> </span>r <span class="op">*</span><span class="st"> </span><span class="kw">c</span>(<span class="op">-</span><span class="kw">sin</span>(w)<span class="op">*</span><span class="kw">c</span>(<span class="kw">cos</span>(u),<span class="kw">sin</span>(u)), <span class="kw">cos</span>(w)<span class="op">*</span><span class="kw">c</span>(<span class="kw">cos</span>(v),<span class="kw">sin</span>(v)))</span>
<span id="cb11-10"><a href="#cb11-10"></a>  <span class="kw">crossProd4D</span>(Du, Dv, Dw)</span>
<span id="cb11-11"><a href="#cb11-11"></a>}</span>
<span id="cb11-12"><a href="#cb11-12"></a>Normals &lt;-<span class="st"> </span><span class="kw">apply</span>(VS0, 2L, sNormal)</span></code></pre></div>
<p>Then you can calculate the normals in this way and proceed as before:</p>
<div class="sourceCode" id="cb12"><pre class="sourceCode numberSource r numberLines"><code class="sourceCode r"><span id="cb12-1"><a href="#cb12-1"></a>mesh &lt;-<span class="st"> </span><span class="kw">tmesh3d</span>(</span>
<span id="cb12-2"><a href="#cb12-2"></a>  <span class="dt">vertices =</span> VSprime[<span class="op">-</span>4L,], </span>
<span id="cb12-3"><a href="#cb12-3"></a>  <span class="dt">indices =</span> mesh0<span class="op">$</span>ib, </span>
<span id="cb12-4"><a href="#cb12-4"></a>  <span class="dt">homogeneous =</span> <span class="ot">FALSE</span>,</span>
<span id="cb12-5"><a href="#cb12-5"></a>  <span class="dt">normals =</span> <span class="kw">t</span>((Rot <span class="op">%*%</span><span class="st"> </span><span class="kw">projection</span>(a, b, Normals))[<span class="op">-</span>4L,])</span>
<span id="cb12-6"><a href="#cb12-6"></a>)</span></code></pre></div>
<p>Here is how to do an animation:</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode numberSource r numberLines"><code class="sourceCode r"><span id="cb13-1"><a href="#cb13-1"></a>b_ &lt;-<span class="st"> </span><span class="kw">seq</span>(<span class="op">-</span><span class="fl">11.5</span>, <span class="fl">11.5</span>, <span class="dt">length.out =</span> 60L)</span>
<span id="cb13-2"><a href="#cb13-2"></a><span class="kw">open3d</span>(<span class="dt">windowRect =</span> <span class="kw">c</span>(<span class="dv">100</span>, <span class="dv">100</span>, <span class="dv">612</span>, <span class="dv">612</span>), <span class="dt">zoom =</span> <span class="fl">0.8</span>)</span>
<span id="cb13-3"><a href="#cb13-3"></a><span class="kw">bg3d</span>(<span class="kw">rgb</span>(<span class="dv">54</span>, <span class="dv">57</span>, <span class="dv">64</span>, <span class="dt">maxColorValue =</span> <span class="dv">255</span>))</span>
<span id="cb13-4"><a href="#cb13-4"></a><span class="kw">view3d</span>(<span class="dv">45</span>, <span class="dv">40</span>)</span>
<span id="cb13-5"><a href="#cb13-5"></a><span class="cf">for</span>(i <span class="cf">in</span> 1L<span class="op">:</span><span class="kw">length</span>(b_)){</span>
<span id="cb13-6"><a href="#cb13-6"></a>  x0 &lt;-<span class="st"> </span><span class="kw">rep</span>(b_[i]<span class="op">/</span><span class="dv">4</span>, 4L) </span>
<span id="cb13-7"><a href="#cb13-7"></a>  surf &lt;-<span class="st"> </span><span class="kw">computeContour3d</span>(voxel, <span class="dt">level =</span> <span class="kw">sum</span>(x0<span class="op">*</span>nrml), </span>
<span id="cb13-8"><a href="#cb13-8"></a>                           <span class="dt">x =</span> u_, <span class="dt">y =</span> v_, <span class="dt">z =</span> w_)</span>
<span id="cb13-9"><a href="#cb13-9"></a>  trgls &lt;-<span class="st"> </span><span class="kw">makeTriangles</span>(surf)</span>
<span id="cb13-10"><a href="#cb13-10"></a>  mesh0 &lt;-<span class="st"> </span>misc3d<span class="op">:::</span><span class="kw">t2ve</span>(trgls)</span>
<span id="cb13-11"><a href="#cb13-11"></a>  VS0 &lt;-<span class="st"> </span>mesh0<span class="op">$</span>vb</span>
<span id="cb13-12"><a href="#cb13-12"></a>  VS &lt;-<span class="st"> </span><span class="kw">s</span>(VS0[1L,], VS0[2L,], VS0[3L,])</span>
<span id="cb13-13"><a href="#cb13-13"></a>  Normals &lt;-<span class="st"> </span><span class="kw">sNormal</span>(VS)</span>
<span id="cb13-14"><a href="#cb13-14"></a>  mesh &lt;-<span class="st"> </span><span class="kw">tmesh3d</span>(</span>
<span id="cb13-15"><a href="#cb13-15"></a>    <span class="dt">vertices =</span> (Rot <span class="op">%*%</span><span class="st"> </span>VS)[<span class="op">-</span>4L,], </span>
<span id="cb13-16"><a href="#cb13-16"></a>    <span class="dt">indices =</span> mesh0<span class="op">$</span>ib, </span>
<span id="cb13-17"><a href="#cb13-17"></a>    <span class="dt">homogeneous =</span> <span class="ot">FALSE</span>,</span>
<span id="cb13-18"><a href="#cb13-18"></a>    <span class="dt">normals =</span> <span class="op">-</span><span class="kw">t</span>((Rot <span class="op">%*%</span><span class="st"> </span><span class="kw">projection</span>(a, b_[i], Normals))[<span class="op">-</span>4L,])</span>
<span id="cb13-19"><a href="#cb13-19"></a>  )</span>
<span id="cb13-20"><a href="#cb13-20"></a>  <span class="kw">shade3d</span>(mesh, <span class="dt">color =</span> <span class="st">&quot;firebrick3&quot;</span>)</span>
<span id="cb13-21"><a href="#cb13-21"></a>  <span class="kw">snapshot3d</span>(<span class="kw">sprintf</span>(<span class="st">&quot;pic%03d.png&quot;</span>, i))</span>
<span id="cb13-22"><a href="#cb13-22"></a>  <span class="kw">clear3d</span>()</span>
<span id="cb13-23"><a href="#cb13-23"></a>}</span>
<span id="cb13-24"><a href="#cb13-24"></a><span class="cf">for</span>(i <span class="cf">in</span> 1L<span class="op">:</span>59L){</span>
<span id="cb13-25"><a href="#cb13-25"></a>  <span class="kw">file.copy</span>(<span class="kw">sprintf</span>(<span class="st">&quot;pic%03d.png&quot;</span>, <span class="dv">60</span><span class="op">-</span>i), <span class="kw">sprintf</span>(<span class="st">&quot;pic%03d.png&quot;</span>, <span class="dv">60</span><span class="op">+</span>i))</span>
<span id="cb13-26"><a href="#cb13-26"></a>}</span>
<span id="cb13-27"><a href="#cb13-27"></a><span class="co"># run gifski</span></span>
<span id="cb13-28"><a href="#cb13-28"></a>command &lt;-<span class="st"> &quot;gifski --fps 12 pic*.png -o slicedTiger.gif&quot;</span></span>
<span id="cb13-29"><a href="#cb13-29"></a><span class="kw">system</span>(command)</span>
<span id="cb13-30"><a href="#cb13-30"></a><span class="co"># cleaning</span></span>
<span id="cb13-31"><a href="#cb13-31"></a>pngfiles &lt;-<span class="st"> </span><span class="kw">list.files</span>(<span class="dt">pattern =</span> <span class="st">&quot;^pic.*png$&quot;</span>)</span>
<span id="cb13-32"><a href="#cb13-32"></a><span class="kw">file.remove</span>(pngfiles)</span></code></pre></div>
<p><img src="https://laustep.github.io/stlahblog/posts/figures/tiger2.gif" /></p>
<h2 id="toroidal-hyperboloid">Toroidal hyperboloid</h2>
<p>Let’s give another example, a <em>toroidal hyperboloid</em>. This is a quadric with implicit equation <span class="math display">\[
\frac{x^2}{a^2} + \frac{y^2}{b^2} - \frac{z^2}{c^2} - \frac{t^2}{d^2} = 1,
\]</span> and a parameterization of this quadric is <span class="math display">\[
\begin{array}{ccc}
s \colon &amp; (0,2\pi) \times (0,2\pi) \times (0, +\infty[ &amp; 
\longrightarrow &amp; \mathbb{R}^4 \\
 &amp; (u,v,w) &amp; \longmapsto &amp; 
\begin{pmatrix}
a \cos u \cosh w \\ 
b \sin u \cosh w \\
c \cos v \sinh w \\
d \sin v \sinh w 
\end{pmatrix}
\end{array}.
\]</span></p>
<p><img src="https://laustep.github.io/stlahblog/posts/figures/toroidalHyperboloid.gif" /></p>

        </div>


        <div id="footer">
          Site proudly generated by
          <a href="http://jaspervdj.be/hakyll">Hakyll</a>
        </div>

      </div>

    </div>


  </div>

]]></description>
    <pubDate>Fri, 01 May 2020 00:00:00 UT</pubDate>
    <guid>https://laustep.github.io/stlahblog/posts/slicedHypersurface.html</guid>
    <dc:creator>Stéphane Laurent</dc:creator>
    <category>R</category>
</item>



<item>
    <title>An orbit of the modular tessellation</title>
    <link>https://laustep.github.io/stlahblog/posts/ModularTessellationOrbit.html</link>
    <description><![CDATA[
  <div class="container-fluid">
    <div class="row">
      <div class="main col-sm-12">
        <div id="header">
          <div id="logo">
            <a href="https://laustep.github.io/stlahblog/">
              <img src="https://laustep.github.io/stlahblog/images/stla.jpg" alt="stla" width="100px" />
            </a>
          </div>
          <div id="navigation" style="margin-top:50px;">
            <a href="https://laustep.github.io/stlahblog/">Home</a>
            <a href="https://laustep.github.io/stlahblog/about.html">About</a>
            <a href="https://laustep.github.io/stlahblog/contact.html">Contact</a>
            <a href="https://laustep.github.io/stlahblog/archive.html">Archive</a>
          </div>
        </div>

        <div class="content">
          <h1>An orbit of the modular tessellation</h1> 
          <div class="info">
    Posted on February 19, 2020
    
        by Stéphane Laurent
    
</div>
<div class="info">
    
    Tags: <a title="All pages tagged &#39;R&#39;." href="https://laustep.github.io/stlahblog/tags/R.html">R</a>, <a title="All pages tagged &#39;maths&#39;." href="https://laustep.github.io/stlahblog/tags/maths.html">maths</a>, <a title="All pages tagged &#39;geometry&#39;." href="https://laustep.github.io/stlahblog/tags/geometry.html">geometry</a>
    
</div>

<p>I came across this <a href="https://www3.risc.jku.at/publications/download/risc_5011/DiplomaThesisPonweiser.pdf">interesting paper</a> entitled <em>Complex Variables Visualized</em> and written by Thomas Ponweiser.</p>
<p>In particular, I was intrigued by the <em>generalized powers</em> of a Möbius transformation (of a matrix, actually), and their actions on the modular tessellation.</p>
<p>So I firstly implemented the generalized powers in my package <code>PlaneGeometry</code>. Then I wrote the script below to visualize the orbit of the modular tessellation under the action of <span class="math inline">\(R^t\)</span>, <span class="math inline">\(0 \leqslant t &lt; 3\)</span>, with the notations of the paper. The command <code>fplot(u)</code> generates the modular tessellation under the action of <span class="math inline">\(R^t\)</span> when <code>u</code> is the value of <span class="math inline">\(t\)</span>. Then I use the <code>gifski</code> package to create the animation.</p>
<p>To get the modular transformations <span class="math inline">\(z \mapsto \frac{az+b}{cz+d}\)</span>, I use the <code>unimodular</code> function of the <code>elliptic</code> package. It generates the quadruples <span class="math inline">\((a,b,c,d)\)</span> of <em>positive</em> integers such that <span class="math inline">\(ad-bc=1\)</span>. Then we can get all such quadruples <span class="math inline">\((a,b,c,d) \in \mathbb{Z}^4\)</span> by inverting these modular transformations, swapping <span class="math inline">\(a\)</span> and <span class="math inline">\(d\)</span> and changing their signs.</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode numberSource r numberLines"><code class="sourceCode r"><span id="cb1-1"><a href="#cb1-1"></a><span class="kw">library</span>(PlaneGeometry)</span>
<span id="cb1-2"><a href="#cb1-2"></a><span class="kw">library</span>(elliptic) <span class="co"># for the &#39;unimodular&#39; function</span></span>
<span id="cb1-3"><a href="#cb1-3"></a></span>
<span id="cb1-4"><a href="#cb1-4"></a><span class="co"># Möbius transformations</span></span>
<span id="cb1-5"><a href="#cb1-5"></a>T &lt;-<span class="st"> </span>Mobius<span class="op">$</span><span class="kw">new</span>(<span class="kw">rbind</span>(<span class="kw">c</span>(<span class="dv">0</span>,<span class="op">-</span><span class="dv">1</span>), <span class="kw">c</span>(<span class="dv">1</span>,<span class="dv">0</span>)))</span>
<span id="cb1-6"><a href="#cb1-6"></a>U &lt;-<span class="st"> </span>Mobius<span class="op">$</span><span class="kw">new</span>(<span class="kw">rbind</span>(<span class="kw">c</span>(<span class="dv">1</span>,<span class="dv">1</span>), <span class="kw">c</span>(<span class="dv">0</span>,<span class="dv">1</span>)))</span>
<span id="cb1-7"><a href="#cb1-7"></a>R &lt;-<span class="st"> </span>U<span class="op">$</span><span class="kw">compose</span>(T)</span>
<span id="cb1-8"><a href="#cb1-8"></a><span class="co"># R^t, generalized power</span></span>
<span id="cb1-9"><a href="#cb1-9"></a>Rt &lt;-<span class="st"> </span><span class="cf">function</span>(t) R<span class="op">$</span><span class="kw">gpower</span>(t)</span>
<span id="cb1-10"><a href="#cb1-10"></a></span>
<span id="cb1-11"><a href="#cb1-11"></a><span class="co"># starting circles</span></span>
<span id="cb1-12"><a href="#cb1-12"></a>I &lt;-<span class="st"> </span>Circle<span class="op">$</span><span class="kw">new</span>(<span class="kw">c</span>(<span class="dv">0</span>,<span class="fl">1.5</span>), <span class="fl">0.5</span>)</span>
<span id="cb1-13"><a href="#cb1-13"></a>TI &lt;-<span class="st"> </span>T<span class="op">$</span><span class="kw">transformCircle</span>(I)</span>
<span id="cb1-14"><a href="#cb1-14"></a></span>
<span id="cb1-15"><a href="#cb1-15"></a><span class="co"># modified Cayley transformation</span></span>
<span id="cb1-16"><a href="#cb1-16"></a>Phi &lt;-<span class="st"> </span>Mobius<span class="op">$</span><span class="kw">new</span>(<span class="kw">rbind</span>(<span class="kw">c</span>(1i,<span class="dv">1</span>), <span class="kw">c</span>(<span class="dv">1</span>,1i)))</span>
<span id="cb1-17"><a href="#cb1-17"></a></span>
<span id="cb1-18"><a href="#cb1-18"></a><span class="co"># plotting function ####</span></span>
<span id="cb1-19"><a href="#cb1-19"></a>n &lt;-<span class="st"> </span>8L</span>
<span id="cb1-20"><a href="#cb1-20"></a>transfos &lt;-<span class="st"> </span><span class="kw">unimodular</span>(n)</span>
<span id="cb1-21"><a href="#cb1-21"></a>fplot &lt;-<span class="st"> </span><span class="cf">function</span>(u){</span>
<span id="cb1-22"><a href="#cb1-22"></a>  opar &lt;-<span class="st"> </span><span class="kw">par</span>(<span class="dt">mar =</span> <span class="kw">c</span>(<span class="dv">0</span>,<span class="dv">0</span>,<span class="dv">0</span>,<span class="dv">0</span>), <span class="dt">bg =</span> <span class="st">&quot;black&quot;</span>)</span>
<span id="cb1-23"><a href="#cb1-23"></a>  <span class="kw">plot</span>(<span class="ot">NULL</span>, <span class="dt">asp =</span> <span class="dv">1</span>, <span class="dt">xlim =</span> <span class="kw">c</span>(<span class="op">-</span><span class="fl">1.1</span>,<span class="fl">1.1</span>), <span class="dt">ylim =</span> <span class="kw">c</span>(<span class="op">-</span><span class="fl">1.1</span>,<span class="fl">1.1</span>),</span>
<span id="cb1-24"><a href="#cb1-24"></a>       <span class="dt">xlab =</span> <span class="ot">NA</span>, <span class="dt">ylab =</span> <span class="ot">NA</span>, <span class="dt">axes =</span> <span class="ot">FALSE</span>)</span>
<span id="cb1-25"><a href="#cb1-25"></a>  <span class="kw">draw</span>(unitCircle, <span class="dt">col =</span> <span class="st">&quot;black&quot;</span>)</span>
<span id="cb1-26"><a href="#cb1-26"></a>  <span class="cf">for</span>(i <span class="cf">in</span> 1L<span class="op">:</span><span class="kw">dim</span>(transfos)[3L]){</span>
<span id="cb1-27"><a href="#cb1-27"></a>    transfo &lt;-<span class="st"> </span>transfos[,,i]</span>
<span id="cb1-28"><a href="#cb1-28"></a>    <span class="co">#</span></span>
<span id="cb1-29"><a href="#cb1-29"></a>    M &lt;-<span class="st"> </span>Mobius<span class="op">$</span><span class="kw">new</span>(transfo)</span>
<span id="cb1-30"><a href="#cb1-30"></a>    <span class="kw">draw</span>(M<span class="op">$</span><span class="kw">compose</span>(<span class="kw">Rt</span>(u))<span class="op">$</span><span class="kw">compose</span>(Phi)<span class="op">$</span><span class="kw">transformCircle</span>(I),</span>
<span id="cb1-31"><a href="#cb1-31"></a>         <span class="dt">border =</span> <span class="st">&quot;black&quot;</span>, <span class="dt">col =</span> <span class="st">&quot;magenta&quot;</span>)</span>
<span id="cb1-32"><a href="#cb1-32"></a>    <span class="kw">draw</span>(M<span class="op">$</span><span class="kw">compose</span>(<span class="kw">Rt</span>(u))<span class="op">$</span><span class="kw">compose</span>(Phi)<span class="op">$</span><span class="kw">transformCircle</span>(TI),</span>
<span id="cb1-33"><a href="#cb1-33"></a>         <span class="dt">border =</span> <span class="st">&quot;black&quot;</span>, <span class="dt">col =</span> <span class="st">&quot;magenta&quot;</span>)</span>
<span id="cb1-34"><a href="#cb1-34"></a>    M &lt;-<span class="st"> </span>M<span class="op">$</span><span class="kw">inverse</span>()</span>
<span id="cb1-35"><a href="#cb1-35"></a>    <span class="kw">draw</span>(M<span class="op">$</span><span class="kw">compose</span>(<span class="kw">Rt</span>(u))<span class="op">$</span><span class="kw">compose</span>(Phi)<span class="op">$</span><span class="kw">transformCircle</span>(I),</span>
<span id="cb1-36"><a href="#cb1-36"></a>         <span class="dt">border =</span> <span class="st">&quot;black&quot;</span>, <span class="dt">col =</span> <span class="st">&quot;magenta&quot;</span>)</span>
<span id="cb1-37"><a href="#cb1-37"></a>    <span class="kw">draw</span>(M<span class="op">$</span><span class="kw">compose</span>(<span class="kw">Rt</span>(u))<span class="op">$</span><span class="kw">compose</span>(Phi)<span class="op">$</span><span class="kw">transformCircle</span>(TI),</span>
<span id="cb1-38"><a href="#cb1-38"></a>         <span class="dt">border =</span> <span class="st">&quot;black&quot;</span>, <span class="dt">col =</span> <span class="st">&quot;magenta&quot;</span>)</span>
<span id="cb1-39"><a href="#cb1-39"></a>    <span class="co">#</span></span>
<span id="cb1-40"><a href="#cb1-40"></a>    <span class="kw">diag</span>(transfo) &lt;-<span class="st"> </span><span class="op">-</span><span class="kw">diag</span>(transfo)</span>
<span id="cb1-41"><a href="#cb1-41"></a>    M &lt;-<span class="st"> </span>Mobius<span class="op">$</span><span class="kw">new</span>(transfo)</span>
<span id="cb1-42"><a href="#cb1-42"></a>    <span class="kw">draw</span>(M<span class="op">$</span><span class="kw">compose</span>(<span class="kw">Rt</span>(u))<span class="op">$</span><span class="kw">compose</span>(Phi)<span class="op">$</span><span class="kw">transformCircle</span>(I),</span>
<span id="cb1-43"><a href="#cb1-43"></a>         <span class="dt">border =</span> <span class="st">&quot;black&quot;</span>, <span class="dt">col =</span> <span class="st">&quot;magenta&quot;</span>)</span>
<span id="cb1-44"><a href="#cb1-44"></a>    <span class="kw">draw</span>(M<span class="op">$</span><span class="kw">compose</span>(<span class="kw">Rt</span>(u))<span class="op">$</span><span class="kw">compose</span>(Phi)<span class="op">$</span><span class="kw">transformCircle</span>(TI),</span>
<span id="cb1-45"><a href="#cb1-45"></a>         <span class="dt">border =</span> <span class="st">&quot;black&quot;</span>, <span class="dt">col =</span> <span class="st">&quot;magenta&quot;</span>)</span>
<span id="cb1-46"><a href="#cb1-46"></a>    M &lt;-<span class="st"> </span>M<span class="op">$</span><span class="kw">inverse</span>()</span>
<span id="cb1-47"><a href="#cb1-47"></a>    <span class="kw">draw</span>(M<span class="op">$</span><span class="kw">compose</span>(<span class="kw">Rt</span>(u))<span class="op">$</span><span class="kw">compose</span>(Phi)<span class="op">$</span><span class="kw">transformCircle</span>(I),</span>
<span id="cb1-48"><a href="#cb1-48"></a>         <span class="dt">border =</span> <span class="st">&quot;black&quot;</span>, <span class="dt">col =</span> <span class="st">&quot;magenta&quot;</span>)</span>
<span id="cb1-49"><a href="#cb1-49"></a>    <span class="kw">draw</span>(M<span class="op">$</span><span class="kw">compose</span>(<span class="kw">Rt</span>(u))<span class="op">$</span><span class="kw">compose</span>(Phi)<span class="op">$</span><span class="kw">transformCircle</span>(TI),</span>
<span id="cb1-50"><a href="#cb1-50"></a>         <span class="dt">border =</span> <span class="st">&quot;black&quot;</span>, <span class="dt">col =</span> <span class="st">&quot;magenta&quot;</span>)</span>
<span id="cb1-51"><a href="#cb1-51"></a>    <span class="co">#</span></span>
<span id="cb1-52"><a href="#cb1-52"></a>    d &lt;-<span class="st"> </span><span class="kw">diag</span>(transfo)</span>
<span id="cb1-53"><a href="#cb1-53"></a>    <span class="cf">if</span>(d[1L] <span class="op">!=</span><span class="st"> </span>d[2L]){</span>
<span id="cb1-54"><a href="#cb1-54"></a>      <span class="kw">diag</span>(transfo) &lt;-<span class="st"> </span><span class="kw">rev</span>(d)</span>
<span id="cb1-55"><a href="#cb1-55"></a>      M &lt;-<span class="st"> </span>Mobius<span class="op">$</span><span class="kw">new</span>(transfo)</span>
<span id="cb1-56"><a href="#cb1-56"></a>      <span class="kw">draw</span>(M<span class="op">$</span><span class="kw">compose</span>(<span class="kw">Rt</span>(u))<span class="op">$</span><span class="kw">compose</span>(Phi)<span class="op">$</span><span class="kw">transformCircle</span>(I),</span>
<span id="cb1-57"><a href="#cb1-57"></a>           <span class="dt">border =</span> <span class="st">&quot;black&quot;</span>, <span class="dt">col =</span> <span class="st">&quot;magenta&quot;</span>)</span>
<span id="cb1-58"><a href="#cb1-58"></a>      <span class="kw">draw</span>(M<span class="op">$</span><span class="kw">compose</span>(<span class="kw">Rt</span>(u))<span class="op">$</span><span class="kw">compose</span>(Phi)<span class="op">$</span><span class="kw">transformCircle</span>(TI),</span>
<span id="cb1-59"><a href="#cb1-59"></a>           <span class="dt">border =</span> <span class="st">&quot;black&quot;</span>, <span class="dt">col =</span> <span class="st">&quot;magenta&quot;</span>)</span>
<span id="cb1-60"><a href="#cb1-60"></a>      M &lt;-<span class="st"> </span>M<span class="op">$</span><span class="kw">inverse</span>()</span>
<span id="cb1-61"><a href="#cb1-61"></a>      <span class="kw">draw</span>(M<span class="op">$</span><span class="kw">compose</span>(<span class="kw">Rt</span>(u))<span class="op">$</span><span class="kw">compose</span>(Phi)<span class="op">$</span><span class="kw">transformCircle</span>(I),</span>
<span id="cb1-62"><a href="#cb1-62"></a>           <span class="dt">border =</span> <span class="st">&quot;black&quot;</span>, <span class="dt">col =</span> <span class="st">&quot;magenta&quot;</span>)</span>
<span id="cb1-63"><a href="#cb1-63"></a>      <span class="kw">draw</span>(M<span class="op">$</span><span class="kw">compose</span>(<span class="kw">Rt</span>(u))<span class="op">$</span><span class="kw">compose</span>(Phi)<span class="op">$</span><span class="kw">transformCircle</span>(TI),</span>
<span id="cb1-64"><a href="#cb1-64"></a>           <span class="dt">border =</span> <span class="st">&quot;black&quot;</span>, <span class="dt">col =</span> <span class="st">&quot;magenta&quot;</span>)</span>
<span id="cb1-65"><a href="#cb1-65"></a>    }</span>
<span id="cb1-66"><a href="#cb1-66"></a>  }</span>
<span id="cb1-67"><a href="#cb1-67"></a>  <span class="cf">for</span>(i <span class="cf">in</span> 1L<span class="op">:</span><span class="kw">dim</span>(transfos)[3L]){</span>
<span id="cb1-68"><a href="#cb1-68"></a>    transfo &lt;-<span class="st"> </span>transfos[,,i]</span>
<span id="cb1-69"><a href="#cb1-69"></a>    <span class="co">#</span></span>
<span id="cb1-70"><a href="#cb1-70"></a>    M &lt;-<span class="st"> </span>Mobius<span class="op">$</span><span class="kw">new</span>(transfo)<span class="op">$</span><span class="kw">compose</span>(T)</span>
<span id="cb1-71"><a href="#cb1-71"></a>    <span class="kw">draw</span>(M<span class="op">$</span><span class="kw">compose</span>(<span class="kw">Rt</span>(u))<span class="op">$</span><span class="kw">compose</span>(Phi)<span class="op">$</span><span class="kw">transformCircle</span>(I),</span>
<span id="cb1-72"><a href="#cb1-72"></a>         <span class="dt">border =</span> <span class="st">&quot;black&quot;</span>, <span class="dt">col =</span> <span class="st">&quot;magenta&quot;</span>)</span>
<span id="cb1-73"><a href="#cb1-73"></a>    <span class="kw">draw</span>(M<span class="op">$</span><span class="kw">compose</span>(<span class="kw">Rt</span>(u))<span class="op">$</span><span class="kw">compose</span>(Phi)<span class="op">$</span><span class="kw">transformCircle</span>(TI),</span>
<span id="cb1-74"><a href="#cb1-74"></a>         <span class="dt">border =</span> <span class="st">&quot;black&quot;</span>, <span class="dt">col =</span> <span class="st">&quot;magenta&quot;</span>)</span>
<span id="cb1-75"><a href="#cb1-75"></a>    M &lt;-<span class="st"> </span>M<span class="op">$</span><span class="kw">inverse</span>()</span>
<span id="cb1-76"><a href="#cb1-76"></a>    <span class="kw">draw</span>(M<span class="op">$</span><span class="kw">compose</span>(<span class="kw">Rt</span>(u))<span class="op">$</span><span class="kw">compose</span>(Phi)<span class="op">$</span><span class="kw">transformCircle</span>(I),</span>
<span id="cb1-77"><a href="#cb1-77"></a>         <span class="dt">border =</span> <span class="st">&quot;black&quot;</span>, <span class="dt">col =</span> <span class="st">&quot;magenta&quot;</span>)</span>
<span id="cb1-78"><a href="#cb1-78"></a>    <span class="kw">draw</span>(M<span class="op">$</span><span class="kw">compose</span>(<span class="kw">Rt</span>(u))<span class="op">$</span><span class="kw">compose</span>(Phi)<span class="op">$</span><span class="kw">transformCircle</span>(TI),</span>
<span id="cb1-79"><a href="#cb1-79"></a>         <span class="dt">border =</span> <span class="st">&quot;black&quot;</span>, <span class="dt">col =</span> <span class="st">&quot;magenta&quot;</span>)</span>
<span id="cb1-80"><a href="#cb1-80"></a>    <span class="co">#</span></span>
<span id="cb1-81"><a href="#cb1-81"></a>    <span class="kw">diag</span>(transfo) &lt;-<span class="st"> </span><span class="op">-</span><span class="kw">diag</span>(transfo)</span>
<span id="cb1-82"><a href="#cb1-82"></a>    M &lt;-<span class="st"> </span>Mobius<span class="op">$</span><span class="kw">new</span>(transfo)<span class="op">$</span><span class="kw">compose</span>(T)</span>
<span id="cb1-83"><a href="#cb1-83"></a>    <span class="kw">draw</span>(M<span class="op">$</span><span class="kw">compose</span>(<span class="kw">Rt</span>(u))<span class="op">$</span><span class="kw">compose</span>(Phi)<span class="op">$</span><span class="kw">transformCircle</span>(I),</span>
<span id="cb1-84"><a href="#cb1-84"></a>         <span class="dt">border =</span> <span class="st">&quot;black&quot;</span>, <span class="dt">col =</span> <span class="st">&quot;magenta&quot;</span>)</span>
<span id="cb1-85"><a href="#cb1-85"></a>    <span class="kw">draw</span>(M<span class="op">$</span><span class="kw">compose</span>(<span class="kw">Rt</span>(u))<span class="op">$</span><span class="kw">compose</span>(Phi)<span class="op">$</span><span class="kw">transformCircle</span>(TI),</span>
<span id="cb1-86"><a href="#cb1-86"></a>         <span class="dt">border =</span> <span class="st">&quot;black&quot;</span>, <span class="dt">col =</span> <span class="st">&quot;magenta&quot;</span>)</span>
<span id="cb1-87"><a href="#cb1-87"></a>    M &lt;-<span class="st"> </span>M<span class="op">$</span><span class="kw">inverse</span>()</span>
<span id="cb1-88"><a href="#cb1-88"></a>    <span class="kw">draw</span>(M<span class="op">$</span><span class="kw">compose</span>(<span class="kw">Rt</span>(u))<span class="op">$</span><span class="kw">compose</span>(Phi)<span class="op">$</span><span class="kw">transformCircle</span>(I),</span>
<span id="cb1-89"><a href="#cb1-89"></a>         <span class="dt">border =</span> <span class="st">&quot;black&quot;</span>, <span class="dt">col =</span> <span class="st">&quot;magenta&quot;</span>)</span>
<span id="cb1-90"><a href="#cb1-90"></a>    <span class="kw">draw</span>(M<span class="op">$</span><span class="kw">compose</span>(<span class="kw">Rt</span>(u))<span class="op">$</span><span class="kw">compose</span>(Phi)<span class="op">$</span><span class="kw">transformCircle</span>(TI),</span>
<span id="cb1-91"><a href="#cb1-91"></a>         <span class="dt">border =</span> <span class="st">&quot;black&quot;</span>, <span class="dt">col =</span> <span class="st">&quot;magenta&quot;</span>)</span>
<span id="cb1-92"><a href="#cb1-92"></a>    <span class="co">#</span></span>
<span id="cb1-93"><a href="#cb1-93"></a>    d &lt;-<span class="st"> </span><span class="kw">diag</span>(transfo)</span>
<span id="cb1-94"><a href="#cb1-94"></a>    <span class="cf">if</span>(d[1L] <span class="op">!=</span><span class="st"> </span>d[2L]){</span>
<span id="cb1-95"><a href="#cb1-95"></a>      <span class="kw">diag</span>(transfo) &lt;-<span class="st"> </span><span class="kw">rev</span>(d)</span>
<span id="cb1-96"><a href="#cb1-96"></a>      M &lt;-<span class="st"> </span>Mobius<span class="op">$</span><span class="kw">new</span>(transfo)<span class="op">$</span><span class="kw">compose</span>(T)</span>
<span id="cb1-97"><a href="#cb1-97"></a>      <span class="kw">draw</span>(M<span class="op">$</span><span class="kw">compose</span>(<span class="kw">Rt</span>(u))<span class="op">$</span><span class="kw">compose</span>(Phi)<span class="op">$</span><span class="kw">transformCircle</span>(I),</span>
<span id="cb1-98"><a href="#cb1-98"></a>           <span class="dt">border =</span> <span class="st">&quot;black&quot;</span>, <span class="dt">col =</span> <span class="st">&quot;magenta&quot;</span>)</span>
<span id="cb1-99"><a href="#cb1-99"></a>      <span class="kw">draw</span>(M<span class="op">$</span><span class="kw">compose</span>(<span class="kw">Rt</span>(u))<span class="op">$</span><span class="kw">compose</span>(Phi)<span class="op">$</span><span class="kw">transformCircle</span>(TI),</span>
<span id="cb1-100"><a href="#cb1-100"></a>           <span class="dt">border =</span> <span class="st">&quot;black&quot;</span>, <span class="dt">col =</span> <span class="st">&quot;magenta&quot;</span>)</span>
<span id="cb1-101"><a href="#cb1-101"></a>      M &lt;-<span class="st"> </span>M<span class="op">$</span><span class="kw">inverse</span>()</span>
<span id="cb1-102"><a href="#cb1-102"></a>      <span class="kw">draw</span>(M<span class="op">$</span><span class="kw">compose</span>(<span class="kw">Rt</span>(u))<span class="op">$</span><span class="kw">compose</span>(Phi)<span class="op">$</span><span class="kw">transformCircle</span>(I),</span>
<span id="cb1-103"><a href="#cb1-103"></a>           <span class="dt">border =</span> <span class="st">&quot;black&quot;</span>, <span class="dt">col =</span> <span class="st">&quot;magenta&quot;</span>)</span>
<span id="cb1-104"><a href="#cb1-104"></a>      <span class="kw">draw</span>(M<span class="op">$</span><span class="kw">compose</span>(<span class="kw">Rt</span>(u))<span class="op">$</span><span class="kw">compose</span>(Phi)<span class="op">$</span><span class="kw">transformCircle</span>(TI),</span>
<span id="cb1-105"><a href="#cb1-105"></a>           <span class="dt">border =</span> <span class="st">&quot;black&quot;</span>, <span class="dt">col =</span> <span class="st">&quot;magenta&quot;</span>)</span>
<span id="cb1-106"><a href="#cb1-106"></a>    }</span>
<span id="cb1-107"><a href="#cb1-107"></a>  }</span>
<span id="cb1-108"><a href="#cb1-108"></a>}</span>
<span id="cb1-109"><a href="#cb1-109"></a></span>
<span id="cb1-110"><a href="#cb1-110"></a><span class="co"># animation ####</span></span>
<span id="cb1-111"><a href="#cb1-111"></a><span class="kw">library</span>(gifski)</span>
<span id="cb1-112"><a href="#cb1-112"></a>u_ &lt;-<span class="st"> </span><span class="kw">seq</span>(<span class="dv">0</span>, <span class="dv">3</span>, <span class="dt">length.out =</span> 181L)[<span class="op">-</span>1L]</span>
<span id="cb1-113"><a href="#cb1-113"></a><span class="kw">save_gif</span>({</span>
<span id="cb1-114"><a href="#cb1-114"></a>  <span class="cf">for</span>(u <span class="cf">in</span> u_){</span>
<span id="cb1-115"><a href="#cb1-115"></a>    <span class="kw">fplot</span>(u)</span>
<span id="cb1-116"><a href="#cb1-116"></a>  }</span>
<span id="cb1-117"><a href="#cb1-117"></a>}, <span class="st">&quot;ModularTessellation.gif&quot;</span>, <span class="dv">512</span>, <span class="dv">512</span>, <span class="dt">delay =</span> <span class="dv">1</span><span class="op">/</span><span class="dv">12</span>, <span class="dt">res =</span> <span class="dv">144</span>)</span></code></pre></div>
<p><img src="https://laustep.github.io/stlahblog/posts/figures/ModularTessellationOrbit.gif" /></p>

        </div>


        <div id="footer">
          Site proudly generated by
          <a href="http://jaspervdj.be/hakyll">Hakyll</a>
        </div>

      </div>

    </div>


  </div>

]]></description>
    <pubDate>Wed, 19 Feb 2020 00:00:00 UT</pubDate>
    <guid>https://laustep.github.io/stlahblog/posts/ModularTessellationOrbit.html</guid>
    <dc:creator>Stéphane Laurent</dc:creator>
    <category>R</category>
</item>


<item>
    <title>Tooltips for the headers of a datatable in Shiny</title>
    <link>https://laustep.github.io/stlahblog/posts/DTqTips.html</link>
    <description><![CDATA[
  <div class="container-fluid">
    <div class="row">
      <div class="main col-sm-12">
        <div id="header">
          <div id="logo">
            <a href="https://laustep.github.io/stlahblog/">
              <img src="https://laustep.github.io/stlahblog/images/stla.jpg" alt="stla" width="100px" />
            </a>
          </div>
          <div id="navigation" style="margin-top:50px;">
            <a href="https://laustep.github.io/stlahblog/">Home</a>
            <a href="https://laustep.github.io/stlahblog/about.html">About</a>
            <a href="https://laustep.github.io/stlahblog/contact.html">Contact</a>
            <a href="https://laustep.github.io/stlahblog/archive.html">Archive</a>
          </div>
        </div>

        <div class="content">
          <h1>Tooltips for the headers of a datatable in Shiny</h1> 
          <div class="info">
    Posted on February 16, 2020
    
        by Stéphane Laurent
    
</div>
<div class="info">
    
    Tags: <a title="All pages tagged &#39;R&#39;." href="https://laustep.github.io/stlahblog/tags/R.html">R</a>, <a title="All pages tagged &#39;datatables&#39;." href="https://laustep.github.io/stlahblog/tags/datatables.html">datatables</a>, <a title="All pages tagged &#39;javascript&#39;." href="https://laustep.github.io/stlahblog/tags/javascript.html">javascript</a>, <a title="All pages tagged &#39;shiny&#39;." href="https://laustep.github.io/stlahblog/tags/shiny.html">shiny</a>
    
</div>

<p>In this post, I show how to use the <a href="http://qtip2.com/">qTip2</a> JavaScript library to create some tooltips on the headers of a <code>DT</code> datatable in Shiny, displaying some information about the columns, such as summary statistics.</p>
<p>Firstly, we write a function returning some JavaScript code that creates some hidden <code>div</code> elements which will contain the contents of the tooltips. This function takes two arguments: <code>n</code>, the number of <code>div</code> elements to create (this will be the number of columns of the table), and <code>prefixID</code>; the i-th <code>div</code> will have the identifier <code>{prefixID}-{i}</code>. We also set a class to each <code>div</code>, namely <code>qtip-big</code>.</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode numberSource r numberLines"><code class="sourceCode r"><span id="cb1-1"><a href="#cb1-1"></a>createDiv &lt;-<span class="st"> </span><span class="cf">function</span>(n, prefixID){</span>
<span id="cb1-2"><a href="#cb1-2"></a>  <span class="kw">sprintf</span>(<span class="kw">paste</span>(</span>
<span id="cb1-3"><a href="#cb1-3"></a>    <span class="st">&quot;for(var i = 1; i &lt;= %d; i++){&quot;</span>,</span>
<span id="cb1-4"><a href="#cb1-4"></a>    <span class="st">&quot;  var div;&quot;</span>,</span>
<span id="cb1-5"><a href="#cb1-5"></a>    <span class="kw">sprintf</span>(<span class="st">&quot;  var id = &#39;%s-&#39; + i.toString();&quot;</span>, prefixID),</span>
<span id="cb1-6"><a href="#cb1-6"></a>    <span class="st">&quot;  if(document.getElementById(id) === null){&quot;</span>,</span>
<span id="cb1-7"><a href="#cb1-7"></a>    <span class="st">&quot;    div = document.createElement(&#39;div&#39;);&quot;</span>,</span>
<span id="cb1-8"><a href="#cb1-8"></a>    <span class="st">&quot;    div.setAttribute(&#39;id&#39;, id);&quot;</span>,</span>
<span id="cb1-9"><a href="#cb1-9"></a>    <span class="st">&quot;    div.setAttribute(&#39;class&#39;, &#39;qtip-big&#39;);&quot;</span>,</span>
<span id="cb1-10"><a href="#cb1-10"></a>    <span class="st">&quot;    div.style.display = &#39;none&#39;;&quot;</span>,</span>
<span id="cb1-11"><a href="#cb1-11"></a>    <span class="st">&quot;    document.body.appendChild(div);&quot;</span>,</span>
<span id="cb1-12"><a href="#cb1-12"></a>    <span class="st">&quot;  }&quot;</span>,</span>
<span id="cb1-13"><a href="#cb1-13"></a>    <span class="st">&quot;}&quot;</span>,</span>
<span id="cb1-14"><a href="#cb1-14"></a>    <span class="dt">sep =</span> <span class="st">&quot;</span><span class="ch">\n</span><span class="st">&quot;</span></span>
<span id="cb1-15"><a href="#cb1-15"></a>  ), n)</span>
<span id="cb1-16"><a href="#cb1-16"></a>}</span></code></pre></div>
<div class="sourceCode" id="cb2"><pre class="sourceCode r"><code class="sourceCode r"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true"></a><span class="kw">cat</span>(<span class="kw">createDiv</span>(<span class="dv">3</span>, <span class="st">&quot;TOOLTIP&quot;</span>))</span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true"></a><span class="co">## for(var i = 1; i &lt;= 3; i++){</span></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true"></a><span class="co">##   var div;</span></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true"></a><span class="co">##   var id = &#39;TOOLTIP-&#39; + i.toString();</span></span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true"></a><span class="co">##   if(document.getElementById(id) === null){</span></span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true"></a><span class="co">##     div = document.createElement(&#39;div&#39;);</span></span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true"></a><span class="co">##     div.setAttribute(&#39;id&#39;, id);</span></span>
<span id="cb2-8"><a href="#cb2-8" aria-hidden="true"></a><span class="co">##     div.setAttribute(&#39;class&#39;, &#39;qtip-big&#39;);</span></span>
<span id="cb2-9"><a href="#cb2-9" aria-hidden="true"></a><span class="co">##     div.style.display = &#39;none&#39;;</span></span>
<span id="cb2-10"><a href="#cb2-10" aria-hidden="true"></a><span class="co">##     document.body.appendChild(div);</span></span>
<span id="cb2-11"><a href="#cb2-11" aria-hidden="true"></a><span class="co">##   }</span></span>
<span id="cb2-12"><a href="#cb2-12" aria-hidden="true"></a><span class="co">## }</span></span></code></pre></div>
<p>Now we write a function returning some JavaScript code that writes the contents of the <code>div</code> elements. It takes as arguments <code>dat</code>, the dataframe for the table, <code>i</code>, the index of a column of <code>dat</code>, and <code>prefixID</code> as in the function <code>createDiv</code>. If the <code>i</code>-th column is numeric, we fill the <code>div</code> element with some summary statistics of this column, otherwise the information we provide in the <code>div</code> element is the number of levels of the contents of the column, an enumeration of the levels (at most three), and the number of missing values.</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode numberSource r numberLines"><code class="sourceCode r"><span id="cb3-1"><a href="#cb3-1"></a>fillDiv &lt;-<span class="st"> </span><span class="cf">function</span>(dat, i, prefixID){</span>
<span id="cb3-2"><a href="#cb3-2"></a>  x &lt;-<span class="st"> </span>dat[[i]]</span>
<span id="cb3-3"><a href="#cb3-3"></a>  <span class="cf">if</span>(<span class="kw">is.numeric</span>(x)){</span>
<span id="cb3-4"><a href="#cb3-4"></a>    <span class="kw">sprintf</span>(<span class="kw">paste</span>(</span>
<span id="cb3-5"><a href="#cb3-5"></a>      <span class="st">&quot;var div = document.getElementById(&#39;%s-%d&#39;);&quot;</span>,</span>
<span id="cb3-6"><a href="#cb3-6"></a>      <span class="st">&quot;var html = &#39;&lt;b&gt; Min: &lt;/b&gt; %s&lt;/br&gt;&#39;;&quot;</span>,</span>
<span id="cb3-7"><a href="#cb3-7"></a>      <span class="st">&quot;html = html + &#39;&lt;b&gt; Max: &lt;/b&gt; %s&lt;/br&gt;&#39;;&quot;</span>,</span>
<span id="cb3-8"><a href="#cb3-8"></a>      <span class="st">&quot;html = html + &#39;&lt;b&gt; Mean: &lt;/b&gt; %s&lt;/br&gt;&#39;;&quot;</span>,</span>
<span id="cb3-9"><a href="#cb3-9"></a>      <span class="st">&quot;html = html + &#39;&lt;b&gt; Std. dev.: &lt;/b&gt; %s&lt;/br&gt;&#39;;&quot;</span>,</span>
<span id="cb3-10"><a href="#cb3-10"></a>      <span class="st">&quot;html = html + &#39;&lt;b&gt; Missing values: &lt;/b&gt; %d&#39;;&quot;</span>,</span>
<span id="cb3-11"><a href="#cb3-11"></a>      <span class="st">&quot;div.innerHTML = html;&quot;</span>,</span>
<span id="cb3-12"><a href="#cb3-12"></a>      <span class="dt">sep =</span> <span class="st">&quot;</span><span class="ch">\n</span><span class="st">&quot;</span></span>
<span id="cb3-13"><a href="#cb3-13"></a>    ), </span>
<span id="cb3-14"><a href="#cb3-14"></a>    prefixID,</span>
<span id="cb3-15"><a href="#cb3-15"></a>    i, </span>
<span id="cb3-16"><a href="#cb3-16"></a>    <span class="kw">formatC</span>(<span class="kw">min</span>(x, <span class="dt">na.rm=</span><span class="ot">TRUE</span>)),</span>
<span id="cb3-17"><a href="#cb3-17"></a>    <span class="kw">formatC</span>(<span class="kw">max</span>(x, <span class="dt">na.rm=</span><span class="ot">TRUE</span>)),</span>
<span id="cb3-18"><a href="#cb3-18"></a>    <span class="kw">formatC</span>(<span class="kw">mean</span>(x, <span class="dt">na.rm=</span><span class="ot">TRUE</span>)),</span>
<span id="cb3-19"><a href="#cb3-19"></a>    <span class="kw">formatC</span>(<span class="kw">sd</span>(x, <span class="dt">na.rm=</span><span class="ot">TRUE</span>)),</span>
<span id="cb3-20"><a href="#cb3-20"></a>    <span class="kw">sum</span>(<span class="kw">is.na</span>(x)))</span>
<span id="cb3-21"><a href="#cb3-21"></a>  }<span class="cf">else</span>{</span>
<span id="cb3-22"><a href="#cb3-22"></a>    <span class="cf">if</span>(<span class="kw">is.factor</span>(x)) x &lt;-<span class="st"> </span><span class="kw">as.character</span>(x)</span>
<span id="cb3-23"><a href="#cb3-23"></a>    levels0 &lt;-<span class="st"> </span><span class="kw">sort</span>(<span class="kw">unique</span>(<span class="kw">na.omit</span>(x)))</span>
<span id="cb3-24"><a href="#cb3-24"></a>    nlevels &lt;-<span class="st"> </span><span class="kw">length</span>(levels0)</span>
<span id="cb3-25"><a href="#cb3-25"></a>    levels &lt;-<span class="st"> </span></span>
<span id="cb3-26"><a href="#cb3-26"></a><span class="st">      </span><span class="cf">if</span>(nlevels<span class="op">&gt;</span><span class="dv">3</span>) <span class="kw">c</span>(levels0[<span class="dv">1</span><span class="op">:</span><span class="dv">2</span>], levels0[nlevels]) <span class="cf">else</span> levels0</span>
<span id="cb3-27"><a href="#cb3-27"></a>    ncharMax &lt;-<span class="st"> </span><span class="dv">25</span></span>
<span id="cb3-28"><a href="#cb3-28"></a>    nchars &lt;-<span class="st"> </span><span class="kw">nchar</span>(levels)</span>
<span id="cb3-29"><a href="#cb3-29"></a>    <span class="cf">if</span>(<span class="dv">7</span><span class="op">+</span><span class="kw">sum</span>(nchars) <span class="op">&gt;</span><span class="st"> </span>ncharMax){</span>
<span id="cb3-30"><a href="#cb3-30"></a>      levels[<span class="dv">1</span>] &lt;-<span class="st"> </span><span class="kw">paste0</span>(<span class="st">&quot;&lt;br/&gt;&quot;</span>, levels[<span class="dv">1</span>])</span>
<span id="cb3-31"><a href="#cb3-31"></a>      <span class="cf">if</span>(nlevels <span class="op">&gt;=</span><span class="st"> </span><span class="dv">2</span> <span class="op">&amp;&amp;</span><span class="st"> </span><span class="kw">sum</span>(nchars) <span class="op">&gt;</span><span class="st"> </span>ncharMax){</span>
<span id="cb3-32"><a href="#cb3-32"></a>        levels[<span class="dv">2</span>] &lt;-<span class="st"> </span><span class="kw">paste0</span>(<span class="st">&quot;&lt;br/&gt;&quot;</span>, levels[<span class="dv">2</span>])</span>
<span id="cb3-33"><a href="#cb3-33"></a>        <span class="cf">if</span>(nlevels <span class="op">&gt;=</span><span class="st"> </span><span class="dv">3</span> <span class="op">&amp;&amp;</span><span class="st"> </span><span class="kw">sum</span>(nchars[<span class="dv">2</span><span class="op">:</span><span class="dv">3</span>]) <span class="op">&gt;</span><span class="st"> </span>ncharMax){</span>
<span id="cb3-34"><a href="#cb3-34"></a>          levels[<span class="dv">3</span>] &lt;-<span class="st"> </span><span class="kw">paste0</span>(<span class="st">&quot;&lt;br/&gt;&quot;</span>, levels[<span class="dv">3</span>])</span>
<span id="cb3-35"><a href="#cb3-35"></a>        }</span>
<span id="cb3-36"><a href="#cb3-36"></a>      }</span>
<span id="cb3-37"><a href="#cb3-37"></a>    }</span>
<span id="cb3-38"><a href="#cb3-38"></a>    levelsSummary &lt;-<span class="st"> </span><span class="kw">ifelse</span>(nlevels <span class="op">&gt;</span><span class="st"> </span><span class="dv">3</span>,</span>
<span id="cb3-39"><a href="#cb3-39"></a>                            <span class="kw">paste0</span>(<span class="kw">c</span>(levels[<span class="dv">1</span>],</span>
<span id="cb3-40"><a href="#cb3-40"></a>                                     <span class="kw">paste0</span>(levels[<span class="dv">2</span>], <span class="st">&quot;, ...&quot;</span>),</span>
<span id="cb3-41"><a href="#cb3-41"></a>                                     levels[<span class="dv">3</span>]),</span>
<span id="cb3-42"><a href="#cb3-42"></a>                                   <span class="dt">collapse =</span> <span class="st">&quot;, &quot;</span>),</span>
<span id="cb3-43"><a href="#cb3-43"></a>                            <span class="kw">paste0</span>(levels, <span class="dt">collapse =</span> <span class="st">&quot;, &quot;</span>))</span>
<span id="cb3-44"><a href="#cb3-44"></a>    <span class="kw">sprintf</span>(<span class="kw">paste</span>(</span>
<span id="cb3-45"><a href="#cb3-45"></a>      <span class="st">&quot;var div = document.getElementById(&#39;%s-%d&#39;);&quot;</span>,</span>
<span id="cb3-46"><a href="#cb3-46"></a>      <span class="st">&quot;var html = &#39;&lt;b&gt; Number of levels: &lt;/b&gt; %d&lt;/br&gt;&#39;;&quot;</span>,</span>
<span id="cb3-47"><a href="#cb3-47"></a>      <span class="kw">sprintf</span>(<span class="st">&quot;html = html + &#39;&lt;b&gt; Level%s: &lt;/b&gt; %%s&lt;/br&gt;&#39;&quot;</span>, </span>
<span id="cb3-48"><a href="#cb3-48"></a>              <span class="kw">ifelse</span>(nlevels<span class="op">==</span><span class="dv">1</span>, <span class="st">&quot;&quot;</span>, <span class="st">&quot;s&quot;</span>)),</span>
<span id="cb3-49"><a href="#cb3-49"></a>      <span class="st">&quot;html = html + &#39;&lt;b&gt; Missing values: &lt;/b&gt; %d&#39;&quot;</span>,</span>
<span id="cb3-50"><a href="#cb3-50"></a>      <span class="st">&quot;div.innerHTML = html;&quot;</span>,</span>
<span id="cb3-51"><a href="#cb3-51"></a>      <span class="dt">sep =</span> <span class="st">&quot;</span><span class="ch">\n</span><span class="st">&quot;</span></span>
<span id="cb3-52"><a href="#cb3-52"></a>    ),</span>
<span id="cb3-53"><a href="#cb3-53"></a>    prefixID,</span>
<span id="cb3-54"><a href="#cb3-54"></a>    i, </span>
<span id="cb3-55"><a href="#cb3-55"></a>    nlevels,</span>
<span id="cb3-56"><a href="#cb3-56"></a>    levelsSummary,</span>
<span id="cb3-57"><a href="#cb3-57"></a>    <span class="kw">sum</span>(<span class="kw">is.na</span>(x)))</span>
<span id="cb3-58"><a href="#cb3-58"></a>  }</span>
<span id="cb3-59"><a href="#cb3-59"></a>}</span></code></pre></div>
<div class="sourceCode" id="cb4"><pre class="sourceCode r"><code class="sourceCode r"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true"></a><span class="kw">cat</span>(<span class="kw">fillDiv</span>(iris, <span class="dv">1</span>, <span class="st">&quot;TOOLTIP&quot;</span>))</span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true"></a><span class="co">## var div = document.getElementById(&#39;TOOLTIP-1&#39;);</span></span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true"></a><span class="co">## var html = &#39;&lt;b&gt; Min: &lt;/b&gt; 4.3&lt;/br&gt;&#39;;</span></span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true"></a><span class="co">## html = html + &#39;&lt;b&gt; Max: &lt;/b&gt; 7.9&lt;/br&gt;&#39;;</span></span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true"></a><span class="co">## html = html + &#39;&lt;b&gt; Mean: &lt;/b&gt; 5.843&lt;/br&gt;&#39;;</span></span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true"></a><span class="co">## html = html + &#39;&lt;b&gt; Std. dev.: &lt;/b&gt; 0.8281&lt;/br&gt;&#39;;</span></span>
<span id="cb4-7"><a href="#cb4-7" aria-hidden="true"></a><span class="co">## html = html + &#39;&lt;b&gt; Missing values: &lt;/b&gt; 0&#39;;</span></span>
<span id="cb4-8"><a href="#cb4-8" aria-hidden="true"></a><span class="co">## div.innerHTML = html;</span></span>
<span id="cb4-9"><a href="#cb4-9" aria-hidden="true"></a><span class="kw">cat</span>(<span class="kw">fillDiv</span>(iris, <span class="dv">5</span>, <span class="st">&quot;TOOLTIP&quot;</span>))</span>
<span id="cb4-10"><a href="#cb4-10" aria-hidden="true"></a><span class="co">## var div = document.getElementById(&#39;TOOLTIP-5&#39;);</span></span>
<span id="cb4-11"><a href="#cb4-11" aria-hidden="true"></a><span class="co">## var html = &#39;&lt;b&gt; Number of levels: &lt;/b&gt; 3&lt;/br&gt;&#39;;</span></span>
<span id="cb4-12"><a href="#cb4-12" aria-hidden="true"></a><span class="co">## html = html + &#39;&lt;b&gt; Levels: &lt;/b&gt; &lt;br/&gt;setosa, versicolor, virginica&lt;/br&gt;&#39;</span></span>
<span id="cb4-13"><a href="#cb4-13" aria-hidden="true"></a><span class="co">## html = html + &#39;&lt;b&gt; Missing values: &lt;/b&gt; 0&#39;</span></span>
<span id="cb4-14"><a href="#cb4-14" aria-hidden="true"></a><span class="co">## div.innerHTML = html;</span></span></code></pre></div>
<p>Finally we write a function returning the JavaScript code of the <code>qTip</code> tooltips. Its arguments are <code>n</code>, the number of columns of the table, and <code>prefixID</code> as before.</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode numberSource r numberLines"><code class="sourceCode r"><span id="cb5-1"><a href="#cb5-1"></a>tooltips &lt;-<span class="st"> </span><span class="cf">function</span>(n, prefixID){</span>
<span id="cb5-2"><a href="#cb5-2"></a>  settings &lt;-<span class="st"> </span><span class="kw">sprintf</span>(<span class="kw">paste</span>(</span>
<span id="cb5-3"><a href="#cb5-3"></a>    <span class="st">&quot;{&quot;</span>,</span>
<span id="cb5-4"><a href="#cb5-4"></a>    <span class="st">&quot;  overwrite: true,&quot;</span>,</span>
<span id="cb5-5"><a href="#cb5-5"></a>    <span class="st">&quot;  content: {&quot;</span>,</span>
<span id="cb5-6"><a href="#cb5-6"></a>    <span class="kw">sprintf</span>(<span class="st">&quot;    text: $(&#39;#%s-%%s&#39;).clone()&quot;</span>, prefixID),</span>
<span id="cb5-7"><a href="#cb5-7"></a>    <span class="st">&quot;  },&quot;</span>,</span>
<span id="cb5-8"><a href="#cb5-8"></a>    <span class="st">&quot;  show: {&quot;</span>,</span>
<span id="cb5-9"><a href="#cb5-9"></a>    <span class="st">&quot;    ready: false&quot;</span>,</span>
<span id="cb5-10"><a href="#cb5-10"></a>    <span class="st">&quot;  },&quot;</span>,</span>
<span id="cb5-11"><a href="#cb5-11"></a>    <span class="st">&quot;  position: {&quot;</span>,</span>
<span id="cb5-12"><a href="#cb5-12"></a>    <span class="st">&quot;    my: &#39;bottom %%s&#39;,&quot;</span>,</span>
<span id="cb5-13"><a href="#cb5-13"></a>    <span class="st">&quot;    at: &#39;top center&#39;&quot;</span>,</span>
<span id="cb5-14"><a href="#cb5-14"></a>    <span class="st">&quot;  },&quot;</span>,</span>
<span id="cb5-15"><a href="#cb5-15"></a>    <span class="st">&quot;  style: {&quot;</span>,</span>
<span id="cb5-16"><a href="#cb5-16"></a>    <span class="st">&quot;    classes: &#39;qtip-youtube&#39;&quot;</span>,</span>
<span id="cb5-17"><a href="#cb5-17"></a>    <span class="st">&quot;  }&quot;</span>,</span>
<span id="cb5-18"><a href="#cb5-18"></a>    <span class="st">&quot;}&quot;</span>,</span>
<span id="cb5-19"><a href="#cb5-19"></a>    <span class="dt">sep =</span> <span class="st">&quot;</span><span class="ch">\n</span><span class="st">&quot;</span></span>
<span id="cb5-20"><a href="#cb5-20"></a>  ), <span class="dv">1</span><span class="op">:</span>n)</span>
<span id="cb5-21"><a href="#cb5-21"></a>  settings &lt;-<span class="st"> </span><span class="kw">sprintf</span>(settings, <span class="kw">ifelse</span>(<span class="dv">1</span><span class="op">:</span>n <span class="op">&gt;</span><span class="st"> </span>n<span class="op">/</span><span class="dv">2</span>, <span class="st">&quot;right&quot;</span>, <span class="st">&quot;left&quot;</span>))</span>
<span id="cb5-22"><a href="#cb5-22"></a>  <span class="kw">sprintf</span>(<span class="st">&quot;var tooltips = [%s];&quot;</span>, <span class="kw">paste0</span>(settings, <span class="dt">collapse=</span><span class="st">&quot;,&quot;</span>))</span>
<span id="cb5-23"><a href="#cb5-23"></a>}</span></code></pre></div>
<div class="sourceCode" id="cb6"><pre class="sourceCode r"><code class="sourceCode r"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true"></a><span class="kw">cat</span>(<span class="kw">tooltips</span>(<span class="dv">2</span>, <span class="st">&quot;TOOLTIP&quot;</span>))</span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true"></a><span class="co">## var tooltips = [{</span></span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true"></a><span class="co">##   overwrite: true,</span></span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true"></a><span class="co">##   content: {</span></span>
<span id="cb6-5"><a href="#cb6-5" aria-hidden="true"></a><span class="co">##     text: $(&#39;#TOOLTIP-1&#39;).clone()</span></span>
<span id="cb6-6"><a href="#cb6-6" aria-hidden="true"></a><span class="co">##   },</span></span>
<span id="cb6-7"><a href="#cb6-7" aria-hidden="true"></a><span class="co">##   show: {</span></span>
<span id="cb6-8"><a href="#cb6-8" aria-hidden="true"></a><span class="co">##     ready: false</span></span>
<span id="cb6-9"><a href="#cb6-9" aria-hidden="true"></a><span class="co">##   },</span></span>
<span id="cb6-10"><a href="#cb6-10" aria-hidden="true"></a><span class="co">##   position: {</span></span>
<span id="cb6-11"><a href="#cb6-11" aria-hidden="true"></a><span class="co">##     my: &#39;bottom left&#39;,</span></span>
<span id="cb6-12"><a href="#cb6-12" aria-hidden="true"></a><span class="co">##     at: &#39;top center&#39;</span></span>
<span id="cb6-13"><a href="#cb6-13" aria-hidden="true"></a><span class="co">##   },</span></span>
<span id="cb6-14"><a href="#cb6-14" aria-hidden="true"></a><span class="co">##   style: {</span></span>
<span id="cb6-15"><a href="#cb6-15" aria-hidden="true"></a><span class="co">##     classes: &#39;qtip-youtube&#39;</span></span>
<span id="cb6-16"><a href="#cb6-16" aria-hidden="true"></a><span class="co">##   }</span></span>
<span id="cb6-17"><a href="#cb6-17" aria-hidden="true"></a><span class="co">## },{</span></span>
<span id="cb6-18"><a href="#cb6-18" aria-hidden="true"></a><span class="co">##   overwrite: true,</span></span>
<span id="cb6-19"><a href="#cb6-19" aria-hidden="true"></a><span class="co">##   content: {</span></span>
<span id="cb6-20"><a href="#cb6-20" aria-hidden="true"></a><span class="co">##     text: $(&#39;#TOOLTIP-2&#39;).clone()</span></span>
<span id="cb6-21"><a href="#cb6-21" aria-hidden="true"></a><span class="co">##   },</span></span>
<span id="cb6-22"><a href="#cb6-22" aria-hidden="true"></a><span class="co">##   show: {</span></span>
<span id="cb6-23"><a href="#cb6-23" aria-hidden="true"></a><span class="co">##     ready: false</span></span>
<span id="cb6-24"><a href="#cb6-24" aria-hidden="true"></a><span class="co">##   },</span></span>
<span id="cb6-25"><a href="#cb6-25" aria-hidden="true"></a><span class="co">##   position: {</span></span>
<span id="cb6-26"><a href="#cb6-26" aria-hidden="true"></a><span class="co">##     my: &#39;bottom right&#39;,</span></span>
<span id="cb6-27"><a href="#cb6-27" aria-hidden="true"></a><span class="co">##     at: &#39;top center&#39;</span></span>
<span id="cb6-28"><a href="#cb6-28" aria-hidden="true"></a><span class="co">##   },</span></span>
<span id="cb6-29"><a href="#cb6-29" aria-hidden="true"></a><span class="co">##   style: {</span></span>
<span id="cb6-30"><a href="#cb6-30" aria-hidden="true"></a><span class="co">##     classes: &#39;qtip-youtube&#39;</span></span>
<span id="cb6-31"><a href="#cb6-31" aria-hidden="true"></a><span class="co">##   }</span></span>
<span id="cb6-32"><a href="#cb6-32" aria-hidden="true"></a><span class="co">## }];</span></span></code></pre></div>
<p>Now we are ready to write the Shiny app. Put the files <strong>jquery.qtip.min.css</strong> and <strong>jquery.qtip.min.js</strong> in the <strong>www</strong> subfolder. We use the <code>shinyjs</code> package to run the JavaScript code with the function <code>runjs</code>.</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode numberSource r numberLines"><code class="sourceCode r"><span id="cb7-1"><a href="#cb7-1"></a><span class="kw">library</span>(shiny)</span>
<span id="cb7-2"><a href="#cb7-2"></a><span class="kw">library</span>(shinyjs)</span>
<span id="cb7-3"><a href="#cb7-3"></a><span class="kw">library</span>(DT)</span>
<span id="cb7-4"><a href="#cb7-4"></a></span>
<span id="cb7-5"><a href="#cb7-5"></a>CSS &lt;-<span class="st"> &quot;</span></span>
<span id="cb7-6"><a href="#cb7-6"></a><span class="st">.qtip-big { </span></span>
<span id="cb7-7"><a href="#cb7-7"></a><span class="st">  font-size: 15px;</span></span>
<span id="cb7-8"><a href="#cb7-8"></a><span class="st">  line-height: 18px;</span></span>
<span id="cb7-9"><a href="#cb7-9"></a><span class="st">  white-space: nowrap;</span></span>
<span id="cb7-10"><a href="#cb7-10"></a><span class="st">  word-spacing: 1px;</span></span>
<span id="cb7-11"><a href="#cb7-11"></a><span class="st">}</span></span>
<span id="cb7-12"><a href="#cb7-12"></a><span class="st">&quot;</span></span>
<span id="cb7-13"><a href="#cb7-13"></a></span>
<span id="cb7-14"><a href="#cb7-14"></a>ui &lt;-<span class="st"> </span><span class="kw">fluidPage</span>(</span>
<span id="cb7-15"><a href="#cb7-15"></a>  tags<span class="op">$</span><span class="kw">head</span>(</span>
<span id="cb7-16"><a href="#cb7-16"></a>    tags<span class="op">$</span><span class="kw">link</span>(<span class="dt">rel =</span> <span class="st">&quot;stylesheet&quot;</span>, <span class="dt">href =</span> <span class="st">&quot;jquery.qtip.min.css&quot;</span>),</span>
<span id="cb7-17"><a href="#cb7-17"></a>    tags<span class="op">$</span><span class="kw">script</span>(<span class="dt">src =</span> <span class="st">&quot;jquery.qtip.min.js&quot;</span>),</span>
<span id="cb7-18"><a href="#cb7-18"></a>    tags<span class="op">$</span><span class="kw">style</span>(CSS)</span>
<span id="cb7-19"><a href="#cb7-19"></a>  ),</span>
<span id="cb7-20"><a href="#cb7-20"></a>  <span class="kw">useShinyjs</span>(),</span>
<span id="cb7-21"><a href="#cb7-21"></a>  <span class="kw">br</span>(), <span class="kw">br</span>(), <span class="kw">br</span>(), <span class="kw">br</span>(), <span class="kw">br</span>(), </span>
<span id="cb7-22"><a href="#cb7-22"></a>  <span class="kw">DTOutput</span>(<span class="st">&quot;dtable&quot;</span>)</span>
<span id="cb7-23"><a href="#cb7-23"></a>)</span>
<span id="cb7-24"><a href="#cb7-24"></a></span>
<span id="cb7-25"><a href="#cb7-25"></a>server &lt;-<span class="st"> </span><span class="cf">function</span>(input, output, session){</span>
<span id="cb7-26"><a href="#cb7-26"></a>  </span>
<span id="cb7-27"><a href="#cb7-27"></a>  output[[<span class="st">&quot;dtable&quot;</span>]] &lt;-<span class="st"> </span><span class="kw">renderDT</span>({</span>
<span id="cb7-28"><a href="#cb7-28"></a>    </span>
<span id="cb7-29"><a href="#cb7-29"></a>    dat &lt;-<span class="st"> </span>iris</span>
<span id="cb7-30"><a href="#cb7-30"></a>    </span>
<span id="cb7-31"><a href="#cb7-31"></a>    <span class="cf">for</span>(i <span class="cf">in</span> <span class="dv">1</span><span class="op">:</span><span class="kw">ncol</span>(dat)){</span>
<span id="cb7-32"><a href="#cb7-32"></a>      <span class="kw">runjs</span>(<span class="kw">createDiv</span>(i, <span class="st">&quot;TOOLTIP&quot;</span>))</span>
<span id="cb7-33"><a href="#cb7-33"></a>      <span class="kw">runjs</span>(<span class="kw">fillDiv</span>(dat, i, <span class="st">&quot;TOOLTIP&quot;</span>))</span>
<span id="cb7-34"><a href="#cb7-34"></a>    }</span>
<span id="cb7-35"><a href="#cb7-35"></a>    </span>
<span id="cb7-36"><a href="#cb7-36"></a>    headerCallback &lt;-<span class="st"> </span><span class="kw">c</span>(</span>
<span id="cb7-37"><a href="#cb7-37"></a>      <span class="st">&quot;function(thead, data, start, end, display){&quot;</span>,</span>
<span id="cb7-38"><a href="#cb7-38"></a>      <span class="st">&quot;  var ncols = data[0].length;&quot;</span>,</span>
<span id="cb7-39"><a href="#cb7-39"></a>      <span class="kw">tooltips</span>(<span class="kw">ncol</span>(dat), <span class="st">&quot;TOOLTIP&quot;</span>),</span>
<span id="cb7-40"><a href="#cb7-40"></a>      <span class="st">&quot;  for(var i = 1; i &lt; ncols; i++){&quot;</span>,</span>
<span id="cb7-41"><a href="#cb7-41"></a>      <span class="st">&quot;    $(&#39;th:eq(&#39; + i + &#39;)&#39;, thead).qtip(tooltips[i-1]);&quot;</span>, </span>
<span id="cb7-42"><a href="#cb7-42"></a>      <span class="st">&quot;  }&quot;</span>,</span>
<span id="cb7-43"><a href="#cb7-43"></a>      <span class="st">&quot;}&quot;</span></span>
<span id="cb7-44"><a href="#cb7-44"></a>    )</span>
<span id="cb7-45"><a href="#cb7-45"></a>    </span>
<span id="cb7-46"><a href="#cb7-46"></a>    <span class="kw">datatable</span>(</span>
<span id="cb7-47"><a href="#cb7-47"></a>      dat, </span>
<span id="cb7-48"><a href="#cb7-48"></a>      <span class="dt">options =</span> <span class="kw">list</span>(</span>
<span id="cb7-49"><a href="#cb7-49"></a>        <span class="dt">headerCallback =</span> <span class="kw">JS</span>(headerCallback),</span>
<span id="cb7-50"><a href="#cb7-50"></a>        <span class="dt">columnDefs =</span> <span class="kw">list</span>(</span>
<span id="cb7-51"><a href="#cb7-51"></a>          <span class="kw">list</span>(<span class="dt">className =</span> <span class="st">&quot;dt-center&quot;</span>, <span class="dt">targets =</span> <span class="st">&quot;_all&quot;</span>)</span>
<span id="cb7-52"><a href="#cb7-52"></a>        )</span>
<span id="cb7-53"><a href="#cb7-53"></a>      )</span>
<span id="cb7-54"><a href="#cb7-54"></a>    )</span>
<span id="cb7-55"><a href="#cb7-55"></a>  })</span>
<span id="cb7-56"><a href="#cb7-56"></a>  </span>
<span id="cb7-57"><a href="#cb7-57"></a>}</span>
<span id="cb7-58"><a href="#cb7-58"></a></span>
<span id="cb7-59"><a href="#cb7-59"></a><span class="kw">shinyApp</span>(ui, server)</span></code></pre></div>
<p><img src="https://laustep.github.io/stlahblog/posts/figures/DTqTip.gif" /></p>

        </div>


        <div id="footer">
          Site proudly generated by
          <a href="http://jaspervdj.be/hakyll">Hakyll</a>
        </div>

      </div>

    </div>


  </div>

]]></description>
    <pubDate>Sun, 16 Feb 2020 00:00:00 UT</pubDate>
    <guid>https://laustep.github.io/stlahblog/posts/DTqTips.html</guid>
    <dc:creator>Stéphane Laurent</dc:creator>
    <category>R</category>
</item>


    </channel>
</rss>