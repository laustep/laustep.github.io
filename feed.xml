<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/" version="2.0">
  <channel>
    <title>Saturn Elephant</title>
    <link>https://laustep.github.io/stlahblog</link>
    <description><![CDATA[A blog about R and more.]]></description>
    <atom:link href="https://laustep.github.io/stlahblog/feed.xml" rel="self" type="application/rss+xml"/>
    <lastBuildDate>Thu, 22 Oct 2020 00:00:00 UT</lastBuildDate>
    <item>
      <title>The Beta distribution of the third kind (or generalised Beta prime)</title>
      <link>https://laustep.github.io/stlahblog/posts/Beta3.html</link>
      <description><![CDATA[<div class="container-fluid">
  <div class="main col-sm-12">
    <div class="content">
      <ul>
        <li>
          <a href="#preliminaries-the-scaled-beta-prime-distribution"
            >Preliminaries: the (scaled) Beta prime distribution</a
          >
        </li>
        <li>
          <a href="#beta-distribution-of-the-third-kind"
            >Beta distribution of the third kind</a
          >
        </li>
        <li>
          <a href="#update-2019-09-05-generalised-beta-distribution"
            >Update 2019-09-05: generalised Beta distribution</a
          >
        </li>
        <li>
          <a href="#cumulative-distribution-function"
            >Cumulative distribution function</a
          >
        </li>
        <li>
          <a href="#sampling-the-beta-distribution-of-the-third-kind"
            >Sampling the Beta distribution of the third kind</a
          >
        </li>
        <li>
          <a href="#application-to-the-bayesian-binomial-model"
            >Application to the Bayesian binomial model</a
          >
        </li>
        <li>
          <a href="#application-to-the-bayesian-two-poisson-samples-model"
            >Application to the Bayesian “two Poisson samples” model</a
          >
        </li>
      </ul>
      <p>
        We present the family of so-called
        <em>Beta distributions of the third kind</em>. In the context of
        Bayesian statistics, it is a conjugate family of prior distributions on
        the odds parameter of the binomial model. This distribution is known,
        but nobody provided a way to sample from it. We show how one can sample
        from this distribution in R.
      </p>
      <h1 id="preliminaries-the-scaled-beta-prime-distribution">
        Preliminaries: the (scaled) Beta prime distribution
      </h1>
      <p>
        The Beta distribution of the third kind generalizes the Beta
        distribution of the second kind, also known under the name
        <em>Beta prime distribution</em>.
      </p>
      <p>
        The <em>Beta prime distribution</em>
        <span class="math inline">\(\mathcal{B}'(c,d,\lambda)\)</span> is the
        distribution of the random variable
        <span class="math inline">\(\lambda\frac{U}{1-U}\)</span> where
        <span class="math inline">\(U \sim \mathcal{B}(c,d)\)</span>.
      </p>
      <p>
        Its density function at
        <span class="math inline">\(x \geqslant 0\)</span> is
        <span class="math display"
          >\[ \frac{1}{\lambda^c B(c,d)}
          \frac{x^{c-1}}{\left(1+\frac{x}{\lambda}\right)^{c+d}}. \]</span
        >
        Usually the definition does not include the scale parameter
        <span class="math inline">\(\lambda\)</span> (that is, it is usually
        defined for <span class="math inline">\(\lambda=1\)</span> only).
      </p>
      <p>
        It is easy to implement a sampler for this distribution, the density
        function and the cumulative density function:
      </p>
      <div class="sourceCode" id="cb1">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb1-1">rbetaprime &lt;-<span class="st"> </span><span class="cf">function</span>(n, c, d, <span class="dt">lambda =</span> <span class="dv">1</span>){</span>
<span id="cb1-2">  <span class="kw">stopifnot</span>(lambda <span class="op">&gt;</span><span class="st"> </span><span class="dv">0</span>)</span>
<span id="cb1-3">  u &lt;-<span class="st"> </span><span class="kw">rbeta</span>(n, c, d)</span>
<span id="cb1-4">  lambda <span class="op">*</span><span class="st"> </span>u<span class="op">/</span>(<span class="dv">1</span><span class="op">-</span>u)</span>
<span id="cb1-5">}</span>
<span id="cb1-6">dbetaprime &lt;-<span class="st"> </span><span class="cf">function</span>(x, c, d, <span class="dt">lambda =</span> <span class="dv">1</span>){</span>
<span id="cb1-7">  <span class="kw">stopifnot</span>(lambda <span class="op">&gt;</span><span class="st"> </span><span class="dv">0</span>)</span>
<span id="cb1-8">  lambda<span class="op">/</span>(lambda<span class="op">+</span>x)<span class="op">^</span><span class="dv">2</span> <span class="op">*</span><span class="st"> </span><span class="kw">dbeta</span>(x<span class="op">/</span>lambda<span class="op">/</span>(<span class="dv">1</span><span class="op">+</span>x<span class="op">/</span>lambda), c, d)</span>
<span id="cb1-9">}</span>
<span id="cb1-10">pbetaprime &lt;-<span class="st"> </span><span class="cf">function</span>(q, c, d, lambda){</span>
<span id="cb1-11">  <span class="kw">stopifnot</span>(lambda <span class="op">&gt;</span><span class="st"> </span><span class="dv">0</span>)</span>
<span id="cb1-12">  <span class="kw">pbeta</span>(q<span class="op">/</span>lambda<span class="op">/</span>(<span class="dv">1</span><span class="op">+</span>q<span class="op">/</span>lambda), c, d)</span>
<span id="cb1-13">}</span></code></pre>
      </div>
      <h1 id="beta-distribution-of-the-third-kind">
        Beta distribution of the third kind
      </h1>
      <p>
        The <em>Beta distribution of the third kind</em>
        <span class="math inline">\(\mathcal{B}_3\)</span> was firstly
        introduced (as far as I know) in the paper
        <em>Some Poisson mixtures with a hyperscale parameter</em>, written by
        myself.
      </p>
      <p>
        For parameters <span class="math inline">\(c&gt;0\)</span>,
        <span class="math inline">\(d&gt;0\)</span>,
        <span class="math inline">\(\kappa \in \mathbb{R}\)</span>,
        <span class="math inline">\(\tau&gt;0\)</span>, the density function of
        <span class="math inline">\(\mathcal{B}_3(c,d,\kappa,\tau)\)</span> is
        <span class="math display"
          >\[ f(\phi) = \frac{1} {B(c,d){}_2\!F_1\left(c, c+d-\kappa, c+d; 1 -
          \frac{1}{\tau}\right)} \frac{\phi^{c-1}(1+\phi)^{-\kappa}}
          {\left(1+\frac{\phi}{\tau}\right)^{c+d-\kappa}}, \quad \phi \geqslant
          0. \]</span
        >
        Thus, for <span class="math inline">\(\kappa=0\)</span>, the
        <span class="math inline">\(\mathcal{B}_3(c,d,\kappa,\tau)\)</span>
        distribution equals
        <span class="math inline">\(\mathcal{B}'(c,d,\tau)\)</span>, and for
        <span class="math inline">\(\kappa = c+d\)</span> or
        <span class="math inline">\(\tau=1\)</span>, it equals
        <span class="math inline">\(\mathcal{B}'(c,d,1)\)</span>. Note that in
        general, <span class="math inline">\(\tau\)</span> is not a scale
        parameter.
      </p>
      <p>Let’s write a R function computing this density:</p>
      <div class="sourceCode" id="cb2">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb2-1"><span class="kw">library</span>(gsl)</span>
<span id="cb2-2">Gauss2F1 &lt;-<span class="st"> </span><span class="cf">function</span>(a,b,c,x){ </span>
<span id="cb2-3">  <span class="cf">if</span>(x<span class="op">&gt;=</span><span class="dv">0</span> <span class="op">&amp;&amp;</span><span class="st"> </span>x<span class="op">&lt;</span><span class="dv">1</span>){ <span class="co"># hyperg_2F1 works fine in this situation</span></span>
<span id="cb2-4">    <span class="kw">hyperg_2F1</span>(a, b, c, x)</span>
<span id="cb2-5">  }<span class="cf">else</span>{ <span class="co"># transform to come down to the first situation</span></span>
<span id="cb2-6">    <span class="kw">hyperg_2F1</span>(c<span class="op">-</span>a, b, c, <span class="dv">1-1</span><span class="op">/</span>(<span class="dv">1</span><span class="op">-</span>x)) <span class="op">/</span><span class="st"> </span>(<span class="dv">1</span><span class="op">-</span>x)<span class="op">^</span>b</span>
<span id="cb2-7">  }</span>
<span id="cb2-8">}</span>
<span id="cb2-9">dB3 &lt;-<span class="st"> </span><span class="cf">function</span>(x, c, d, kappa, tau){</span>
<span id="cb2-10">  <span class="kw">stopifnot</span>(c <span class="op">&gt;</span><span class="st"> </span><span class="dv">0</span>, d <span class="op">&gt;</span><span class="st"> </span><span class="dv">0</span>, tau <span class="op">&gt;</span><span class="st"> </span><span class="dv">0</span>)</span>
<span id="cb2-11">  <span class="cf">if</span>(kappa <span class="op">==</span><span class="st"> </span><span class="dv">0</span>){</span>
<span id="cb2-12">    <span class="kw">dbetaprime</span>(x, c, d, tau)</span>
<span id="cb2-13">  }<span class="cf">else</span> <span class="cf">if</span>(kappa <span class="op">==</span><span class="st"> </span>c<span class="op">+</span>d){</span>
<span id="cb2-14">    <span class="kw">dbetaprime</span>(x, c, d, <span class="dv">1</span>)</span>
<span id="cb2-15">  }<span class="cf">else</span>{</span>
<span id="cb2-16">    <span class="dv">1</span><span class="op">/</span><span class="kw">beta</span>(c,d) <span class="op">*</span><span class="st"> </span>x<span class="op">^</span>(c<span class="dv">-1</span>)<span class="op">*</span>(<span class="dv">1</span><span class="op">+</span>x)<span class="op">^</span>(<span class="op">-</span>kappa)<span class="op">/</span>(<span class="dv">1</span><span class="op">+</span>x<span class="op">/</span>tau)<span class="op">^</span>(c<span class="op">+</span>d<span class="op">-</span>kappa) <span class="op">/</span><span class="st"> </span></span>
<span id="cb2-17"><span class="st">      </span><span class="kw">Gauss2F1</span>(c, c<span class="op">+</span>d<span class="op">-</span>kappa, c<span class="op">+</span>d, <span class="dv">1-1</span><span class="op">/</span>tau)</span>
<span id="cb2-18">  }</span>
<span id="cb2-19">}</span></code></pre>
      </div>
      <p>
        This distribution is related to the
        <em>four-parameter generalized Beta distribution</em> introduced by Chen
        &amp; Novick in the paper
        <em
          >Bayesian analysis for binomial models with generalized beta prior
          distributions</em
        >
        (1984); this distribution takes its value in
        <span class="math inline">\([0,1]\)</span>. They are related by an
        elementary transformation:
        <span class="math display"
          >\[ \Theta \sim GB4(c, d, \kappa, \tau) \quad \iff\quad
          \frac{\Theta}{1-\Theta} \sim \mathcal{B}_3\left(c, d, c+d-\kappa,
          \frac{1}{\tau}\right). \]</span
        >
      </p>
      <h1 id="update-2019-09-05-generalised-beta-distribution">
        Update 2019-09-05: generalised Beta distribution
      </h1>
      <p>
        I’ve just discovered that the
        <span class="math inline">\(GB4\)</span> distribution appears in the
        paper
        <em
          >On Kummer’s distributions of type two and generalized Beta
          distributions</em
        >
        written by Hamza &amp; Vallois. It is named
        <em>generalised Beta distribution</em> in this paper, it is denoted by
        <span class="math inline">\(\beta_\delta(a,b,c)\)</span> and its density
        function at <span class="math inline">\(u \in [0,1]\)</span> is given by
        <span class="math display"
          >\[ \frac{1}{\beta(a,b){}_2\!F_1(-c,a;a+b;1-\delta)}
          u^{a-1}(1-u)^{b-1}\bigl(1+(\delta-1)u\bigr)^c \]</span
        >
        for <span class="math inline">\(a,b,\delta&gt;0\)</span> and
        <span class="math inline">\(c \in \mathbb{R}\)</span>.
      </p>
      <p>
        We have the following relation: if
        <span class="math inline"
          >\(\Phi \sim \mathcal{B}_3(c, d, \kappa, \tau)\)</span
        >, then
        <span class="math display"
          >\[ \frac{\Phi}{1+\Phi} \sim \beta_{\frac{1}{\tau}}(c, d, \kappa-c-d).
          \]</span
        >
      </p>
      <p>
        So, maybe a better name for
        <span class="math inline">\(\mathcal{B}_3\)</span> would be
        <em>generalised Beta prime distribution</em>.
      </p>
      <h1 id="cumulative-distribution-function">
        Cumulative distribution function
      </h1>
      <p>
        The cumulative distribution function of
        <span class="math inline">\(\mathcal{B}_3\)</span> involves the
        <em>Appell hypergeometric function</em>
        <span class="math inline">\(F_1\)</span>. A Fortran implementation of
        this function is available in the R package <code>appell</code>. This
        package has been removed from CRAN, but you can still install it. If
        <span class="math inline"
          >\(\Phi \sim \mathcal{B}_3(c,d,\kappa,\tau)\)</span
        >, then, for <span class="math inline">\(q \geqslant 0\)</span>,
        <span class="math display"
          >\[ \Pr(\Phi \leqslant q) = \frac{q^c F_1\left(c; \kappa, c+d-\kappa;
          c+1; -q, -\frac{q}{\tau}\right)} {cB(c,d){}_2\!F_1\left(c, c+d-\kappa,
          c+d; 1 - \frac{1}{\tau}\right)}. \]</span
        >
        Here is a R implementation. I found that it works well with the option
        <code>userflag = 0</code> of the <code>appellf1</code> function.
      </p>
      <div class="sourceCode" id="cb3">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb3-1">pB3 &lt;-<span class="st"> </span><span class="cf">function</span>(q, c, d, kappa, tau, <span class="dt">userflag =</span> <span class="dv">0</span>){</span>
<span id="cb3-2">  <span class="kw">stopifnot</span>(c <span class="op">&gt;</span><span class="st"> </span><span class="dv">0</span>, d <span class="op">&gt;</span><span class="st"> </span><span class="dv">0</span>, tau <span class="op">&gt;</span><span class="st"> </span><span class="dv">0</span>)</span>
<span id="cb3-3">  <span class="cf">if</span>(kappa <span class="op">==</span><span class="st"> </span><span class="dv">0</span>){</span>
<span id="cb3-4">    <span class="kw">pbetaprime</span>(q, c, d, tau)</span>
<span id="cb3-5">  }<span class="cf">else</span> <span class="cf">if</span>(kappa <span class="op">==</span><span class="st"> </span>c<span class="op">+</span>d){</span>
<span id="cb3-6">    <span class="kw">pbetaprime</span>(q, c, d, <span class="dv">1</span>)</span>
<span id="cb3-7">  }<span class="cf">else</span>{</span>
<span id="cb3-8">    C &lt;-<span class="st"> </span><span class="kw">beta</span>(c,d) <span class="op">*</span><span class="st"> </span><span class="kw">Gauss2F1</span>(c, c<span class="op">+</span>d<span class="op">-</span>kappa, c<span class="op">+</span>d, <span class="dv">1-1</span><span class="op">/</span>tau)</span>
<span id="cb3-9">    Appell &lt;-<span class="st"> </span></span>
<span id="cb3-10"><span class="st">      </span>appell<span class="op">::</span><span class="kw">appellf1</span>(c, kappa, c<span class="op">+</span>d<span class="op">-</span>kappa, c<span class="op">+</span><span class="dv">1</span>, <span class="op">-</span>q, <span class="op">-</span>q<span class="op">/</span>tau, </span>
<span id="cb3-11">                       <span class="dt">userflag =</span> userflag)</span>
<span id="cb3-12">    q<span class="op">^</span>c<span class="op">/</span>c <span class="op">*</span><span class="st"> </span><span class="kw">Re</span>(Appell<span class="op">$</span>val) <span class="op">/</span><span class="st"> </span>C</span>
<span id="cb3-13">  }</span>
<span id="cb3-14">}</span></code></pre>
      </div>
      <h1 id="sampling-the-beta-distribution-of-the-third-kind">
        Sampling the Beta distribution of the third kind
      </h1>
      <p>
        It is not very easy to sample the
        <span class="math inline">\(\mathcal{B}_3\)</span> distribution. In her
        <a
          href="https://savoirs.usherbrooke.ca/bitstream/handle/11143/9640/Chabot_Myriam_MSc_2016.pdf"
          >master thesis</a
        >, Myriam Chabot proved that it can be represented as a discrete mixture
        of <span class="math inline">\(\mathcal{B}_2\)</span> distributions, and
        we will use this result.
      </p>
      <p>This result is the following one.</p>
      <ul>
        <li>
          <p>
            For <span class="math inline">\(\tau &lt; 1\)</span>, let
            <span class="math inline">\(K\)</span> be a random variable on
            <span class="math inline">\(\mathbb{N}\)</span> whose probability
            mass at <span class="math inline">\(k\in\mathbb{N}\)</span> is given
            by
            <span class="math display"
              >\[ \frac{1}{{}_2\!F_1(d, c+d-\kappa, c+d, 1-\tau)}
              \frac{(1-\tau)^k}{k!} \frac{{(c+d-\kappa)}_k{(d)}_k}{{(c+d)}_k}
              \]</span
            >
            and let <span class="math inline">\(\Phi\)</span> be a random
            variable such that
            <span class="math display"
              >\[ (\Phi \mid K=k) \sim \mathcal{B}'(c, d+k, 1). \]</span
            >
            Then
            <span class="math inline"
              >\(\Phi \sim \mathcal{B}_3(c,d,\kappa,\tau)\)</span
            >.
          </p>
        </li>
        <li>
          <p>
            For <span class="math inline">\(\tau &gt; 1\)</span>, let
            <span class="math inline">\(K\)</span> be a random variable on
            <span class="math inline">\(\mathbb{N}\)</span> whose probability
            mass at <span class="math inline">\(k\in\mathbb{N}\)</span> is given
            by
            <span class="math display"
              >\[ \frac{1}{{}_2\!F_1\left(c, c+d-\kappa, c+d,
              1-\frac{1}{\tau}\right)}
              \frac{\left(1-\frac{1}{\tau}\right)^k}{k!}
              \frac{{(c+d-\kappa)}_k{(c)}_k}{{(c+d)}_k} \]</span
            >
            and let <span class="math inline">\(\Phi\)</span> be a random
            variable such that
            <span class="math display"
              >\[ (\Phi \mid K=k) \sim \mathcal{B}'(c+k, d, 1). \]</span
            >
            Then
            <span class="math inline"
              >\(\Phi \sim \mathcal{B}_3(c,d,\kappa,\tau)\)</span
            >.
          </p>
        </li>
      </ul>
      <p>
        So we can sample
        <span class="math inline">\(\mathcal{B}_3(c,d,\kappa,\tau)\)</span> if
        we are able to sample these discrete distributions. To do so, we use the
        <code>Runuran</code> package.
      </p>
      <div class="sourceCode" id="cb4">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb4-1"><span class="kw">library</span>(Runuran)</span>
<span id="cb4-2">pmf_unnormalized &lt;-<span class="st"> </span><span class="cf">function</span>(k, c, d, kappa, tau){</span>
<span id="cb4-3">  out &lt;-<span class="st"> </span><span class="kw">numeric</span>(<span class="kw">length</span>(k))</span>
<span id="cb4-4">  positive &lt;-<span class="st"> </span>k <span class="op">&gt;=</span><span class="st"> </span><span class="dv">0</span></span>
<span id="cb4-5">  k &lt;-<span class="st"> </span>k[positive]</span>
<span id="cb4-6">  out[positive] &lt;-<span class="st"> </span></span>
<span id="cb4-7"><span class="st">    </span><span class="cf">if</span>(tau <span class="op">&lt;</span><span class="st"> </span><span class="dv">1</span>){</span>
<span id="cb4-8">      <span class="kw">exp</span>(k<span class="op">*</span><span class="kw">log</span>(<span class="dv">1</span><span class="op">-</span>tau) <span class="op">-</span><span class="st"> </span><span class="kw">lfactorial</span>(k) <span class="op">+</span><span class="st"> </span></span>
<span id="cb4-9"><span class="st">            </span><span class="kw">lnpoch</span>(c<span class="op">+</span>d<span class="op">-</span>kappa,k) <span class="op">+</span><span class="st"> </span><span class="kw">lnpoch</span>(d,k) <span class="op">-</span><span class="st"> </span><span class="kw">lnpoch</span>(c<span class="op">+</span>d,k)) </span>
<span id="cb4-10">    }<span class="cf">else</span>{</span>
<span id="cb4-11">      <span class="kw">exp</span>(k<span class="op">*</span><span class="kw">log</span>(<span class="dv">1-1</span><span class="op">/</span>tau) <span class="op">-</span><span class="st"> </span><span class="kw">lfactorial</span>(k) <span class="op">+</span><span class="st"> </span></span>
<span id="cb4-12"><span class="st">            </span><span class="kw">lnpoch</span>(c<span class="op">+</span>d<span class="op">-</span>kappa,k) <span class="op">+</span><span class="st"> </span><span class="kw">lnpoch</span>(c,k) <span class="op">-</span><span class="st"> </span><span class="kw">lnpoch</span>(c<span class="op">+</span>d,k))</span>
<span id="cb4-13">    }</span>
<span id="cb4-14">  out</span>
<span id="cb4-15">}</span>
<span id="cb4-16">NormalizingConstant &lt;-<span class="st"> </span><span class="cf">function</span>(c, d, kappa, tau){</span>
<span id="cb4-17">  <span class="cf">if</span>(tau <span class="op">&lt;</span><span class="st"> </span><span class="dv">1</span>){</span>
<span id="cb4-18">    <span class="kw">hyperg_2F1</span>(d, c<span class="op">+</span>d<span class="op">-</span>kappa, c<span class="op">+</span>d, <span class="dv">1</span><span class="op">-</span>tau) </span>
<span id="cb4-19">  }<span class="cf">else</span>{</span>
<span id="cb4-20">    <span class="kw">hyperg_2F1</span>(c, c<span class="op">+</span>d<span class="op">-</span>kappa, c<span class="op">+</span>d, <span class="dv">1-1</span><span class="op">/</span>tau) </span>
<span id="cb4-21">  }</span>
<span id="cb4-22">}</span>
<span id="cb4-23">Ksampler &lt;-<span class="st"> </span><span class="cf">function</span>(n, c, d, kappa, tau){</span>
<span id="cb4-24">  dist &lt;-<span class="st"> </span><span class="kw">unuran.discr.new</span>(</span>
<span id="cb4-25">    <span class="dt">pmf =</span> <span class="cf">function</span>(k) <span class="kw">pmf_unnormalized</span>(k, c, d, kappa, tau),</span>
<span id="cb4-26">    <span class="dt">lb =</span> <span class="dv">0</span>, <span class="dt">ub=</span> <span class="ot">Inf</span>, <span class="dt">sum =</span> <span class="kw">NormalizingConstant</span>(c, d, kappa, tau)</span>
<span id="cb4-27">  )</span>
<span id="cb4-28">  unuran &lt;-<span class="st"> </span><span class="kw">unuran.new</span>(dist, <span class="dt">method=</span><span class="st">"dgt"</span>) </span>
<span id="cb4-29">  <span class="kw">ur</span>(unuran, n)</span>
<span id="cb4-30">}</span>
<span id="cb4-31">rB3 &lt;-<span class="st"> </span><span class="cf">function</span>(n, c, d, kappa, tau){</span>
<span id="cb4-32">  <span class="kw">stopifnot</span>(c <span class="op">&gt;</span><span class="st"> </span><span class="dv">0</span>, d <span class="op">&gt;</span><span class="st"> </span><span class="dv">0</span>, tau <span class="op">&gt;</span><span class="st"> </span><span class="dv">0</span>)</span>
<span id="cb4-33">  <span class="cf">if</span>(tau <span class="op">==</span><span class="st"> </span><span class="dv">1</span> <span class="op">||</span><span class="st"> </span>kappa <span class="op">==</span><span class="st"> </span>c<span class="op">+</span>d){</span>
<span id="cb4-34">    <span class="kw">rbetaprime</span>(n, c, d, <span class="dv">1</span>)</span>
<span id="cb4-35">  }<span class="cf">else</span> <span class="cf">if</span>(kappa <span class="op">==</span><span class="st"> </span><span class="dv">0</span>){</span>
<span id="cb4-36">    <span class="kw">rbetaprime</span>(n, c, d, tau)</span>
<span id="cb4-37">  }<span class="cf">else</span>{</span>
<span id="cb4-38">    K &lt;-<span class="st"> </span><span class="kw">Ksampler</span>(n, c, d, kappa, tau)</span>
<span id="cb4-39">    <span class="cf">if</span>(tau <span class="op">&lt;</span><span class="st"> </span><span class="dv">1</span>){</span>
<span id="cb4-40">      <span class="kw">rbetaprime</span>(n, c, d <span class="op">+</span><span class="st"> </span>K, <span class="dv">1</span>)</span>
<span id="cb4-41">    }<span class="cf">else</span>{</span>
<span id="cb4-42">      <span class="kw">rbetaprime</span>(n, c <span class="op">+</span><span class="st"> </span>K, d, <span class="dv">1</span>)</span>
<span id="cb4-43">    }</span>
<span id="cb4-44">  }</span>
<span id="cb4-45">}</span></code></pre>
      </div>
      <p>Let’s check. The density:</p>
      <div class="sourceCode" id="cb5">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb5-1">c &lt;-<span class="st"> </span><span class="dv">2</span>; d &lt;-<span class="st"> </span><span class="dv">3</span>; kappa &lt;-<span class="st"> </span><span class="dv">4</span>; tau &lt;-<span class="st"> </span><span class="dv">5</span></span>
<span id="cb5-2">nsims &lt;-<span class="st"> </span><span class="dv">1000000</span></span>
<span id="cb5-3">sims &lt;-<span class="st"> </span><span class="kw">rB3</span>(nsims, c, d, kappa, tau)</span>
<span id="cb5-4"><span class="kw">plot</span>(<span class="kw">density</span>(sims, <span class="dt">from =</span> <span class="dv">0</span>, <span class="dt">to =</span> <span class="kw">quantile</span>(sims, <span class="fl">0.95</span>)))</span>
<span id="cb5-5"><span class="kw">curve</span>(<span class="kw">dB3</span>(x, c, d, kappa, tau), <span class="dt">add =</span> <span class="ot">TRUE</span>, <span class="dt">col =</span> <span class="st">"red"</span>, </span>
<span id="cb5-6">      <span class="dt">lty =</span> <span class="st">"dashed"</span>, <span class="dt">lwd =</span> <span class="dv">2</span>)</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/Beta3-density-1.png"
        />
      </p>
      <p>The cumulative distribution function:</p>
      <div class="sourceCode" id="cb6">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb6-1">q &lt;-<span class="st"> </span><span class="kw">seq</span>(<span class="fl">0.1</span>, <span class="dv">4</span>, <span class="dt">length.out =</span> <span class="dv">10</span>)[<span class="op">-</span><span class="dv">6</span>]</span>
<span id="cb6-2">cdfValues &lt;-<span class="st"> </span><span class="kw">sapply</span>(q, <span class="cf">function</span>(x) <span class="kw">pB3</span>(x, c, d, kappa, tau))</span>
<span id="cb6-3">empirical_cdf &lt;-<span class="st"> </span><span class="kw">ecdf</span>(sims)</span>
<span id="cb6-4"><span class="kw">plot</span>(empirical_cdf, <span class="dt">xlim =</span> <span class="kw">c</span>(<span class="dv">0</span>,<span class="dv">4</span>))</span>
<span id="cb6-5"><span class="kw">points</span>(q, cdfValues, <span class="dt">pch=</span><span class="dv">19</span>)</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/Beta3-cdf-1.png"
        />
      </p>
      <p>
        I’ve removed the sixth value of the vector <code>q</code> because there
        is a crash of <code>appellf1</code> for this value:
      </p>
      <div class="sourceCode" id="cb7">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb7-1">q &lt;-<span class="st"> </span><span class="kw">seq</span>(<span class="fl">0.1</span>, <span class="dv">4</span>, <span class="dt">length.out =</span> <span class="dv">10</span>)</span>
<span id="cb7-2"><span class="kw">pB3</span>(q[<span class="dv">6</span>], c, d, kappa, tau)</span>
<span id="cb7-3"><span class="co">## Error in appell::appellf1(c, kappa, c + d - kappa, c + 1, -q, -q/tau, : f1conv: Computation not possible</span></span></code></pre>
      </div>
      <p>It works with the option <code>userflag = 1</code>:</p>
      <div class="sourceCode" id="cb8">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb8-1"><span class="kw">pB3</span>(q[<span class="dv">6</span>], c, d, kappa, tau, <span class="dt">userflag =</span> <span class="dv">1</span>)</span>
<span id="cb8-2"><span class="co">## [1] 0.849321</span></span></code></pre>
      </div>
      <p>
        Finally perhaps the option <code>userflag = 1</code> is a better default
        value:
      </p>
      <div class="sourceCode" id="cb9">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb9-1">cdfValues &lt;-<span class="st"> </span><span class="kw">sapply</span>(q, <span class="cf">function</span>(x){</span>
<span id="cb9-2">  <span class="kw">pB3</span>(x, c, d, kappa, tau, <span class="dt">userflag =</span> <span class="dv">1</span>)</span>
<span id="cb9-3">})</span>
<span id="cb9-4"><span class="kw">plot</span>(empirical_cdf, <span class="dt">xlim =</span> <span class="kw">c</span>(<span class="dv">0</span>,<span class="dv">4</span>))</span>
<span id="cb9-5"><span class="kw">points</span>(q, cdfValues, <span class="dt">pch=</span><span class="dv">19</span>)</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/Beta3-cdfbis-1.png"
        />
      </p>
      <h1 id="application-to-the-bayesian-binomial-model">
        Application to the Bayesian binomial model
      </h1>
      <p>
        Consider the binomial statistical model parameterized by the odds ratio
        <span class="math inline">\(\phi\)</span>:
        <span class="math display"
          >\[ L(\phi \mid x) \propto \frac{\phi^x}{(1+\phi)^n}. \]</span
        >
        Take a
        <span class="math inline">\(\mathcal{B}_3(c,d,\kappa,\tau)\)</span>
        prior distribution on <span class="math inline">\(\phi\)</span>:
        <span class="math display"
          >\[ \pi(\phi) \propto \frac{\phi^{c-1}(1+\phi)^{-\kappa}}
          {\left(1+\frac{\phi}{\tau}\right)^{c+d-\kappa}} \]</span
        >
        Then the posterior distribution on
        <span class="math inline">\(\phi\)</span> is
        <span class="math inline"
          >\(\mathcal{B}_3(c+x,d+n-x,\kappa+n,\tau)\)</span
        >.
      </p>
      <h1 id="application-to-the-bayesian-two-poisson-samples-model">
        Application to the Bayesian “two Poisson samples” model
      </h1>
      <p>
        Consider the statistical model given by two independent observations
        <span class="math display"
          >\[ x \sim \mathcal{P}(\lambda S), \quad y\sim\mathcal{P}(\mu T)
          \]</span
        >
        where <span class="math inline">\(S\)</span> and
        <span class="math inline">\(T\)</span> are known “sample sizes”. We
        parametrize the model by <span class="math inline">\(\mu\)</span> and
        <span class="math inline">\(\phi := \frac{\lambda}{\mu}\)</span>.
      </p>
      <p>
        Assigning a Gamma prior distribution
        <span class="math inline">\(\mathcal{G}{B}(a,b)\)</span> on
        <span class="math inline">\(\mu\)</span>, it is not difficult to get
        <span class="math display"
          >\[ (\mu \mid \phi,x,y) \sim\mathcal{G}(a+x+y, b + \phi S + T).
          \]</span
        >
        In their paper
        <em
          >A Bayesian framework for the ratio of two Poisson rates in the
          context of vaccine efficacy trials</em
        >
        (2011), Laurent &amp; Legrand derived the marginal likelihood on
        <span class="math inline">\(\phi\)</span> in the case of the
        semi-conjuguate family of prior distributions. Their result holds as
        long as <span class="math inline">\(\mu\)</span> and
        <span class="math inline">\(\phi\)</span> are independent under the
        prior distribution, and this result is
        <span class="math display"
          >\[ \widetilde{L}(\phi \mid x,y) \propto
          \frac{\phi^x}{{(1+\rho\phi)}^{a+x+y}} \]</span
        >
        where <span class="math inline">\(\rho = \frac{S}{T+b}\)</span>.
      </p>
      <p>
        Now, let’s assign a
        <span class="math inline">\(\mathcal{B}'(c,d,\tau)\)</span> prior
        distribution on <span class="math inline">\(\phi\)</span>. Then the
        posterior distribution on <span class="math inline">\(\phi\)</span> is
        given by
        <span class="math display"
          >\[ \pi(\phi \mid x,y) \propto \pi(\phi) \widetilde{L}(\phi \mid x,y)
          \propto \frac{\phi^{c+x-1}(1+\rho\phi)^{-(a+x+y)}}
          {\left(1+\frac{\phi}{\tau}\right)^{c+d}}, \]</span
        >
        and by noting that
        <span class="math inline"
          >\(\frac{\phi}{\tau} = \frac{\rho\phi}{\rho\tau}\)</span
        >, we recognize the scaled
        <span class="math inline">\(\mathcal{B}_3\)</span> distribution
        <span class="math display"
          >\[ (\phi \mid x,y) \sim \frac{1}{\rho} \times \mathcal{B}_3(c+x,
          a+d+y, a+x+y, \rho\tau). \]</span
        >
        In particular, if
        <span class="math inline"
          >\(\tau = \frac{1}{\rho} = \frac{T+b}{S}\)</span
        >, then we find
        <span class="math display"
          >\[ (\phi \mid x,y) \sim \mathcal{B}_2(c+x, a+d+y, \tau), \]</span
        >
        and this is the situation of the semi-conjugate family studied by
        Laurent &amp; Legrand.
      </p>
    </div>
  </div>
</div>
]]></description>
      <pubDate>Mon, 22 Jul 2019 00:00:00 UT</pubDate>
      <guid>https://laustep.github.io/stlahblog/posts/Beta3.html</guid>
      <dc:creator>Stéphane Laurent</dc:creator>
      <category>R</category>
    </item>
    <item>
      <title>Plotting the columns of a Datatable</title>
      <link>https://laustep.github.io/stlahblog/posts/PlotDatatableColumns.html</link>
      <description><![CDATA[<div class="container-fluid">
  <div class="main col-sm-12">
    <div class="content">
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/PlotDatatableColumns.gif"
        />
      </p>
      <p><br /></p>
      <p>Here is the code of this app:</p>
      <div class="sourceCode" id="cb1">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb1-1"><span class="kw">library</span>(shiny)</span>
<span id="cb1-2"><span class="kw">library</span>(shinyBS)</span>
<span id="cb1-3"><span class="kw">library</span>(DT)</span>
<span id="cb1-4"><span class="kw">library</span>(ggplot2)</span>
<span id="cb1-5"></span>
<span id="cb1-6">ui &lt;-<span class="st"> </span><span class="kw">fluidPage</span>(</span>
<span id="cb1-7">  <span class="kw">uiOutput</span>(<span class="st">"modals"</span>),</span>
<span id="cb1-8">  <span class="kw">DTOutput</span>(<span class="st">"table"</span>)</span>
<span id="cb1-9">)</span>
<span id="cb1-10"></span>
<span id="cb1-11">server &lt;-<span class="st"> </span><span class="cf">function</span>(input, output, session){</span>
<span id="cb1-12"></span>
<span id="cb1-13">  dat &lt;-<span class="st"> </span>iris</span>
<span id="cb1-14"></span>
<span id="cb1-15">  buttons &lt;-<span class="st"> </span><span class="kw">lapply</span>(<span class="dv">1</span><span class="op">:</span><span class="kw">ncol</span>(dat), <span class="cf">function</span>(i){</span>
<span id="cb1-16">    <span class="kw">actionButton</span>(</span>
<span id="cb1-17">      <span class="kw">paste0</span>(<span class="st">"this_id_is_not_used"</span>,i),</span>
<span id="cb1-18">      <span class="st">"plot"</span>,</span>
<span id="cb1-19">      <span class="dt">class =</span> <span class="st">"btn-primary btn-sm"</span>,</span>
<span id="cb1-20">      <span class="dt">style =</span> <span class="st">"border-radius: 50%;"</span>, </span>
<span id="cb1-21">      <span class="dt">onclick =</span> <span class="kw">sprintf</span>(</span>
<span id="cb1-22">        <span class="st">"Shiny.setInputValue('button', %d, {priority:'event'});</span></span>
<span id="cb1-23"><span class="st">        $('#modal%d').modal('show');"</span>, i, i)</span>
<span id="cb1-24">    )</span>
<span id="cb1-25">  })</span>
<span id="cb1-26">  </span>
<span id="cb1-27">  output[[<span class="st">"table"</span>]] &lt;-<span class="st"> </span><span class="kw">renderDT</span>({</span>
<span id="cb1-28">    sketch &lt;-<span class="st"> </span>tags<span class="op">$</span><span class="kw">table</span>(</span>
<span id="cb1-29">      <span class="dt">class =</span> <span class="st">"row-border stripe hover compact"</span>,</span>
<span id="cb1-30">      <span class="kw">tableHeader</span>(<span class="kw">c</span>(<span class="st">""</span>, <span class="kw">names</span>(dat))),</span>
<span id="cb1-31">      <span class="kw">tableFooter</span>(<span class="kw">c</span>(<span class="st">""</span>, buttons))</span>
<span id="cb1-32">    )</span>
<span id="cb1-33">    <span class="kw">datatable</span>(</span>
<span id="cb1-34">      dat, <span class="dt">container =</span> sketch, </span>
<span id="cb1-35">      <span class="dt">options =</span> </span>
<span id="cb1-36">        <span class="kw">list</span>(</span>
<span id="cb1-37">          <span class="dt">columnDefs =</span> <span class="kw">list</span>(</span>
<span id="cb1-38">            <span class="kw">list</span>(</span>
<span id="cb1-39">              <span class="dt">className =</span> <span class="st">"dt-center"</span>,</span>
<span id="cb1-40">              <span class="dt">targets =</span> <span class="st">"_all"</span></span>
<span id="cb1-41">            )</span>
<span id="cb1-42">          )</span>
<span id="cb1-43">        )</span>
<span id="cb1-44">    )</span>
<span id="cb1-45">  })</span>
<span id="cb1-46"></span>
<span id="cb1-47">  <span class="co"># modals ####</span></span>
<span id="cb1-48">  output[[<span class="st">"modals"</span>]] &lt;-<span class="st"> </span><span class="kw">renderUI</span>({</span>
<span id="cb1-49">    <span class="kw">lapply</span>(<span class="dv">1</span><span class="op">:</span><span class="kw">ncol</span>(dat), <span class="cf">function</span>(i){</span>
<span id="cb1-50">      <span class="kw">bsModal</span>(</span>
<span id="cb1-51">        <span class="dt">id =</span> <span class="kw">paste0</span>(<span class="st">"modal"</span>,i),</span>
<span id="cb1-52">        <span class="dt">title =</span> <span class="kw">names</span>(dat)[i],</span>
<span id="cb1-53">        <span class="dt">trigger =</span> <span class="kw">paste0</span>(<span class="st">"this_is_not_used"</span>,i),</span>
<span id="cb1-54">        <span class="cf">if</span>(<span class="kw">is.numeric</span>(dat[[i]]) <span class="op">&amp;&amp;</span><span class="st"> </span><span class="kw">length</span>(<span class="kw">unique</span>(dat[[i]]))<span class="op">&gt;</span><span class="dv">19</span>){</span>
<span id="cb1-55">          <span class="kw">fluidRow</span>(</span>
<span id="cb1-56">            <span class="kw">column</span>(<span class="dv">5</span>, <span class="kw">radioButtons</span>(<span class="kw">paste0</span>(<span class="st">"radio"</span>,i), <span class="st">""</span>,</span>
<span id="cb1-57">                       <span class="kw">c</span>(<span class="st">"density"</span>, <span class="st">"histogram"</span>), <span class="dt">inline =</span> <span class="ot">TRUE</span>)),</span>
<span id="cb1-58">            <span class="kw">column</span>(<span class="dv">7</span>,</span>
<span id="cb1-59">                   <span class="kw">conditionalPanel</span>(</span>
<span id="cb1-60">                     <span class="dt">condition =</span> <span class="kw">sprintf</span>(<span class="st">"input.radio%d=='histogram'"</span>,i),</span>
<span id="cb1-61">                     <span class="kw">sliderInput</span>(<span class="kw">paste0</span>(<span class="st">"slider"</span>,i), <span class="st">"Number of bins"</span>,</span>
<span id="cb1-62">                                 <span class="dt">min =</span> <span class="dv">5</span>, <span class="dt">max =</span> <span class="dv">100</span>, <span class="dt">value =</span> <span class="dv">30</span>)</span>
<span id="cb1-63">                   ))</span>
<span id="cb1-64">          )</span>
<span id="cb1-65">        },</span>
<span id="cb1-66">        <span class="kw">plotOutput</span>(<span class="kw">paste0</span>(<span class="st">"plot"</span>,i))</span>
<span id="cb1-67">      )</span>
<span id="cb1-68">    })</span>
<span id="cb1-69">  })</span>
<span id="cb1-70">  </span>
<span id="cb1-71">  <span class="co"># plots in modals ####</span></span>
<span id="cb1-72">  <span class="cf">for</span>(i <span class="cf">in</span> <span class="dv">1</span><span class="op">:</span><span class="kw">ncol</span>(dat)){</span>
<span id="cb1-73">    <span class="kw">local</span>({</span>
<span id="cb1-74">      ii &lt;-<span class="st"> </span>i</span>
<span id="cb1-75">      output[[<span class="kw">paste0</span>(<span class="st">"plot"</span>,ii)]] &lt;-<span class="st"> </span><span class="kw">renderPlot</span>({</span>
<span id="cb1-76">        <span class="cf">if</span>(<span class="kw">is.numeric</span>(dat[[ii]]) <span class="op">&amp;&amp;</span><span class="st"> </span><span class="kw">length</span>(<span class="kw">unique</span>(dat[[ii]]))<span class="op">&gt;</span><span class="dv">19</span>){</span>
<span id="cb1-77">          <span class="cf">if</span>(input[[<span class="kw">paste0</span>(<span class="st">"radio"</span>,ii)]] <span class="op">==</span><span class="st"> "density"</span>){</span>
<span id="cb1-78">            <span class="kw">ggplot</span>(dat, <span class="kw">aes_string</span>(<span class="kw">names</span>(dat)[ii])) <span class="op">+</span><span class="st"> </span></span>
<span id="cb1-79"><span class="st">              </span><span class="kw">geom_density</span>(<span class="dt">fill =</span> <span class="st">"seashell"</span>, <span class="dt">color =</span> <span class="st">"seashell"</span>) <span class="op">+</span><span class="st"> </span></span>
<span id="cb1-80"><span class="st">              </span><span class="kw">stat_density</span>(<span class="dt">geom =</span> <span class="st">"line"</span>, <span class="dt">size =</span> <span class="dv">1</span>) <span class="op">+</span><span class="st"> </span></span>
<span id="cb1-81"><span class="st">              </span><span class="kw">theme_bw</span>() <span class="op">+</span><span class="st"> </span><span class="kw">theme</span>(<span class="dt">axis.title =</span> <span class="kw">element_text</span>(<span class="dt">size =</span> <span class="dv">16</span>))</span>
<span id="cb1-82">          }<span class="cf">else</span>{</span>
<span id="cb1-83">            <span class="kw">ggplot</span>(dat, <span class="kw">aes_string</span>(<span class="kw">names</span>(dat)[ii])) <span class="op">+</span><span class="st"> </span></span>
<span id="cb1-84"><span class="st">              </span><span class="kw">geom_histogram</span>(<span class="dt">bins =</span> input[[<span class="kw">paste0</span>(<span class="st">"slider"</span>,ii)]]) <span class="op">+</span><span class="st"> </span></span>
<span id="cb1-85"><span class="st">              </span><span class="kw">theme_bw</span>() <span class="op">+</span><span class="st"> </span><span class="kw">theme</span>(<span class="dt">axis.title =</span> <span class="kw">element_text</span>(<span class="dt">size =</span> <span class="dv">16</span>))</span>
<span id="cb1-86">          }</span>
<span id="cb1-87">        }<span class="cf">else</span>{</span>
<span id="cb1-88">          dat[[<span class="st">".x"</span>]] &lt;-<span class="st"> </span></span>
<span id="cb1-89"><span class="st">            </span><span class="kw">factor</span>(dat[[ii]], <span class="dt">levels =</span> <span class="kw">names</span>(<span class="kw">sort</span>(<span class="kw">table</span>(dat[[ii]]), </span>
<span id="cb1-90">                                                 <span class="dt">decreasing=</span><span class="ot">TRUE</span>)))</span>
<span id="cb1-91">          gg &lt;-<span class="st"> </span><span class="kw">ggplot</span>(dat, <span class="kw">aes</span>(.x)) <span class="op">+</span><span class="st"> </span><span class="kw">geom_bar</span>() <span class="op">+</span><span class="st"> </span></span>
<span id="cb1-92"><span class="st">            </span><span class="kw">geom_text</span>(<span class="dt">stat=</span><span class="st">"count"</span>, <span class="kw">aes</span>(<span class="dt">label=</span>..count..), <span class="dt">vjust=</span><span class="op">-</span><span class="fl">0.5</span>) <span class="op">+</span><span class="st"> </span></span>
<span id="cb1-93"><span class="st">            </span><span class="kw">xlab</span>(<span class="kw">names</span>(dat)[ii]) <span class="op">+</span><span class="st"> </span><span class="kw">theme_bw</span>()</span>
<span id="cb1-94">          <span class="cf">if</span>(<span class="kw">max</span>(<span class="kw">nchar</span>(<span class="kw">levels</span>(dat<span class="op">$</span>.x)))<span class="op">*</span><span class="kw">nlevels</span>(dat<span class="op">$</span>.x)<span class="op">&gt;</span><span class="dv">40</span>){</span>
<span id="cb1-95">            gg &lt;-<span class="st"> </span>gg <span class="op">+</span><span class="st"> </span><span class="kw">theme</span>(<span class="dt">axis.text.x =</span> </span>
<span id="cb1-96">                               <span class="kw">element_text</span>(<span class="dt">size =</span> <span class="dv">12</span>, <span class="dt">angle =</span> <span class="dv">45</span>, </span>
<span id="cb1-97">                                            <span class="dt">vjust =</span> <span class="fl">0.5</span>, <span class="dt">hjust =</span> <span class="fl">0.5</span>))</span>
<span id="cb1-98">          }<span class="cf">else</span>{</span>
<span id="cb1-99">            gg &lt;-<span class="st"> </span>gg <span class="op">+</span><span class="st"> </span><span class="kw">theme</span>(<span class="dt">axis.text.x =</span> <span class="kw">element_text</span>(<span class="dt">size =</span> <span class="dv">12</span>))</span>
<span id="cb1-100">          }</span>
<span id="cb1-101">          gg <span class="op">+</span><span class="st"> </span><span class="kw">theme</span>(<span class="dt">axis.title =</span> <span class="kw">element_text</span>(<span class="dt">size =</span> <span class="dv">16</span>))</span>
<span id="cb1-102">        }</span>
<span id="cb1-103">      })</span>
<span id="cb1-104">    })</span>
<span id="cb1-105">  }</span>
<span id="cb1-106">  </span>
<span id="cb1-107">}</span>
<span id="cb1-108"></span>
<span id="cb1-109"><span class="kw">shinyApp</span>(ui, server)</span></code></pre>
      </div>
    </div>
  </div>
</div>
]]></description>
      <pubDate>Wed, 10 Jul 2019 00:00:00 UT</pubDate>
      <guid>https://laustep.github.io/stlahblog/posts/PlotDatatableColumns.html</guid>
      <dc:creator>Stéphane Laurent</dc:creator>
      <category>R</category>
    </item>
    <item>
      <title>Drawing hyperbolic polyhedra</title>
      <link>https://laustep.github.io/stlahblog/posts/hyperbolicPolyhedra.html</link>
      <description><![CDATA[<div class="container-fluid">
  <div class="main col-sm-12">
    <div class="content">
      <p>
        A. A. Ungar has developed the concept of <em>gyrovector space</em>. His
        theory provides a (gyro)vector approach to hyperbolic geometry.
      </p>
      <p>
        Ungar deeply studied three examples of gyrovector spaces; they
        correspond to three models of hyperbolic geometry: the Beltrami model,
        the Poincaré ball model, and the hyperboloid model.
      </p>
      <p>
        In this blog post, I will consider the gyrovector approach to the
        hyperboloid model. We will see how it makes easy to draw some hyperbolic
        polyhedra.
      </p>
      <h2 id="gyrovector-space">Gyrovector space</h2>
      <p>
        A <em>point</em> is an element of
        <span class="math inline">\(\mathbb{R}^n\)</span>. Throughout,
        <span class="math inline">\(s\)</span> is a fixed positive number.
      </p>
      <p>
        Shortly speaking, <span class="math inline">\(\mathbb{R}^n\)</span> is a
        <em>gyrovector space</em> when it is equipped with a
        <em>gyroaddition</em> and a <em>scalar gyromultiplication</em>.
      </p>
      <h3 id="gyroaddition">Gyroaddition</h3>
      <p>
        In order to define the gyroaddition of two points, we introduce the
        <em>beta factor</em> of a point <span class="math inline">\(A\)</span>,
        defined by
        <span class="math display"
          >\[ \beta_A = \dfrac{1}{\sqrt{1 + \dfrac{{\Vert A \Vert}^2}{s^2}}}.
          \]</span
        >
      </p>
      <p>
        The <em>gyroaddition</em> of two points
        <span class="math inline">\(A\)</span> and
        <span class="math inline">\(B\)</span> is then defined by
        <span class="math display"
          >\[ A \oplus B = \left(1 + \frac{\beta_A}{1+\beta_A}\frac{A\cdot
          B}{s^2} + \frac{1-\beta_B}{\beta_B} \right) A + B. \]</span
        >
        Later, we will resort to the (non-obvious) property
        <span class="math display"
          >\[ (\star)\qquad -A \oplus (A \oplus B) = B. \]</span
        >
      </p>
      <div class="sourceCode" id="cb1">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb1-1"><a href="#cb1-1"></a><span class="co"># gyroaddition ####</span></span>
<span id="cb1-2"><a href="#cb1-2"></a>dotprod &lt;-<span class="st"> </span><span class="cf">function</span>(x, <span class="dt">y=</span><span class="ot">NULL</span>){</span>
<span id="cb1-3"><a href="#cb1-3"></a>  <span class="kw">c</span>(<span class="kw">crossprod</span>(x, y))</span>
<span id="cb1-4"><a href="#cb1-4"></a>}</span>
<span id="cb1-5"><a href="#cb1-5"></a>betaF &lt;-<span class="st"> </span><span class="cf">function</span>(A, <span class="dt">s=</span><span class="dv">1</span>) <span class="dv">1</span><span class="op">/</span><span class="kw">sqrt</span>(<span class="dv">1</span><span class="op">+</span><span class="kw">dotprod</span>(A)<span class="op">/</span>s<span class="op">^</span><span class="dv">2</span>)</span>
<span id="cb1-6"><a href="#cb1-6"></a>gyroadd &lt;-<span class="st"> </span><span class="cf">function</span>(A, B, <span class="dt">s=</span><span class="dv">1</span>){</span>
<span id="cb1-7"><a href="#cb1-7"></a>  betaA &lt;-<span class="st"> </span><span class="kw">betaF</span>(A, s); betaB &lt;-<span class="st"> </span><span class="kw">betaF</span>(B, s)</span>
<span id="cb1-8"><a href="#cb1-8"></a>  (<span class="dv">1</span> <span class="op">+</span><span class="st"> </span>betaA<span class="op">/</span>(<span class="dv">1</span><span class="op">+</span>betaA)<span class="op">*</span><span class="kw">dotprod</span>(A,B)<span class="op">/</span>s<span class="op">^</span><span class="dv">2</span> <span class="op">+</span><span class="st"> </span>(<span class="dv">1</span><span class="op">-</span>betaB)<span class="op">/</span>betaB) <span class="op">*</span><span class="st"> </span>A <span class="op">+</span><span class="st"> </span>B</span>
<span id="cb1-9"><a href="#cb1-9"></a>}</span></code></pre>
      </div>
      <h3 id="scalar-gyromultiplication">Scalar gyromultiplication</h3>
      <p>
        For <span class="math inline">\(r \in \mathbb{R}\)</span>, the
        <em>scalar gyromultiplication</em> of a point
        <span class="math inline">\(A\)</span> by
        <span class="math inline">\(r\)</span> is defined by<br /><span
          class="math display"
          >\[ r \otimes A = \frac{s}{\Vert A \Vert} \sinh\left(r
          \sinh^{-1}\left(\frac{\Vert A \Vert}{s}\right)\right) A. \]</span
        >
      </p>
      <p>
        It is easy to see that
        <span class="math inline">\(0 \otimes A = \mathbf{0}\)</span> and
        <span class="math inline">\(1 \otimes A = A\)</span>.
      </p>
      <div class="sourceCode" id="cb2">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb2-1"><a href="#cb2-1"></a><span class="co"># scalar gyromultiplication ####</span></span>
<span id="cb2-2"><a href="#cb2-2"></a>gyroscalar &lt;-<span class="st"> </span><span class="cf">function</span>(r, A, <span class="dt">s=</span><span class="dv">1</span>){</span>
<span id="cb2-3"><a href="#cb2-3"></a>  Anorm &lt;-<span class="st"> </span><span class="kw">sqrt</span>(<span class="kw">dotprod</span>(A))</span>
<span id="cb2-4"><a href="#cb2-4"></a>  s<span class="op">/</span>Anorm <span class="op">*</span><span class="st"> </span><span class="kw">sinh</span>(r<span class="op">*</span><span class="kw">asinh</span>(Anorm<span class="op">/</span>s)) <span class="op">*</span><span class="st"> </span>A</span>
<span id="cb2-5"><a href="#cb2-5"></a>}</span></code></pre>
      </div>
      <h3 id="gyroline-gyrosegment-and-gyromidpoint">
        Gyroline, gyrosegment and gyromidpoint
      </h3>
      <p>
        In order to define a gyroline and the gyrosegment joining two points, we
        introduce the notation
        <span class="math display"
          >\[ \overset{\oplus\longrightarrow}{AB} = (-A) \oplus B. \]</span
        >
      </p>
      <p>
        The <em>gyroline</em> passing through
        <span class="math inline">\(A\)</span> and
        <span class="math inline">\(B\)</span> is the set of all points having
        form
        <span class="math display"
          >\[ A \oplus \Bigl(t \otimes \overset{\oplus\longrightarrow}{AB}\Bigr)
          \]</span
        >
        for some <span class="math inline">\(t \in \mathbb{R}\)</span>.
      </p>
      <p>
        Observe that the point
        <span class="math inline"
          >\(A \oplus \Bigl(t \otimes
          \overset{\oplus\longrightarrow}{AB}\Bigr)\)</span
        >
        equals <span class="math inline">\(A\)</span> when
        <span class="math inline">\(t=0\)</span> (easy) and equals
        <span class="math inline">\(B\)</span> when
        <span class="math inline">\(t=1\)</span> (that stems from property
        <span class="math inline">\((\star)\)</span>).
      </p>
      <p>
        The <em>gyrosegment</em> that joins
        <span class="math inline">\(A\)</span> and
        <span class="math inline">\(B\)</span> is the set of such points for
        <span class="math inline">\(t \in [0,1]\)</span>:
        <span class="math display"
          >\[ \left\{ A \oplus \Bigl(t \otimes
          \overset{\oplus\longrightarrow}{AB}\Bigr) \Bigm| 0 \leq t \leq
          1\right\}. \]</span
        >
      </p>
      <p>
        The <em>gyromidpoint</em> of <span class="math inline">\(A\)</span> and
        <span class="math inline">\(B\)</span> is the point of the gyrosegment
        joining <span class="math inline">\(A\)</span> and
        <span class="math inline">\(B\)</span> corresponding to
        <span class="math inline">\(t = \frac12\)</span>:
        <span class="math display"
          >\[ A \oplus \left(\frac{1}{2} \otimes
          \overset{\oplus\longrightarrow}{AB}\right). \]</span
        >
      </p>
      <div class="sourceCode" id="cb3">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb3-1"><a href="#cb3-1"></a><span class="co"># gyrosegment ####</span></span>
<span id="cb3-2"><a href="#cb3-2"></a>gyroABt &lt;-<span class="st"> </span><span class="cf">function</span>(A, B, t, <span class="dt">s=</span><span class="dv">1</span>){</span>
<span id="cb3-3"><a href="#cb3-3"></a>  <span class="kw">gyroadd</span>(A, <span class="kw">gyroscalar</span>(t, <span class="kw">gyroadd</span>(<span class="op">-</span>A, B, s), s), s)</span>
<span id="cb3-4"><a href="#cb3-4"></a>}</span>
<span id="cb3-5"><a href="#cb3-5"></a>gyromidpoint &lt;-<span class="st"> </span><span class="cf">function</span>(A, B, <span class="dt">s=</span><span class="dv">1</span>){</span>
<span id="cb3-6"><a href="#cb3-6"></a>  <span class="kw">gyroABt</span>(A, B, <span class="fl">0.5</span>, s)</span>
<span id="cb3-7"><a href="#cb3-7"></a>}</span>
<span id="cb3-8"><a href="#cb3-8"></a>gyrosegment &lt;-<span class="st"> </span><span class="cf">function</span>(A, B, <span class="dt">s=</span><span class="dv">1</span>, <span class="dt">n=</span><span class="dv">50</span>){</span>
<span id="cb3-9"><a href="#cb3-9"></a>  <span class="kw">t</span>(<span class="kw">sapply</span>(<span class="kw">seq</span>(<span class="dv">0</span>, <span class="dv">1</span>, <span class="dt">length.out =</span> n), <span class="cf">function</span>(t){</span>
<span id="cb3-10"><a href="#cb3-10"></a>    <span class="kw">gyroABt</span>(A, B, t, s)</span>
<span id="cb3-11"><a href="#cb3-11"></a>  }))</span>
<span id="cb3-12"><a href="#cb3-12"></a>}</span></code></pre>
      </div>
      <p>Let’s plot a two-dimensional gyrosegment.</p>
      <div class="sourceCode" id="cb4">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb4-1"><a href="#cb4-1"></a>A &lt;-<span class="st"> </span><span class="kw">c</span>(<span class="dv">1</span>,<span class="dv">2</span>); B &lt;-<span class="st"> </span><span class="kw">c</span>(<span class="dv">1</span>,<span class="dv">1</span>)</span>
<span id="cb4-2"><a href="#cb4-2"></a><span class="kw">plot</span>(<span class="kw">rbind</span>(A,B), <span class="dt">type =</span> <span class="st">"p"</span>, <span class="dt">pch =</span> <span class="dv">19</span>, <span class="dt">xlab =</span> <span class="ot">NA</span>, <span class="dt">ylab =</span> <span class="ot">NA</span>, </span>
<span id="cb4-3"><a href="#cb4-3"></a>     <span class="dt">xlim =</span> <span class="kw">c</span>(<span class="dv">0</span>,<span class="dv">2</span>), <span class="dt">ylim =</span> <span class="kw">c</span>(<span class="dv">0</span>,<span class="dv">2</span>))</span>
<span id="cb4-4"><a href="#cb4-4"></a>s &lt;-<span class="st"> </span><span class="fl">0.2</span></span>
<span id="cb4-5"><a href="#cb4-5"></a>AB &lt;-<span class="st"> </span><span class="kw">gyrosegment</span>(A, B, s)</span>
<span id="cb4-6"><a href="#cb4-6"></a><span class="kw">lines</span>(AB)</span>
<span id="cb4-7"><a href="#cb4-7"></a><span class="kw">text</span>(<span class="kw">t</span>(A), <span class="kw">expression</span>(<span class="kw">italic</span>(A)), <span class="dt">pos=</span><span class="dv">1</span>)</span>
<span id="cb4-8"><a href="#cb4-8"></a><span class="kw">text</span>(<span class="kw">t</span>(B), <span class="kw">expression</span>(<span class="kw">italic</span>(B)), <span class="dt">pos=</span><span class="dv">3</span>)</span>
<span id="cb4-9"><a href="#cb4-9"></a><span class="co"># gyromidpoint</span></span>
<span id="cb4-10"><a href="#cb4-10"></a><span class="kw">points</span>(<span class="kw">t</span>(<span class="kw">gyromidpoint</span>(A, B, s)), <span class="dt">pch =</span> <span class="dv">19</span>, <span class="dt">col =</span> <span class="st">"red"</span>)</span>
<span id="cb4-11"><a href="#cb4-11"></a><span class="co"># asymptotes</span></span>
<span id="cb4-12"><a href="#cb4-12"></a><span class="kw">lines</span>(<span class="kw">rbind</span>(<span class="kw">c</span>(<span class="dv">0</span>,<span class="dv">0</span>), <span class="kw">gyroABt</span>(A, B, <span class="dt">t=</span><span class="op">-</span><span class="dv">20</span>, s)), <span class="dt">lty=</span><span class="st">"dashed"</span>)</span>
<span id="cb4-13"><a href="#cb4-13"></a><span class="kw">lines</span>(<span class="kw">rbind</span>(<span class="kw">c</span>(<span class="dv">0</span>,<span class="dv">0</span>), <span class="kw">gyroABt</span>(A, B, <span class="dt">t=</span><span class="dv">20</span>, s)), <span class="dt">lty=</span><span class="st">"dashed"</span>)</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/hyperbolicPolyhedra-gyrosegment2d-1.png"
        />
      </p>
      <p>This is a part of a hyperbola whose asymptotes meet at the origin.</p>
      <h2 id="hyperbolic-triangle">Hyperbolic triangle</h2>
      <p>
        Thanks to the gyrosegments, we can easily plot the edges of a hyperbolic
        triangle.
      </p>
      <div class="sourceCode" id="cb5">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb5-1"><a href="#cb5-1"></a><span class="kw">library</span>(rgl)</span>
<span id="cb5-2"><a href="#cb5-2"></a>A &lt;-<span class="st"> </span><span class="kw">c</span>(<span class="dv">1</span>, <span class="dv">0</span>, <span class="dv">0</span>); B &lt;-<span class="st"> </span><span class="kw">c</span>(<span class="dv">0</span>, <span class="dv">1</span>, <span class="dv">0</span>); C &lt;-<span class="st"> </span><span class="kw">c</span>(<span class="dv">0</span>, <span class="dv">0</span>, <span class="dv">1</span>)</span>
<span id="cb5-3"><a href="#cb5-3"></a>s &lt;-<span class="st"> </span><span class="fl">0.3</span></span>
<span id="cb5-4"><a href="#cb5-4"></a>AB &lt;-<span class="st"> </span><span class="kw">gyrosegment</span>(A, B, s)</span>
<span id="cb5-5"><a href="#cb5-5"></a>AC &lt;-<span class="st"> </span><span class="kw">gyrosegment</span>(A, C, s)</span>
<span id="cb5-6"><a href="#cb5-6"></a>BC &lt;-<span class="st"> </span><span class="kw">gyrosegment</span>(B, C, s)</span>
<span id="cb5-7"><a href="#cb5-7"></a><span class="kw">view3d</span>(<span class="dv">30</span>, <span class="dv">30</span>, <span class="dt">zoom =</span> <span class="fl">0.75</span>)</span>
<span id="cb5-8"><a href="#cb5-8"></a><span class="kw">lines3d</span>(AB, <span class="dt">lwd=</span><span class="dv">3</span>); <span class="kw">lines3d</span>(AC, <span class="dt">lwd=</span><span class="dv">3</span>); <span class="kw">lines3d</span>(BC, <span class="dt">lwd=</span><span class="dv">3</span>)</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/hyperbolicPolyhedra-htriangle1-1.png"
        />
      </p>
      <p>
        We can draw a prettier picture with the help of the
        <code>cylinder3d</code> function of <code>rgl</code>:
      </p>
      <div class="sourceCode" id="cb6">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb6-1"><a href="#cb6-1"></a><span class="kw">view3d</span>(<span class="dv">30</span>, <span class="dv">30</span>, <span class="dt">zoom =</span> <span class="fl">0.75</span>)</span>
<span id="cb6-2"><a href="#cb6-2"></a><span class="co"># plot vertices</span></span>
<span id="cb6-3"><a href="#cb6-3"></a><span class="kw">spheres3d</span>(<span class="kw">rbind</span>(A,B,C), <span class="dt">radius =</span> <span class="fl">0.03</span>, <span class="dt">color =</span> <span class="st">"yellow"</span>)</span>
<span id="cb6-4"><a href="#cb6-4"></a><span class="co"># plot edges</span></span>
<span id="cb6-5"><a href="#cb6-5"></a><span class="kw">shade3d</span>(</span>
<span id="cb6-6"><a href="#cb6-6"></a>  <span class="kw">cylinder3d</span>(AB, <span class="dt">radius =</span> <span class="fl">0.015</span>, <span class="dt">sides =</span> <span class="dv">20</span>), <span class="dt">color =</span> <span class="st">"yellow"</span>)</span>
<span id="cb6-7"><a href="#cb6-7"></a><span class="kw">shade3d</span>(</span>
<span id="cb6-8"><a href="#cb6-8"></a>  <span class="kw">cylinder3d</span>(AC, <span class="dt">radius =</span> <span class="fl">0.015</span>, <span class="dt">sides =</span> <span class="dv">20</span>), <span class="dt">color =</span> <span class="st">"yellow"</span>)</span>
<span id="cb6-9"><a href="#cb6-9"></a><span class="kw">shade3d</span>(</span>
<span id="cb6-10"><a href="#cb6-10"></a>  <span class="kw">cylinder3d</span>(BC, <span class="dt">radius =</span> <span class="fl">0.015</span>, <span class="dt">sides =</span> <span class="dv">20</span>), <span class="dt">color =</span> <span class="st">"yellow"</span>)</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/hyperbolicPolyhedra-htriangle2-1.png"
        />
      </p>
      <p>
        Now, how to fill the hyperbolic triangle with a color? We will do so by
        constructing a triangular mesh of the hyperbolic triangle.
      </p>
      <div class="sourceCode" id="cb7">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb7-1"><a href="#cb7-1"></a><span class="co"># a subdivision step</span></span>
<span id="cb7-2"><a href="#cb7-2"></a>gyrosubdiv0 &lt;-<span class="st"> </span><span class="cf">function</span>(A1, A2, A3, <span class="dt">s=</span><span class="dv">1</span>){</span>
<span id="cb7-3"><a href="#cb7-3"></a>  M12 &lt;-<span class="st"> </span><span class="kw">gyromidpoint</span>(A1, A2, s)</span>
<span id="cb7-4"><a href="#cb7-4"></a>  M13 &lt;-<span class="st"> </span><span class="kw">gyromidpoint</span>(A1, A3, s)</span>
<span id="cb7-5"><a href="#cb7-5"></a>  M23 &lt;-<span class="st"> </span><span class="kw">gyromidpoint</span>(A2, A3, s)</span>
<span id="cb7-6"><a href="#cb7-6"></a>  <span class="kw">list</span>(</span>
<span id="cb7-7"><a href="#cb7-7"></a>    <span class="kw">list</span>(A1, M12, M13),</span>
<span id="cb7-8"><a href="#cb7-8"></a>    <span class="kw">list</span>(A2, M23, M12),</span>
<span id="cb7-9"><a href="#cb7-9"></a>    <span class="kw">list</span>(A3, M13, M23),</span>
<span id="cb7-10"><a href="#cb7-10"></a>    <span class="kw">list</span>(M12, M13, M23)</span>
<span id="cb7-11"><a href="#cb7-11"></a>  )</span>
<span id="cb7-12"><a href="#cb7-12"></a>}</span>
<span id="cb7-13"><a href="#cb7-13"></a><span class="co"># iterate the subdivision, and return a "mesh3d" object</span></span>
<span id="cb7-14"><a href="#cb7-14"></a>gyrosubdiv &lt;-<span class="st"> </span><span class="cf">function</span>(A1, A2, A3, <span class="dt">s=</span><span class="dv">1</span>, <span class="dt">depth=</span><span class="dv">5</span>){</span>
<span id="cb7-15"><a href="#cb7-15"></a>  subd &lt;-<span class="st"> </span><span class="kw">gyrosubdiv0</span>(A1, A2, A3, s)</span>
<span id="cb7-16"><a href="#cb7-16"></a>  <span class="cf">for</span>(i <span class="cf">in</span> <span class="kw">seq_len</span>(depth<span class="dv">-1</span>)){</span>
<span id="cb7-17"><a href="#cb7-17"></a>    subd &lt;-<span class="st"> </span>purrr<span class="op">::</span><span class="kw">flatten</span>(<span class="kw">lapply</span>(subd, <span class="cf">function</span>(triplet){</span>
<span id="cb7-18"><a href="#cb7-18"></a>      <span class="kw">gyrosubdiv0</span>(triplet[[<span class="dv">1</span>]], triplet[[<span class="dv">2</span>]], triplet[[<span class="dv">3</span>]], s)</span>
<span id="cb7-19"><a href="#cb7-19"></a>    }))</span>
<span id="cb7-20"><a href="#cb7-20"></a>  }</span>
<span id="cb7-21"><a href="#cb7-21"></a>  vertices &lt;-<span class="st"> </span></span>
<span id="cb7-22"><a href="#cb7-22"></a><span class="st">    </span><span class="kw">do.call</span>(cbind, </span>
<span id="cb7-23"><a href="#cb7-23"></a>            <span class="kw">lapply</span>(subd, <span class="cf">function</span>(triplet) <span class="kw">do.call</span>(cbind, triplet)))</span>
<span id="cb7-24"><a href="#cb7-24"></a>  indices &lt;-<span class="st"> </span><span class="kw">matrix</span>(<span class="dv">1</span><span class="op">:</span><span class="kw">ncol</span>(vertices), <span class="dt">nrow =</span> <span class="dv">3</span>)</span>
<span id="cb7-25"><a href="#cb7-25"></a>  <span class="kw">tmesh3d</span>(</span>
<span id="cb7-26"><a href="#cb7-26"></a>    <span class="dt">vertices =</span> vertices,</span>
<span id="cb7-27"><a href="#cb7-27"></a>    <span class="dt">indices =</span> indices,</span>
<span id="cb7-28"><a href="#cb7-28"></a>    <span class="dt">homogeneous =</span> <span class="ot">FALSE</span></span>
<span id="cb7-29"><a href="#cb7-29"></a>  )</span>
<span id="cb7-30"><a href="#cb7-30"></a>}</span></code></pre>
      </div>
      <p>Here is the mesh at the first iteration:</p>
      <div class="sourceCode" id="cb8">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb8-1"><a href="#cb8-1"></a>mesh &lt;-<span class="st"> </span><span class="kw">gyrosubdiv</span>(A, B, C, s, <span class="dt">depth =</span> <span class="dv">1</span>)</span>
<span id="cb8-2"><a href="#cb8-2"></a><span class="kw">view3d</span>(<span class="dv">30</span>, <span class="dv">30</span>, <span class="dt">zoom =</span> <span class="fl">0.75</span>)</span>
<span id="cb8-3"><a href="#cb8-3"></a><span class="kw">wire3d</span>(mesh, <span class="dt">lwd =</span> <span class="dv">3</span>, <span class="dt">specular =</span> <span class="st">"black"</span>)</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/hyperbolicPolyhedra-wire1-1.png"
        />
      </p>
      <p>At the second iteration:</p>
      <div class="sourceCode" id="cb9">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb9-1"><a href="#cb9-1"></a>mesh &lt;-<span class="st"> </span><span class="kw">gyrosubdiv</span>(A, B, C, s, <span class="dt">depth =</span> <span class="dv">2</span>)</span>
<span id="cb9-2"><a href="#cb9-2"></a><span class="kw">view3d</span>(<span class="dv">30</span>, <span class="dv">30</span>, <span class="dt">zoom =</span> <span class="fl">0.75</span>)</span>
<span id="cb9-3"><a href="#cb9-3"></a><span class="kw">wire3d</span>(mesh, <span class="dt">lwd =</span> <span class="dv">3</span>, <span class="dt">specular =</span> <span class="st">"black"</span>)</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/hyperbolicPolyhedra-wire2-1.png"
        />
      </p>
      <p>Now let’s plot the shaded triangle:</p>
      <div class="sourceCode" id="cb10">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb10-1"><a href="#cb10-1"></a>mesh &lt;-<span class="st"> </span><span class="kw">gyrosubdiv</span>(A, B, C, s, <span class="dt">depth =</span> <span class="dv">6</span>)</span>
<span id="cb10-2"><a href="#cb10-2"></a><span class="kw">view3d</span>(<span class="dv">30</span>, <span class="dv">30</span>, <span class="dt">zoom =</span> <span class="fl">0.75</span>)</span>
<span id="cb10-3"><a href="#cb10-3"></a><span class="kw">shade3d</span>(mesh, <span class="dt">color =</span> <span class="st">"navy"</span>, <span class="dt">specular =</span> <span class="st">"cyan"</span>)</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/hyperbolicPolyhedra-shadedTriangle-1.png"
        />
      </p>
      <h2 id="icosahedron">Icosahedron</h2>
      <p>
        An icosahedron is made of twenty triangular faces. So we have everything
        needed to plot an icosahedron.
      </p>
      <div class="sourceCode" id="cb11">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb11-1"><a href="#cb11-1"></a>icosahedron &lt;-<span class="st"> </span><span class="kw">icosahedron3d</span>()</span>
<span id="cb11-2"><a href="#cb11-2"></a>vertices &lt;-<span class="st"> </span><span class="kw">t</span>(icosahedron<span class="op">$</span>vb[<span class="op">-</span><span class="dv">4</span>,])</span>
<span id="cb11-3"><a href="#cb11-3"></a>edges &lt;-<span class="st"> </span>Rvcg<span class="op">::</span><span class="kw">vcgGetEdge</span>(icosahedron)</span>
<span id="cb11-4"><a href="#cb11-4"></a>faces &lt;-<span class="st"> </span><span class="kw">t</span>(icosahedron<span class="op">$</span>it)</span>
<span id="cb11-5"><a href="#cb11-5"></a>s &lt;-<span class="st"> </span><span class="fl">0.5</span></span>
<span id="cb11-6"><a href="#cb11-6"></a><span class="co"># plot icosahedron ####</span></span>
<span id="cb11-7"><a href="#cb11-7"></a><span class="kw">view3d</span>(<span class="dv">30</span>, <span class="dv">30</span>, <span class="dt">zoom =</span> <span class="fl">0.7</span>)</span>
<span id="cb11-8"><a href="#cb11-8"></a><span class="co"># plot vertices</span></span>
<span id="cb11-9"><a href="#cb11-9"></a><span class="kw">spheres3d</span>(vertices, <span class="dt">radius =</span> <span class="fl">0.05</span>, <span class="dt">color =</span> <span class="st">"yellow"</span>)</span>
<span id="cb11-10"><a href="#cb11-10"></a><span class="co"># plot edges</span></span>
<span id="cb11-11"><a href="#cb11-11"></a><span class="cf">for</span>(i <span class="cf">in</span> <span class="dv">1</span><span class="op">:</span><span class="kw">nrow</span>(edges)){</span>
<span id="cb11-12"><a href="#cb11-12"></a>  A &lt;-<span class="st"> </span>vertices[edges[i,<span class="st">"vert1"</span>],]</span>
<span id="cb11-13"><a href="#cb11-13"></a>  B &lt;-<span class="st"> </span>vertices[edges[i,<span class="st">"vert2"</span>],]</span>
<span id="cb11-14"><a href="#cb11-14"></a>  AB &lt;-<span class="st"> </span><span class="kw">gyrosegment</span>(A, B, s)</span>
<span id="cb11-15"><a href="#cb11-15"></a>  <span class="kw">shade3d</span>(</span>
<span id="cb11-16"><a href="#cb11-16"></a>    <span class="kw">cylinder3d</span>(AB, <span class="dt">radius =</span> <span class="fl">0.03</span>, <span class="dt">sides =</span> <span class="dv">20</span>), <span class="dt">color =</span> <span class="st">"yellow"</span>)</span>
<span id="cb11-17"><a href="#cb11-17"></a>}</span>
<span id="cb11-18"><a href="#cb11-18"></a><span class="co"># plot faces</span></span>
<span id="cb11-19"><a href="#cb11-19"></a><span class="cf">for</span>(i <span class="cf">in</span> <span class="dv">1</span><span class="op">:</span><span class="kw">nrow</span>(faces)){</span>
<span id="cb11-20"><a href="#cb11-20"></a>  idx &lt;-<span class="st"> </span>faces[i,]</span>
<span id="cb11-21"><a href="#cb11-21"></a>  A &lt;-<span class="st"> </span>vertices[idx[<span class="dv">1</span>],]</span>
<span id="cb11-22"><a href="#cb11-22"></a>  B &lt;-<span class="st"> </span>vertices[idx[<span class="dv">2</span>],]</span>
<span id="cb11-23"><a href="#cb11-23"></a>  C &lt;-<span class="st"> </span>vertices[idx[<span class="dv">3</span>],]</span>
<span id="cb11-24"><a href="#cb11-24"></a>  mesh &lt;-<span class="st"> </span><span class="kw">gyrosubdiv</span>(A, B, C, <span class="dt">s =</span> s, <span class="dt">depth =</span> <span class="dv">6</span>)</span>
<span id="cb11-25"><a href="#cb11-25"></a>  <span class="kw">shade3d</span>(<span class="kw">addNormals</span>(mesh), <span class="dt">color =</span> <span class="st">"navy"</span>)</span>
<span id="cb11-26"><a href="#cb11-26"></a>}</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/hyperbolicPolyhedra-icosahedron-1.png"
        />
      </p>
      <h2 id="triangular-orthobicopula">Triangular orthobicopula</h2>
      <p>
        To plot the icosahedron, we had at our disposal its vertices, its edges,
        and its faces, which are triangular.
      </p>
      <p>
        Now consider the
        <a href="http://eusebeia.dyndns.org/4d/J27">triangular orthobicopula</a
        >. We only have the coordinates of its vertices, and not all its faces
        are triangular. So, how to plot it?
      </p>
      <p>
        Since this is a convex polyhedron, we can use the
        <code>cxhull</code> package to get its edges and its faces. We use the
        option <code>triangulate = TRUE</code> to get a triangulation of the
        faces.
      </p>
      <div class="sourceCode" id="cb12">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb12-1"><a href="#cb12-1"></a>vertices &lt;-<span class="st"> </span><span class="kw">rbind</span>(</span>
<span id="cb12-2"><a href="#cb12-2"></a>  <span class="kw">c</span>(<span class="dv">1</span>, <span class="dv">-1</span><span class="op">/</span><span class="kw">sqrt</span>(<span class="dv">3</span>), <span class="kw">sqrt</span>(<span class="dv">8</span><span class="op">/</span><span class="dv">3</span>)),</span>
<span id="cb12-3"><a href="#cb12-3"></a>  <span class="kw">c</span>(<span class="dv">1</span>, <span class="dv">-1</span><span class="op">/</span><span class="kw">sqrt</span>(<span class="dv">3</span>), <span class="op">-</span><span class="kw">sqrt</span>(<span class="dv">8</span><span class="op">/</span><span class="dv">3</span>)),</span>
<span id="cb12-4"><a href="#cb12-4"></a>  <span class="kw">c</span>(<span class="op">-</span><span class="dv">1</span>, <span class="dv">-1</span><span class="op">/</span><span class="kw">sqrt</span>(<span class="dv">3</span>), <span class="kw">sqrt</span>(<span class="dv">8</span><span class="op">/</span><span class="dv">3</span>)),</span>
<span id="cb12-5"><a href="#cb12-5"></a>  <span class="kw">c</span>(<span class="op">-</span><span class="dv">1</span>, <span class="dv">-1</span><span class="op">/</span><span class="kw">sqrt</span>(<span class="dv">3</span>), <span class="op">-</span><span class="kw">sqrt</span>(<span class="dv">8</span><span class="op">/</span><span class="dv">3</span>)),</span>
<span id="cb12-6"><a href="#cb12-6"></a>  <span class="kw">c</span>(<span class="dv">0</span>, <span class="dv">2</span><span class="op">/</span><span class="kw">sqrt</span>(<span class="dv">3</span>), <span class="kw">sqrt</span>(<span class="dv">8</span><span class="op">/</span><span class="dv">3</span>)),</span>
<span id="cb12-7"><a href="#cb12-7"></a>  <span class="kw">c</span>(<span class="dv">0</span>, <span class="dv">2</span><span class="op">/</span><span class="kw">sqrt</span>(<span class="dv">3</span>), <span class="op">-</span><span class="kw">sqrt</span>(<span class="dv">8</span><span class="op">/</span><span class="dv">3</span>)),</span>
<span id="cb12-8"><a href="#cb12-8"></a>  <span class="kw">c</span>(<span class="dv">1</span>, <span class="kw">sqrt</span>(<span class="dv">3</span>), <span class="dv">0</span>),</span>
<span id="cb12-9"><a href="#cb12-9"></a>  <span class="kw">c</span>(<span class="dv">1</span>, <span class="op">-</span><span class="kw">sqrt</span>(<span class="dv">3</span>), <span class="dv">0</span>),</span>
<span id="cb12-10"><a href="#cb12-10"></a>  <span class="kw">c</span>(<span class="op">-</span><span class="dv">1</span>, <span class="kw">sqrt</span>(<span class="dv">3</span>), <span class="dv">0</span>),</span>
<span id="cb12-11"><a href="#cb12-11"></a>  <span class="kw">c</span>(<span class="op">-</span><span class="dv">1</span>, <span class="op">-</span><span class="kw">sqrt</span>(<span class="dv">3</span>), <span class="dv">0</span>),</span>
<span id="cb12-12"><a href="#cb12-12"></a>  <span class="kw">c</span>(<span class="dv">2</span>, <span class="dv">0</span>, <span class="dv">0</span>),</span>
<span id="cb12-13"><a href="#cb12-13"></a>  <span class="kw">c</span>(<span class="op">-</span><span class="dv">2</span>, <span class="dv">0</span>, <span class="dv">0</span>)</span>
<span id="cb12-14"><a href="#cb12-14"></a>)</span>
<span id="cb12-15"><a href="#cb12-15"></a><span class="co"># faces </span></span>
<span id="cb12-16"><a href="#cb12-16"></a><span class="kw">library</span>(cxhull)</span>
<span id="cb12-17"><a href="#cb12-17"></a>hull &lt;-<span class="st"> </span><span class="kw">cxhull</span>(vertices, <span class="dt">triangulate =</span> <span class="ot">TRUE</span>)</span>
<span id="cb12-18"><a href="#cb12-18"></a>faces &lt;-<span class="st"> </span><span class="kw">t</span>(<span class="kw">sapply</span>(hull<span class="op">$</span>facets, <span class="st">`</span><span class="dt">[[</span><span class="st">`</span>, <span class="st">"vertices"</span>))</span>
<span id="cb12-19"><a href="#cb12-19"></a><span class="co"># edges</span></span>
<span id="cb12-20"><a href="#cb12-20"></a>hull &lt;-<span class="st"> </span><span class="kw">cxhull</span>(vertices, <span class="dt">triangulate =</span> <span class="ot">FALSE</span>)</span>
<span id="cb12-21"><a href="#cb12-21"></a>edges &lt;-<span class="st"> </span>hull<span class="op">$</span>edges</span></code></pre>
      </div>
      <p>And now we can proceed as before:</p>
      <div class="sourceCode" id="cb13">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb13-1"><a href="#cb13-1"></a>s &lt;-<span class="st"> </span><span class="fl">0.5</span></span>
<span id="cb13-2"><a href="#cb13-2"></a><span class="kw">view3d</span>(<span class="dv">30</span>, <span class="dv">30</span>, <span class="dt">zoom =</span> <span class="fl">0.7</span>)</span>
<span id="cb13-3"><a href="#cb13-3"></a><span class="co"># plot vertices</span></span>
<span id="cb13-4"><a href="#cb13-4"></a><span class="kw">spheres3d</span>(vertices, <span class="dt">radius =</span> <span class="fl">0.05</span>, <span class="dt">color =</span> <span class="st">"yellow"</span>)</span>
<span id="cb13-5"><a href="#cb13-5"></a><span class="co"># plot edges</span></span>
<span id="cb13-6"><a href="#cb13-6"></a><span class="cf">for</span>(i <span class="cf">in</span> <span class="dv">1</span><span class="op">:</span><span class="kw">nrow</span>(edges)){</span>
<span id="cb13-7"><a href="#cb13-7"></a>  A &lt;-<span class="st"> </span>vertices[edges[i,<span class="dv">1</span>],]</span>
<span id="cb13-8"><a href="#cb13-8"></a>  B &lt;-<span class="st"> </span>vertices[edges[i,<span class="dv">2</span>],]</span>
<span id="cb13-9"><a href="#cb13-9"></a>  AB &lt;-<span class="st"> </span><span class="kw">gyrosegment</span>(A, B, s)</span>
<span id="cb13-10"><a href="#cb13-10"></a>  <span class="kw">shade3d</span>(</span>
<span id="cb13-11"><a href="#cb13-11"></a>    <span class="kw">cylinder3d</span>(AB, <span class="dt">radius =</span> <span class="fl">0.03</span>, <span class="dt">sides =</span> <span class="dv">20</span>), <span class="dt">color =</span> <span class="st">"yellow"</span>)</span>
<span id="cb13-12"><a href="#cb13-12"></a>}</span>
<span id="cb13-13"><a href="#cb13-13"></a><span class="co"># plot faces</span></span>
<span id="cb13-14"><a href="#cb13-14"></a><span class="cf">for</span>(i <span class="cf">in</span> <span class="dv">1</span><span class="op">:</span><span class="kw">nrow</span>(faces)){</span>
<span id="cb13-15"><a href="#cb13-15"></a>  idx &lt;-<span class="st"> </span>faces[i,]</span>
<span id="cb13-16"><a href="#cb13-16"></a>  A &lt;-<span class="st"> </span>vertices[idx[<span class="dv">1</span>],]</span>
<span id="cb13-17"><a href="#cb13-17"></a>  B &lt;-<span class="st"> </span>vertices[idx[<span class="dv">2</span>],]</span>
<span id="cb13-18"><a href="#cb13-18"></a>  C &lt;-<span class="st"> </span>vertices[idx[<span class="dv">3</span>],]</span>
<span id="cb13-19"><a href="#cb13-19"></a>  mesh &lt;-<span class="st"> </span><span class="kw">gyrosubdiv</span>(A, B, C, <span class="dt">s =</span> s, <span class="dt">depth =</span> <span class="dv">6</span>)</span>
<span id="cb13-20"><a href="#cb13-20"></a>  <span class="kw">shade3d</span>(<span class="kw">addNormals</span>(mesh), <span class="dt">color =</span> <span class="st">"navy"</span>)</span>
<span id="cb13-21"><a href="#cb13-21"></a>}</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/hyperbolicPolyhedra-triangularbicopula-1.png"
        />
      </p>
      <h2 id="asymptote-hyperbolic-dodecahedron">
        Asymptote hyperbolic dodecahedron
      </h2>
      <p>
        Below is an Asymptote code which draws a hyperbolic dodecahedron. The
        gyromidpoint is calculated differently, in a way that does not resort to
        the scalar gyromultiplication.
      </p>
      <div class="sourceCode" id="cb14">
        <pre
          class="sourceCode numberSource c numberLines"
        ><code class="sourceCode c"><span id="cb14-1"><a href="#cb14-1"></a>settings.render = <span class="dv">4</span>;</span>
<span id="cb14-2"><a href="#cb14-2"></a>settings.outformat = <span class="st">"pdf"</span>;</span>
<span id="cb14-3"><a href="#cb14-3"></a></span>
<span id="cb14-4"><a href="#cb14-4"></a><span class="co">// modules -----------------------------------------------------------</span></span>
<span id="cb14-5"><a href="#cb14-5"></a>import three;</span>
<span id="cb14-6"><a href="#cb14-6"></a>import tube;</span>
<span id="cb14-7"><a href="#cb14-7"></a></span>
<span id="cb14-8"><a href="#cb14-8"></a><span class="co">// scene -------------------------------------------------------------</span></span>
<span id="cb14-9"><a href="#cb14-9"></a>size(<span class="dv">10</span><span class="er">cm</span>);</span>
<span id="cb14-10"><a href="#cb14-10"></a>currentprojection = orthographic(<span class="dv">20</span>, <span class="dv">10</span>, -<span class="dv">2</span>);</span>
<span id="cb14-11"><a href="#cb14-11"></a>viewportmargin = (<span class="dv">10</span>,<span class="dv">10</span>);</span>
<span id="cb14-12"><a href="#cb14-12"></a>currentlight = (<span class="dv">1000</span>,<span class="dv">500</span>,<span class="dv">100</span>);</span>
<span id="cb14-13"><a href="#cb14-13"></a></span>
<span id="cb14-14"><a href="#cb14-14"></a><span class="co">// gyromidpoint ------------------------------------------------------</span></span>
<span id="cb14-15"><a href="#cb14-15"></a>real gamma(triple M, real s){</span>
<span id="cb14-16"><a href="#cb14-16"></a>    <span class="cf">return</span> <span class="dv">1</span> / sqrt(<span class="dv">1</span> - dot(M,M)/s/s);</span>
<span id="cb14-17"><a href="#cb14-17"></a>}</span>
<span id="cb14-18"><a href="#cb14-18"></a></span>
<span id="cb14-19"><a href="#cb14-19"></a>real beta(triple M, real s){</span>
<span id="cb14-20"><a href="#cb14-20"></a>    <span class="cf">return</span> <span class="dv">1</span> / sqrt(<span class="dv">1</span> + dot(M,M)/s/s);</span>
<span id="cb14-21"><a href="#cb14-21"></a>}</span>
<span id="cb14-22"><a href="#cb14-22"></a></span>
<span id="cb14-23"><a href="#cb14-23"></a>triple phiEU(triple M, real s){</span>
<span id="cb14-24"><a href="#cb14-24"></a>    <span class="cf">return</span> gamma(M,s)*M;</span>
<span id="cb14-25"><a href="#cb14-25"></a>}</span>
<span id="cb14-26"><a href="#cb14-26"></a></span>
<span id="cb14-27"><a href="#cb14-27"></a>triple phiUE(triple M, real s){</span>
<span id="cb14-28"><a href="#cb14-28"></a>    <span class="cf">return</span> beta(M,s)*M;</span>
<span id="cb14-29"><a href="#cb14-29"></a>}</span>
<span id="cb14-30"><a href="#cb14-30"></a></span>
<span id="cb14-31"><a href="#cb14-31"></a>triple gyromidpointE(triple A, triple B, real s){</span>
<span id="cb14-32"><a href="#cb14-32"></a>    real gammaA = gamma(A,s);</span>
<span id="cb14-33"><a href="#cb14-33"></a>    real gammaB = gamma(B,s);</span>
<span id="cb14-34"><a href="#cb14-34"></a>    <span class="cf">return</span> (gammaA*A + gammaB*B)/(gammaA + gammaB); </span>
<span id="cb14-35"><a href="#cb14-35"></a>}</span>
<span id="cb14-36"><a href="#cb14-36"></a></span>
<span id="cb14-37"><a href="#cb14-37"></a>triple gyromidpointU(triple A, triple B, real s){</span>
<span id="cb14-38"><a href="#cb14-38"></a>    <span class="cf">return</span> phiEU(gyromidpointE(phiUE(A,s), phiUE(B,s), s), s);</span>
<span id="cb14-39"><a href="#cb14-39"></a>}</span>
<span id="cb14-40"><a href="#cb14-40"></a></span>
<span id="cb14-41"><a href="#cb14-41"></a><span class="co">// mesh maker --------------------------------------------------------</span></span>
<span id="cb14-42"><a href="#cb14-42"></a>triple[][] subdiv0(triple[] triangle, real s){</span>
<span id="cb14-43"><a href="#cb14-43"></a>    triple m01 = gyromidpointU(triangle[<span class="dv">0</span>], triangle[<span class="dv">1</span>], s);</span>
<span id="cb14-44"><a href="#cb14-44"></a>    triple m02 = gyromidpointU(triangle[<span class="dv">0</span>], triangle[<span class="dv">2</span>], s);</span>
<span id="cb14-45"><a href="#cb14-45"></a>    triple m12 = gyromidpointU(triangle[<span class="dv">1</span>], triangle[<span class="dv">2</span>], s);</span>
<span id="cb14-46"><a href="#cb14-46"></a>    <span class="cf">return</span> new triple[][] {</span>
<span id="cb14-47"><a href="#cb14-47"></a>        {triangle[<span class="dv">0</span>], m01, m02}, </span>
<span id="cb14-48"><a href="#cb14-48"></a>        {triangle[<span class="dv">1</span>], m12, m01}, </span>
<span id="cb14-49"><a href="#cb14-49"></a>        {triangle[<span class="dv">2</span>], m02, m12}, </span>
<span id="cb14-50"><a href="#cb14-50"></a>        {m01, m12, m02}</span>
<span id="cb14-51"><a href="#cb14-51"></a>    };</span>
<span id="cb14-52"><a href="#cb14-52"></a>}</span>
<span id="cb14-53"><a href="#cb14-53"></a></span>
<span id="cb14-54"><a href="#cb14-54"></a>triple[][] subdiv(<span class="dt">int</span> n, triple[] triangle, real s){</span>
<span id="cb14-55"><a href="#cb14-55"></a>  <span class="cf">if</span>(n==<span class="dv">1</span>){</span>
<span id="cb14-56"><a href="#cb14-56"></a>    <span class="cf">return</span> subdiv0(triangle, s);</span>
<span id="cb14-57"><a href="#cb14-57"></a>  }</span>
<span id="cb14-58"><a href="#cb14-58"></a>  triple[][] triangles = subdiv(n-<span class="dv">1</span>, triangle, s);</span>
<span id="cb14-59"><a href="#cb14-59"></a>  triple[][] out = new triple[<span class="dv">0</span>][<span class="dv">3</span>];</span>
<span id="cb14-60"><a href="#cb14-60"></a>  <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">0</span>; i&lt;<span class="dv">4</span>^(n-<span class="dv">1</span>); ++i){</span>
<span id="cb14-61"><a href="#cb14-61"></a>    triple[] trgl = triangles[i];</span>
<span id="cb14-62"><a href="#cb14-62"></a>    out.append(subdiv0(trgl, s));</span>
<span id="cb14-63"><a href="#cb14-63"></a>  }</span>
<span id="cb14-64"><a href="#cb14-64"></a>  <span class="cf">return</span> out;</span>
<span id="cb14-65"><a href="#cb14-65"></a>}</span>
<span id="cb14-66"><a href="#cb14-66"></a></span>
<span id="cb14-67"><a href="#cb14-67"></a><span class="kw">struct</span> Mesh {</span>
<span id="cb14-68"><a href="#cb14-68"></a>    triple[] vertices;</span>
<span id="cb14-69"><a href="#cb14-69"></a>    <span class="dt">int</span>[][] indices;</span>
<span id="cb14-70"><a href="#cb14-70"></a>}</span>
<span id="cb14-71"><a href="#cb14-71"></a></span>
<span id="cb14-72"><a href="#cb14-72"></a>Mesh htriangle(<span class="dt">int</span> n, triple[] triangle, real s){</span>
<span id="cb14-73"><a href="#cb14-73"></a>    triple[][] triangles = subdiv(n, triangle, s);</span>
<span id="cb14-74"><a href="#cb14-74"></a>    triple[] vertices;</span>
<span id="cb14-75"><a href="#cb14-75"></a>    <span class="dt">int</span>[][] indices;</span>
<span id="cb14-76"><a href="#cb14-76"></a>    <span class="dt">int</span> faceIndex = <span class="dv">0</span>;</span>
<span id="cb14-77"><a href="#cb14-77"></a>    <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">0</span>; i&lt;triangles.length; ++i){</span>
<span id="cb14-78"><a href="#cb14-78"></a>        var triangle = triangles[i];</span>
<span id="cb14-79"><a href="#cb14-79"></a>        vertices.push(triangle[<span class="dv">0</span>]);</span>
<span id="cb14-80"><a href="#cb14-80"></a>        vertices.push(triangle[<span class="dv">1</span>]);</span>
<span id="cb14-81"><a href="#cb14-81"></a>        vertices.push(triangle[<span class="dv">2</span>]);</span>
<span id="cb14-82"><a href="#cb14-82"></a>        <span class="dt">int</span>[] x = {faceIndex, faceIndex+<span class="dv">1</span>, faceIndex+<span class="dv">2</span>};</span>
<span id="cb14-83"><a href="#cb14-83"></a>        indices.push(x);</span>
<span id="cb14-84"><a href="#cb14-84"></a>        faceIndex += <span class="dv">3</span>;</span>
<span id="cb14-85"><a href="#cb14-85"></a>    }</span>
<span id="cb14-86"><a href="#cb14-86"></a>    Mesh out;</span>
<span id="cb14-87"><a href="#cb14-87"></a>    out.vertices = vertices;</span>
<span id="cb14-88"><a href="#cb14-88"></a>    out.indices = indices;</span>
<span id="cb14-89"><a href="#cb14-89"></a>    <span class="cf">return</span> out;</span>
<span id="cb14-90"><a href="#cb14-90"></a>}</span>
<span id="cb14-91"><a href="#cb14-91"></a></span>
<span id="cb14-92"><a href="#cb14-92"></a><span class="co">// gyrosegment -------------------------------------------------------</span></span>
<span id="cb14-93"><a href="#cb14-93"></a>triple gyroadd(triple A, triple B, real s){</span>
<span id="cb14-94"><a href="#cb14-94"></a>    real betaA = beta(A,s);</span>
<span id="cb14-95"><a href="#cb14-95"></a>    real betaB = beta(B,s);</span>
<span id="cb14-96"><a href="#cb14-96"></a>    <span class="cf">return</span> A + B + (betaA/(<span class="dv">1</span>+betaA)*dot(A,B)/s/s + (<span class="dv">1</span>-betaB)/betaB)*A; </span>
<span id="cb14-97"><a href="#cb14-97"></a>}</span>
<span id="cb14-98"><a href="#cb14-98"></a></span>
<span id="cb14-99"><a href="#cb14-99"></a>triple gyroscalar(real r, triple X, real s){</span>
<span id="cb14-100"><a href="#cb14-100"></a>    real Xnorm = length(X);</span>
<span id="cb14-101"><a href="#cb14-101"></a>    <span class="cf">return</span> s*sinh(r*asinh(Xnorm/s)) * X/Xnorm;</span>
<span id="cb14-102"><a href="#cb14-102"></a>}</span>
<span id="cb14-103"><a href="#cb14-103"></a></span>
<span id="cb14-104"><a href="#cb14-104"></a>triple gyroABt(triple A, triple B, real t, real s){</span>
<span id="cb14-105"><a href="#cb14-105"></a>    <span class="cf">return</span> gyroadd(A, gyroscalar(t, gyroadd(-A, B, s=s), s=s), s=s);</span>
<span id="cb14-106"><a href="#cb14-106"></a>}</span>
<span id="cb14-107"><a href="#cb14-107"></a></span>
<span id="cb14-108"><a href="#cb14-108"></a>path3 gyrosegment(triple A, triple B, real s, <span class="dt">int</span> n){</span>
<span id="cb14-109"><a href="#cb14-109"></a>    path3 out;</span>
<span id="cb14-110"><a href="#cb14-110"></a>    <span class="cf">for</span>(<span class="dt">int</span> i = <span class="dv">0</span>; i &lt;= n; ++i){</span>
<span id="cb14-111"><a href="#cb14-111"></a>        out = out -- gyroABt(A, B, i/n, s);</span>
<span id="cb14-112"><a href="#cb14-112"></a>    }</span>
<span id="cb14-113"><a href="#cb14-113"></a>    <span class="cf">return</span> out;</span>
<span id="cb14-114"><a href="#cb14-114"></a>}</span>
<span id="cb14-115"><a href="#cb14-115"></a></span>
<span id="cb14-116"><a href="#cb14-116"></a><span class="co">// dodecahedron vertices ---------------------------------------------</span></span>
<span id="cb14-117"><a href="#cb14-117"></a>real phi = (<span class="dv">1</span> + sqrt(<span class="dv">5</span>)) / <span class="dv">2</span>;</span>
<span id="cb14-118"><a href="#cb14-118"></a>real a = <span class="dv">1</span> / sqrt(<span class="dv">3</span>);</span>
<span id="cb14-119"><a href="#cb14-119"></a>real b = a / phi;</span>
<span id="cb14-120"><a href="#cb14-120"></a>real c = a * phi;</span>
<span id="cb14-121"><a href="#cb14-121"></a>triple[] vertices = </span>
<span id="cb14-122"><a href="#cb14-122"></a>    {(a, a, a),</span>
<span id="cb14-123"><a href="#cb14-123"></a>    (a, a, -a),</span>
<span id="cb14-124"><a href="#cb14-124"></a>    (a, -a, a),</span>
<span id="cb14-125"><a href="#cb14-125"></a>    (-a, -a, a),</span>
<span id="cb14-126"><a href="#cb14-126"></a>    (-a, a, -a),</span>
<span id="cb14-127"><a href="#cb14-127"></a>    (-a, a, a),</span>
<span id="cb14-128"><a href="#cb14-128"></a>    (<span class="dv">0</span>, b, -c),</span>
<span id="cb14-129"><a href="#cb14-129"></a>    (<span class="dv">0</span>, -b, -c),</span>
<span id="cb14-130"><a href="#cb14-130"></a>    (<span class="dv">0</span>, -b, c),</span>
<span id="cb14-131"><a href="#cb14-131"></a>    (c, <span class="dv">0</span>, -b),</span>
<span id="cb14-132"><a href="#cb14-132"></a>    (-c, <span class="dv">0</span>, -b),</span>
<span id="cb14-133"><a href="#cb14-133"></a>    (-c, <span class="dv">0</span>, b),</span>
<span id="cb14-134"><a href="#cb14-134"></a>    (b, c, <span class="dv">0</span>),</span>
<span id="cb14-135"><a href="#cb14-135"></a>    (b, -c, <span class="dv">0</span>),</span>
<span id="cb14-136"><a href="#cb14-136"></a>    (-b, -c, <span class="dv">0</span>),</span>
<span id="cb14-137"><a href="#cb14-137"></a>    (-b, c, <span class="dv">0</span>),</span>
<span id="cb14-138"><a href="#cb14-138"></a>    (<span class="dv">0</span>, b, c),</span>
<span id="cb14-139"><a href="#cb14-139"></a>    (a, -a, -a),</span>
<span id="cb14-140"><a href="#cb14-140"></a>    (c, <span class="dv">0</span>, b),</span>
<span id="cb14-141"><a href="#cb14-141"></a>    (-a, -a, -a)};</span>
<span id="cb14-142"><a href="#cb14-142"></a>    </span>
<span id="cb14-143"><a href="#cb14-143"></a><span class="co">// dodecahedron faces ------------------------------------------------</span></span>
<span id="cb14-144"><a href="#cb14-144"></a><span class="dt">int</span>[][] faces = </span>
<span id="cb14-145"><a href="#cb14-145"></a>    {</span>
<span id="cb14-146"><a href="#cb14-146"></a>        {<span class="dv">13</span>, <span class="dv">2</span>, <span class="dv">3</span>},</span>
<span id="cb14-147"><a href="#cb14-147"></a>        {<span class="dv">3</span>, <span class="dv">14</span>, <span class="dv">13</span>},</span>
<span id="cb14-148"><a href="#cb14-148"></a>        {<span class="dv">3</span>, <span class="dv">2</span>, <span class="dv">8</span>},</span>
<span id="cb14-149"><a href="#cb14-149"></a>        {<span class="dv">17</span>, <span class="dv">1</span>, <span class="dv">9</span>},</span>
<span id="cb14-150"><a href="#cb14-150"></a>        {<span class="dv">6</span>, <span class="dv">1</span>, <span class="dv">17</span>},</span>
<span id="cb14-151"><a href="#cb14-151"></a>        {<span class="dv">17</span>, <span class="dv">7</span>, <span class="dv">6</span>},</span>
<span id="cb14-152"><a href="#cb14-152"></a>        {<span class="dv">6</span>, <span class="dv">7</span>, <span class="dv">19</span>},</span>
<span id="cb14-153"><a href="#cb14-153"></a>        {<span class="dv">19</span>, <span class="dv">4</span>, <span class="dv">6</span>},</span>
<span id="cb14-154"><a href="#cb14-154"></a>        {<span class="dv">10</span>, <span class="dv">4</span>, <span class="dv">19</span>},</span>
<span id="cb14-155"><a href="#cb14-155"></a>        {<span class="dv">13</span>, <span class="dv">14</span>, <span class="dv">19</span>},</span>
<span id="cb14-156"><a href="#cb14-156"></a>        {<span class="dv">19</span>, <span class="dv">17</span>, <span class="dv">13</span>},</span>
<span id="cb14-157"><a href="#cb14-157"></a>        {<span class="dv">7</span>, <span class="dv">17</span>, <span class="dv">19</span>},</span>
<span id="cb14-158"><a href="#cb14-158"></a>        {<span class="dv">15</span>, <span class="dv">1</span>, <span class="dv">6</span>},</span>
<span id="cb14-159"><a href="#cb14-159"></a>        {<span class="dv">12</span>, <span class="dv">1</span>, <span class="dv">15</span>},</span>
<span id="cb14-160"><a href="#cb14-160"></a>        {<span class="dv">6</span>, <span class="dv">4</span>, <span class="dv">15</span>},</span>
<span id="cb14-161"><a href="#cb14-161"></a>        {<span class="dv">15</span>, <span class="dv">0</span>, <span class="dv">12</span>},</span>
<span id="cb14-162"><a href="#cb14-162"></a>        {<span class="dv">15</span>, <span class="dv">16</span>, <span class="dv">0</span>},</span>
<span id="cb14-163"><a href="#cb14-163"></a>        {<span class="dv">5</span>, <span class="dv">16</span>, <span class="dv">15</span>},</span>
<span id="cb14-164"><a href="#cb14-164"></a>        {<span class="dv">18</span>, <span class="dv">1</span>, <span class="dv">12</span>},</span>
<span id="cb14-165"><a href="#cb14-165"></a>        {<span class="dv">12</span>, <span class="dv">0</span>, <span class="dv">18</span>},</span>
<span id="cb14-166"><a href="#cb14-166"></a>        {<span class="dv">9</span>, <span class="dv">1</span>, <span class="dv">18</span>},</span>
<span id="cb14-167"><a href="#cb14-167"></a>        {<span class="dv">0</span>, <span class="dv">16</span>, <span class="dv">18</span>},</span>
<span id="cb14-168"><a href="#cb14-168"></a>        {<span class="dv">8</span>, <span class="dv">2</span>, <span class="dv">18</span>},</span>
<span id="cb14-169"><a href="#cb14-169"></a>        {<span class="dv">18</span>, <span class="dv">16</span>, <span class="dv">8</span>},</span>
<span id="cb14-170"><a href="#cb14-170"></a>        {<span class="dv">18</span>, <span class="dv">2</span>, <span class="dv">13</span>},</span>
<span id="cb14-171"><a href="#cb14-171"></a>        {<span class="dv">18</span>, <span class="dv">17</span>, <span class="dv">9</span>},</span>
<span id="cb14-172"><a href="#cb14-172"></a>        {<span class="dv">13</span>, <span class="dv">17</span>, <span class="dv">18</span>},</span>
<span id="cb14-173"><a href="#cb14-173"></a>        {<span class="dv">8</span>, <span class="dv">16</span>, <span class="dv">11</span>},</span>
<span id="cb14-174"><a href="#cb14-174"></a>        {<span class="dv">11</span>, <span class="dv">16</span>, <span class="dv">5</span>},</span>
<span id="cb14-175"><a href="#cb14-175"></a>        {<span class="dv">11</span>, <span class="dv">3</span>, <span class="dv">8</span>},</span>
<span id="cb14-176"><a href="#cb14-176"></a>        {<span class="dv">14</span>, <span class="dv">3</span>, <span class="dv">11</span>},</span>
<span id="cb14-177"><a href="#cb14-177"></a>        {<span class="dv">11</span>, <span class="dv">19</span>, <span class="dv">14</span>},</span>
<span id="cb14-178"><a href="#cb14-178"></a>        {<span class="dv">10</span>, <span class="dv">19</span>, <span class="dv">11</span>},</span>
<span id="cb14-179"><a href="#cb14-179"></a>        {<span class="dv">11</span>, <span class="dv">4</span>, <span class="dv">10</span>},</span>
<span id="cb14-180"><a href="#cb14-180"></a>        {<span class="dv">5</span>, <span class="dv">15</span>, <span class="dv">11</span>},</span>
<span id="cb14-181"><a href="#cb14-181"></a>        {<span class="dv">11</span>, <span class="dv">15</span>, <span class="dv">4</span>}</span>
<span id="cb14-182"><a href="#cb14-182"></a>    };</span>
<span id="cb14-183"><a href="#cb14-183"></a></span>
<span id="cb14-184"><a href="#cb14-184"></a><span class="co">// dodecahedron edges ------------------------------------------------</span></span>
<span id="cb14-185"><a href="#cb14-185"></a><span class="dt">int</span>[][] edges = </span>
<span id="cb14-186"><a href="#cb14-186"></a>    {</span>
<span id="cb14-187"><a href="#cb14-187"></a>     {<span class="dv">13</span>, <span class="dv">2</span>},</span>
<span id="cb14-188"><a href="#cb14-188"></a>     {<span class="dv">3</span>, <span class="dv">14</span>},</span>
<span id="cb14-189"><a href="#cb14-189"></a>     {<span class="dv">14</span>, <span class="dv">13</span>},</span>
<span id="cb14-190"><a href="#cb14-190"></a>     {<span class="dv">3</span>, <span class="dv">8</span>},</span>
<span id="cb14-191"><a href="#cb14-191"></a>     {<span class="dv">2</span>, <span class="dv">8</span>},</span>
<span id="cb14-192"><a href="#cb14-192"></a>     {<span class="dv">17</span>, <span class="dv">9</span>},</span>
<span id="cb14-193"><a href="#cb14-193"></a>     {<span class="dv">1</span>, <span class="dv">9</span>},</span>
<span id="cb14-194"><a href="#cb14-194"></a>     {<span class="dv">6</span>, <span class="dv">1</span>},</span>
<span id="cb14-195"><a href="#cb14-195"></a>     {<span class="dv">17</span>, <span class="dv">7</span>},</span>
<span id="cb14-196"><a href="#cb14-196"></a>     {<span class="dv">7</span>, <span class="dv">6</span>},</span>
<span id="cb14-197"><a href="#cb14-197"></a>     {<span class="dv">7</span>, <span class="dv">19</span>},</span>
<span id="cb14-198"><a href="#cb14-198"></a>     {<span class="dv">4</span>, <span class="dv">6</span>},</span>
<span id="cb14-199"><a href="#cb14-199"></a>     {<span class="dv">10</span>, <span class="dv">4</span>},</span>
<span id="cb14-200"><a href="#cb14-200"></a>     {<span class="dv">10</span>, <span class="dv">19</span>},</span>
<span id="cb14-201"><a href="#cb14-201"></a>     {<span class="dv">14</span>, <span class="dv">19</span>},</span>
<span id="cb14-202"><a href="#cb14-202"></a>     {<span class="dv">17</span>, <span class="dv">13</span>},</span>
<span id="cb14-203"><a href="#cb14-203"></a>     {<span class="dv">12</span>, <span class="dv">1</span>},</span>
<span id="cb14-204"><a href="#cb14-204"></a>     {<span class="dv">12</span>, <span class="dv">15</span>},</span>
<span id="cb14-205"><a href="#cb14-205"></a>     {<span class="dv">4</span>, <span class="dv">15</span>},</span>
<span id="cb14-206"><a href="#cb14-206"></a>     {<span class="dv">0</span>, <span class="dv">12</span>},</span>
<span id="cb14-207"><a href="#cb14-207"></a>     {<span class="dv">16</span>, <span class="dv">0</span>},</span>
<span id="cb14-208"><a href="#cb14-208"></a>     {<span class="dv">5</span>, <span class="dv">16</span>},</span>
<span id="cb14-209"><a href="#cb14-209"></a>     {<span class="dv">5</span>, <span class="dv">15</span>},</span>
<span id="cb14-210"><a href="#cb14-210"></a>     {<span class="dv">0</span>, <span class="dv">18</span>},</span>
<span id="cb14-211"><a href="#cb14-211"></a>     {<span class="dv">9</span>, <span class="dv">18</span>},</span>
<span id="cb14-212"><a href="#cb14-212"></a>     {<span class="dv">2</span>, <span class="dv">18</span>},</span>
<span id="cb14-213"><a href="#cb14-213"></a>     {<span class="dv">16</span>, <span class="dv">8</span>},</span>
<span id="cb14-214"><a href="#cb14-214"></a>     {<span class="dv">11</span>, <span class="dv">5</span>},</span>
<span id="cb14-215"><a href="#cb14-215"></a>     {<span class="dv">11</span>, <span class="dv">3</span>},</span>
<span id="cb14-216"><a href="#cb14-216"></a>     {<span class="dv">10</span>, <span class="dv">11</span>}</span>
<span id="cb14-217"><a href="#cb14-217"></a>    };</span>
<span id="cb14-218"><a href="#cb14-218"></a></span>
<span id="cb14-219"><a href="#cb14-219"></a><span class="co">// plot --------------------------------------------------------------</span></span>
<span id="cb14-220"><a href="#cb14-220"></a>real s = <span class="fl">0.3</span>;</span>
<span id="cb14-221"><a href="#cb14-221"></a><span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">0</span>; i&lt;faces.length; ++i){</span>
<span id="cb14-222"><a href="#cb14-222"></a>    <span class="dt">int</span>[] idx = faces[i];</span>
<span id="cb14-223"><a href="#cb14-223"></a>    triple[] triangle = {vertices[idx[<span class="dv">0</span>]],vertices[idx[<span class="dv">1</span>]],vertices[idx[<span class="dv">2</span>]]};</span>
<span id="cb14-224"><a href="#cb14-224"></a>    Mesh mesh = htriangle(<span class="dv">6</span>, triangle, s);</span>
<span id="cb14-225"><a href="#cb14-225"></a>    draw(mesh.vertices, mesh.indices, m=rgb(<span class="st">"000080ff"</span>));</span>
<span id="cb14-226"><a href="#cb14-226"></a>}</span>
<span id="cb14-227"><a href="#cb14-227"></a></span>
<span id="cb14-228"><a href="#cb14-228"></a><span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">0</span>; i&lt;edges.length; ++i){</span>
<span id="cb14-229"><a href="#cb14-229"></a>    triple A = vertices[edges[i][<span class="dv">0</span>]];</span>
<span id="cb14-230"><a href="#cb14-230"></a>    triple B = vertices[edges[i][<span class="dv">1</span>]];</span>
<span id="cb14-231"><a href="#cb14-231"></a>    path3 AB = gyrosegment(A, B, s, <span class="dv">50</span>);</span>
<span id="cb14-232"><a href="#cb14-232"></a>    draw(tube(AB, scale(<span class="fl">0.02</span>)*unitcircle), yellow);</span>
<span id="cb14-233"><a href="#cb14-233"></a>}</span>
<span id="cb14-234"><a href="#cb14-234"></a></span>
<span id="cb14-235"><a href="#cb14-235"></a><span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">0</span>; i&lt;vertices.length; ++i){</span>
<span id="cb14-236"><a href="#cb14-236"></a>    draw(shift(vertices[i])*scale3(<span class="fl">0.03</span>)*unitsphere, yellow);</span>
<span id="cb14-237"><a href="#cb14-237"></a>}</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/hyperbolicPolyhedra-asy.png"
        />
      </p>
      <h2 id="three.js-hyperbolic-dodecahedron">
        three.js hyperbolic dodecahedron
      </h2>
      <p>
        Here is a hyperbolic dodecahedron plotted with <code>three.js</code>:
      </p>
      <iframe
        src="https://laustep.github.io/stlahblog/frames/threejs_hyperbolicDodecahedron2.html"
        width="100%"
        height="500px"
        scrolling="no"
        frameborder="0"
      >
      </iframe>
      <h2 id="pov-ray-hyperbolic-dodecahedron">
        POV-Ray hyperbolic dodecahedron
      </h2>
      <p>
        And here is a hyperbolic dodecahedron plotted with <code>POV-Ray</code>:
      </p>
      <div class="sourceCode" id="cb15">
        <pre
          class="sourceCode numberSource povray numberLines"
        ><code class="sourceCode povray"><span id="cb15-1"><a href="#cb15-1"></a><span class="co">// hyperbolic dodecahedron //</span></span>
<span id="cb15-2"><a href="#cb15-2"></a><span class="ot">#version</span> <span class="fl">3.7</span>;</span>
<span id="cb15-3"><a href="#cb15-3"></a><span class="kw">global_settings</span> { <span class="kw">assumed_gamma</span> <span class="fl">1</span> } </span>
<span id="cb15-4"><a href="#cb15-4"></a></span>
<span id="cb15-5"><a href="#cb15-5"></a><span class="ot">#include</span> <span class="st">"colors.inc"</span></span>
<span id="cb15-6"><a href="#cb15-6"></a><span class="ot">#include</span> <span class="st">"textures.inc"</span></span>
<span id="cb15-7"><a href="#cb15-7"></a></span>
<span id="cb15-8"><a href="#cb15-8"></a><span class="co">// Camera and light source -----------------------------------------------------</span></span>
<span id="cb15-9"><a href="#cb15-9"></a><span class="kw">camera</span> {</span>
<span id="cb15-10"><a href="#cb15-10"></a>    <span class="kw">location</span> &lt;<span class="fl">0</span>,<span class="fl">0</span>,-<span class="fl">4</span>&gt; </span>
<span id="cb15-11"><a href="#cb15-11"></a>    <span class="kw">look_at</span> <span class="fl">0</span></span>
<span id="cb15-12"><a href="#cb15-12"></a>    <span class="kw">angle</span> <span class="fl">45</span></span>
<span id="cb15-13"><a href="#cb15-13"></a>}</span>
<span id="cb15-14"><a href="#cb15-14"></a><span class="kw">light_source</span> { &lt;<span class="fl">0</span>, <span class="fl">0</span>, <span class="fl">-1000</span>&gt; White }</span>
<span id="cb15-15"><a href="#cb15-15"></a></span>
<span id="cb15-16"><a href="#cb15-16"></a><span class="co">// gyrostuff -------------------------------------------------------------------</span></span>
<span id="cb15-17"><a href="#cb15-17"></a><span class="kw">#macro dotprod</span>(A,B)</span>
<span id="cb15-18"><a href="#cb15-18"></a>    (A.<span class="kw">x</span>*B.<span class="kw">x</span> + A.<span class="kw">y</span>*B.<span class="kw">y</span> + A.<span class="kw">z</span>*B.<span class="kw">z</span>)</span>
<span id="cb15-19"><a href="#cb15-19"></a><span class="ot">#end</span></span>
<span id="cb15-20"><a href="#cb15-20"></a></span>
<span id="cb15-21"><a href="#cb15-21"></a><span class="kw">#macro beta</span>(A,s)</span>
<span id="cb15-22"><a href="#cb15-22"></a>    (<span class="fl">1</span> / <span class="kw">sqrt</span>(<span class="fl">1</span> + dotprod(A,A)/s/s))</span>
<span id="cb15-23"><a href="#cb15-23"></a><span class="ot">#end</span></span>
<span id="cb15-24"><a href="#cb15-24"></a></span>
<span id="cb15-25"><a href="#cb15-25"></a><span class="kw">#macro gyroadd</span>(A,B,s)</span>
<span id="cb15-26"><a href="#cb15-26"></a>    <span class="kw">#local betaA </span>= beta(A,s);</span>
<span id="cb15-27"><a href="#cb15-27"></a>    <span class="kw">#local betaB </span>= beta(B,s);</span>
<span id="cb15-28"><a href="#cb15-28"></a>    (<span class="fl">1</span> + betaA/(<span class="fl">1</span>+betaA)*dotprod(A,B)/s/s + (<span class="fl">1</span>-betaB)/betaB) * A + B</span>
<span id="cb15-29"><a href="#cb15-29"></a><span class="ot">#end</span></span>
<span id="cb15-30"><a href="#cb15-30"></a></span>
<span id="cb15-31"><a href="#cb15-31"></a><span class="kw">#macro gyroscalar</span>(r,A,s)</span>
<span id="cb15-32"><a href="#cb15-32"></a>    <span class="kw">#local Anorm </span>= dotprod(A,A);</span>
<span id="cb15-33"><a href="#cb15-33"></a>    s/Anorm * <span class="kw">sinh</span>(r*<span class="kw">asinh</span>(Anorm/s)) * A</span>
<span id="cb15-34"><a href="#cb15-34"></a><span class="ot">#end</span></span>
<span id="cb15-35"><a href="#cb15-35"></a></span>
<span id="cb15-36"><a href="#cb15-36"></a><span class="kw">#macro gyroABr</span>(A,B,s,r)</span>
<span id="cb15-37"><a href="#cb15-37"></a>    gyroadd(A, gyroscalar(r, gyroadd(-A, B, s), s), s)</span>
<span id="cb15-38"><a href="#cb15-38"></a><span class="ot">#end</span> </span>
<span id="cb15-39"><a href="#cb15-39"></a></span>
<span id="cb15-40"><a href="#cb15-40"></a><span class="kw">#macro gyromidpoint</span>(A,B,s)</span>
<span id="cb15-41"><a href="#cb15-41"></a>    gyroABr(A,B,s,<span class="fl">0.5</span>)</span>
<span id="cb15-42"><a href="#cb15-42"></a><span class="ot">#end</span> </span>
<span id="cb15-43"><a href="#cb15-43"></a></span>
<span id="cb15-44"><a href="#cb15-44"></a><span class="kw">#macro gyrosegment</span>(A,B,s,n)</span>
<span id="cb15-45"><a href="#cb15-45"></a>    <span class="kw">#local out </span>= <span class="kw">array</span>[n+<span class="fl">1</span>];</span>
<span id="cb15-46"><a href="#cb15-46"></a>    #for(i, <span class="fl">0</span>, n)</span>
<span id="cb15-47"><a href="#cb15-47"></a>        <span class="kw">#local out</span>[i] = gyroABr(A,B,s,i/n);</span>
<span id="cb15-48"><a href="#cb15-48"></a>    <span class="ot">#end</span></span>
<span id="cb15-49"><a href="#cb15-49"></a>    out</span>
<span id="cb15-50"><a href="#cb15-50"></a><span class="ot">#end</span></span>
<span id="cb15-51"><a href="#cb15-51"></a></span>
<span id="cb15-52"><a href="#cb15-52"></a><span class="co">// subdivision step ------------------------------------------------------------</span></span>
<span id="cb15-53"><a href="#cb15-53"></a><span class="kw">#macro subdiv0</span>(A,B,C,s)</span>
<span id="cb15-54"><a href="#cb15-54"></a>    <span class="kw">#local mAB </span>= gyromidpoint(A,B,s);</span>
<span id="cb15-55"><a href="#cb15-55"></a>    <span class="kw">#local mAC </span>= gyromidpoint(A,C,s);</span>
<span id="cb15-56"><a href="#cb15-56"></a>    <span class="kw">#local mBC </span>= gyromidpoint(B,C,s);</span>
<span id="cb15-57"><a href="#cb15-57"></a>    <span class="kw">#local trgl1 </span>= <span class="kw">array</span>[<span class="fl">3</span>] {A, mAB, mAC};</span>
<span id="cb15-58"><a href="#cb15-58"></a>    <span class="kw">#local trgl2 </span>= <span class="kw">array</span>[<span class="fl">3</span>] {B, mAB, mBC};</span>
<span id="cb15-59"><a href="#cb15-59"></a>    <span class="kw">#local trgl3 </span>= <span class="kw">array</span>[<span class="fl">3</span>] {C, mBC, mAC};</span>
<span id="cb15-60"><a href="#cb15-60"></a>    <span class="kw">#local trgl4 </span>= <span class="kw">array</span>[<span class="fl">3</span>] {mAB, mAC, mBC};</span>
<span id="cb15-61"><a href="#cb15-61"></a>    <span class="kw">array</span>[<span class="fl">4</span>] {trgl1, trgl2, trgl3, trgl4}</span>
<span id="cb15-62"><a href="#cb15-62"></a><span class="ot">#end</span></span>
<span id="cb15-63"><a href="#cb15-63"></a></span>
<span id="cb15-64"><a href="#cb15-64"></a><span class="co">// iterated subdivision --------------------------------------------------------</span></span>
<span id="cb15-65"><a href="#cb15-65"></a><span class="kw">#macro subdiv</span>(A,B,C,s,depth)</span>
<span id="cb15-66"><a href="#cb15-66"></a>    <span class="ot">#if</span>(depth=<span class="fl">1</span>)</span>
<span id="cb15-67"><a href="#cb15-67"></a>        <span class="kw">#local out </span>= subdiv0(A,B,C,s);</span>
<span id="cb15-68"><a href="#cb15-68"></a>    <span class="ot">#else</span></span>
<span id="cb15-69"><a href="#cb15-69"></a>        <span class="kw">#local triangles </span>= subdiv(A,B,C,s,depth<span class="fl">-1</span>);</span>
<span id="cb15-70"><a href="#cb15-70"></a>        <span class="kw">#local out </span>= <span class="kw">array</span>[<span class="kw">pow</span>(<span class="fl">4</span>,depth)];</span>
<span id="cb15-71"><a href="#cb15-71"></a>        #for(i,<span class="fl">0</span>,<span class="kw">pow</span>(<span class="fl">4</span>,depth<span class="fl">-1</span>)-<span class="fl">1</span>)</span>
<span id="cb15-72"><a href="#cb15-72"></a>            <span class="kw">#local trgl </span>= triangles[i];</span>
<span id="cb15-73"><a href="#cb15-73"></a>            <span class="kw">#local trgls </span>= subdiv0(trgl[<span class="fl">0</span>], trgl[<span class="fl">1</span>], trgl[<span class="fl">2</span>], s);</span>
<span id="cb15-74"><a href="#cb15-74"></a>            <span class="kw">#local out</span>[<span class="fl">4</span>*i] = trgls[<span class="fl">0</span>];</span>
<span id="cb15-75"><a href="#cb15-75"></a>            <span class="kw">#local out</span>[<span class="fl">4</span>*i+<span class="fl">1</span>] = trgls[<span class="fl">1</span>];</span>
<span id="cb15-76"><a href="#cb15-76"></a>            <span class="kw">#local out</span>[<span class="fl">4</span>*i+<span class="fl">2</span>] = trgls[<span class="fl">2</span>];</span>
<span id="cb15-77"><a href="#cb15-77"></a>            <span class="kw">#local out</span>[<span class="fl">4</span>*i+<span class="fl">3</span>] = trgls[<span class="fl">3</span>];</span>
<span id="cb15-78"><a href="#cb15-78"></a>        <span class="ot">#end</span></span>
<span id="cb15-79"><a href="#cb15-79"></a>    <span class="ot">#end</span></span>
<span id="cb15-80"><a href="#cb15-80"></a>    out</span>
<span id="cb15-81"><a href="#cb15-81"></a><span class="ot">#end</span></span>
<span id="cb15-82"><a href="#cb15-82"></a></span>
<span id="cb15-83"><a href="#cb15-83"></a><span class="co">// dodecahedron ----------------------------------------------------------------</span></span>
<span id="cb15-84"><a href="#cb15-84"></a><span class="kw">#declare phi </span>= (<span class="fl">1</span>+<span class="kw">sqrt</span>(<span class="fl">5</span>))/<span class="fl">2</span>;</span>
<span id="cb15-85"><a href="#cb15-85"></a><span class="kw">#declare a </span>= <span class="fl">1</span>/<span class="kw">sqrt</span>(<span class="fl">3</span>);</span>
<span id="cb15-86"><a href="#cb15-86"></a><span class="kw">#declare b </span>= a/phi;</span>
<span id="cb15-87"><a href="#cb15-87"></a><span class="kw">#declare c </span>= a*phi;</span>
<span id="cb15-88"><a href="#cb15-88"></a><span class="kw">#declare vs </span>= <span class="kw">array</span>[<span class="fl">20</span>]</span>
<span id="cb15-89"><a href="#cb15-89"></a>  { &lt;a,  a,  a&gt;,</span>
<span id="cb15-90"><a href="#cb15-90"></a>    &lt;a,  a, -a&gt;,</span>
<span id="cb15-91"><a href="#cb15-91"></a>    &lt;a, -a,  a&gt;,</span>
<span id="cb15-92"><a href="#cb15-92"></a>    &lt;-a, -a,  a&gt;,</span>
<span id="cb15-93"><a href="#cb15-93"></a>    &lt;-a,  a, -a&gt;,</span>
<span id="cb15-94"><a href="#cb15-94"></a>    &lt;-a,  a,  a&gt;,</span>
<span id="cb15-95"><a href="#cb15-95"></a>    &lt;<span class="fl">0</span>,  b, -c&gt;,</span>
<span id="cb15-96"><a href="#cb15-96"></a>    &lt;<span class="fl">0</span>, -b, -c&gt;,</span>
<span id="cb15-97"><a href="#cb15-97"></a>    &lt;<span class="fl">0</span>, -b,  c&gt;,</span>
<span id="cb15-98"><a href="#cb15-98"></a>    &lt;c,  <span class="fl">0</span>, -b&gt;,</span>
<span id="cb15-99"><a href="#cb15-99"></a>    &lt;-c,  <span class="fl">0</span>, -b&gt;,</span>
<span id="cb15-100"><a href="#cb15-100"></a>    &lt;-c,  <span class="fl">0</span>,  b&gt;,</span>
<span id="cb15-101"><a href="#cb15-101"></a>    &lt;b,  c,  <span class="fl">0</span>&gt;,</span>
<span id="cb15-102"><a href="#cb15-102"></a>    &lt;b, -c,  <span class="fl">0</span>&gt;,</span>
<span id="cb15-103"><a href="#cb15-103"></a>    &lt;-b, -c,  <span class="fl">0</span>&gt;,</span>
<span id="cb15-104"><a href="#cb15-104"></a>    &lt;-b,  c,  <span class="fl">0</span>&gt;,</span>
<span id="cb15-105"><a href="#cb15-105"></a>    &lt;<span class="fl">0</span>,  b,  c&gt;,</span>
<span id="cb15-106"><a href="#cb15-106"></a>    &lt;a, -a, -a&gt;,</span>
<span id="cb15-107"><a href="#cb15-107"></a>    &lt;c,  <span class="fl">0</span>,  b&gt;,</span>
<span id="cb15-108"><a href="#cb15-108"></a>    &lt;-a, -a, -a&gt; };</span>
<span id="cb15-109"><a href="#cb15-109"></a><span class="kw">#declare faces </span>= <span class="kw">array</span>[<span class="fl">36</span>][<span class="fl">3</span>]</span>
<span id="cb15-110"><a href="#cb15-110"></a>    {</span>
<span id="cb15-111"><a href="#cb15-111"></a>        {<span class="fl">13</span>, <span class="fl">2</span>, <span class="fl">3</span>},</span>
<span id="cb15-112"><a href="#cb15-112"></a>        {<span class="fl">3</span>, <span class="fl">14</span>, <span class="fl">13</span>},</span>
<span id="cb15-113"><a href="#cb15-113"></a>        {<span class="fl">3</span>, <span class="fl">2</span>, <span class="fl">8</span>},</span>
<span id="cb15-114"><a href="#cb15-114"></a>        {<span class="fl">17</span>, <span class="fl">1</span>, <span class="fl">9</span>},</span>
<span id="cb15-115"><a href="#cb15-115"></a>        {<span class="fl">6</span>, <span class="fl">1</span>, <span class="fl">17</span>},</span>
<span id="cb15-116"><a href="#cb15-116"></a>        {<span class="fl">17</span>, <span class="fl">7</span>, <span class="fl">6</span>},</span>
<span id="cb15-117"><a href="#cb15-117"></a>        {<span class="fl">6</span>, <span class="fl">7</span>, <span class="fl">19</span>},</span>
<span id="cb15-118"><a href="#cb15-118"></a>        {<span class="fl">19</span>, <span class="fl">4</span>, <span class="fl">6</span>},</span>
<span id="cb15-119"><a href="#cb15-119"></a>        {<span class="fl">10</span>, <span class="fl">4</span>, <span class="fl">19</span>},</span>
<span id="cb15-120"><a href="#cb15-120"></a>        {<span class="fl">13</span>, <span class="fl">14</span>, <span class="fl">19</span>},</span>
<span id="cb15-121"><a href="#cb15-121"></a>        {<span class="fl">19</span>, <span class="fl">17</span>, <span class="fl">13</span>},</span>
<span id="cb15-122"><a href="#cb15-122"></a>        {<span class="fl">7</span>, <span class="fl">17</span>, <span class="fl">19</span>},</span>
<span id="cb15-123"><a href="#cb15-123"></a>        {<span class="fl">15</span>, <span class="fl">1</span>, <span class="fl">6</span>},</span>
<span id="cb15-124"><a href="#cb15-124"></a>        {<span class="fl">12</span>, <span class="fl">1</span>, <span class="fl">15</span>},</span>
<span id="cb15-125"><a href="#cb15-125"></a>        {<span class="fl">6</span>, <span class="fl">4</span>, <span class="fl">15</span>},</span>
<span id="cb15-126"><a href="#cb15-126"></a>        {<span class="fl">15</span>, <span class="fl">0</span>, <span class="fl">12</span>},</span>
<span id="cb15-127"><a href="#cb15-127"></a>        {<span class="fl">15</span>, <span class="fl">16</span>, <span class="fl">0</span>},</span>
<span id="cb15-128"><a href="#cb15-128"></a>        {<span class="fl">5</span>, <span class="fl">16</span>, <span class="fl">15</span>},</span>
<span id="cb15-129"><a href="#cb15-129"></a>        {<span class="fl">18</span>, <span class="fl">1</span>, <span class="fl">12</span>},</span>
<span id="cb15-130"><a href="#cb15-130"></a>        {<span class="fl">12</span>, <span class="fl">0</span>, <span class="fl">18</span>},</span>
<span id="cb15-131"><a href="#cb15-131"></a>        {<span class="fl">9</span>, <span class="fl">1</span>, <span class="fl">18</span>},</span>
<span id="cb15-132"><a href="#cb15-132"></a>        {<span class="fl">0</span>, <span class="fl">16</span>, <span class="fl">18</span>},</span>
<span id="cb15-133"><a href="#cb15-133"></a>        {<span class="fl">8</span>, <span class="fl">2</span>, <span class="fl">18</span>},</span>
<span id="cb15-134"><a href="#cb15-134"></a>        {<span class="fl">18</span>, <span class="fl">16</span>, <span class="fl">8</span>},</span>
<span id="cb15-135"><a href="#cb15-135"></a>        {<span class="fl">18</span>, <span class="fl">2</span>, <span class="fl">13</span>},</span>
<span id="cb15-136"><a href="#cb15-136"></a>        {<span class="fl">18</span>, <span class="fl">17</span>, <span class="fl">9</span>},</span>
<span id="cb15-137"><a href="#cb15-137"></a>        {<span class="fl">13</span>, <span class="fl">17</span>, <span class="fl">18</span>},</span>
<span id="cb15-138"><a href="#cb15-138"></a>        {<span class="fl">8</span>, <span class="fl">16</span>, <span class="fl">11</span>},</span>
<span id="cb15-139"><a href="#cb15-139"></a>        {<span class="fl">11</span>, <span class="fl">16</span>, <span class="fl">5</span>},</span>
<span id="cb15-140"><a href="#cb15-140"></a>        {<span class="fl">11</span>, <span class="fl">3</span>, <span class="fl">8</span>},</span>
<span id="cb15-141"><a href="#cb15-141"></a>        {<span class="fl">14</span>, <span class="fl">3</span>, <span class="fl">11</span>},</span>
<span id="cb15-142"><a href="#cb15-142"></a>        {<span class="fl">11</span>, <span class="fl">19</span>, <span class="fl">14</span>},</span>
<span id="cb15-143"><a href="#cb15-143"></a>        {<span class="fl">10</span>, <span class="fl">19</span>, <span class="fl">11</span>},</span>
<span id="cb15-144"><a href="#cb15-144"></a>        {<span class="fl">11</span>, <span class="fl">4</span>, <span class="fl">10</span>},</span>
<span id="cb15-145"><a href="#cb15-145"></a>        {<span class="fl">5</span>, <span class="fl">15</span>, <span class="fl">11</span>},</span>
<span id="cb15-146"><a href="#cb15-146"></a>        {<span class="fl">11</span>, <span class="fl">15</span>, <span class="fl">4</span>}</span>
<span id="cb15-147"><a href="#cb15-147"></a>    };</span>
<span id="cb15-148"><a href="#cb15-148"></a><span class="kw">#declare edges </span>= <span class="kw">array</span>[<span class="fl">30</span>][<span class="fl">2</span>]</span>
<span id="cb15-149"><a href="#cb15-149"></a>    {</span>
<span id="cb15-150"><a href="#cb15-150"></a>     {<span class="fl">13</span>, <span class="fl">2</span>},</span>
<span id="cb15-151"><a href="#cb15-151"></a>     {<span class="fl">3</span>, <span class="fl">14</span>},</span>
<span id="cb15-152"><a href="#cb15-152"></a>     {<span class="fl">14</span>, <span class="fl">13</span>},</span>
<span id="cb15-153"><a href="#cb15-153"></a>     {<span class="fl">3</span>, <span class="fl">8</span>},</span>
<span id="cb15-154"><a href="#cb15-154"></a>     {<span class="fl">2</span>, <span class="fl">8</span>},</span>
<span id="cb15-155"><a href="#cb15-155"></a>     {<span class="fl">17</span>, <span class="fl">9</span>},</span>
<span id="cb15-156"><a href="#cb15-156"></a>     {<span class="fl">1</span>, <span class="fl">9</span>},</span>
<span id="cb15-157"><a href="#cb15-157"></a>     {<span class="fl">6</span>, <span class="fl">1</span>},</span>
<span id="cb15-158"><a href="#cb15-158"></a>     {<span class="fl">17</span>, <span class="fl">7</span>},</span>
<span id="cb15-159"><a href="#cb15-159"></a>     {<span class="fl">7</span>, <span class="fl">6</span>},</span>
<span id="cb15-160"><a href="#cb15-160"></a>     {<span class="fl">7</span>, <span class="fl">19</span>},</span>
<span id="cb15-161"><a href="#cb15-161"></a>     {<span class="fl">4</span>, <span class="fl">6</span>},</span>
<span id="cb15-162"><a href="#cb15-162"></a>     {<span class="fl">10</span>, <span class="fl">4</span>},</span>
<span id="cb15-163"><a href="#cb15-163"></a>     {<span class="fl">10</span>, <span class="fl">19</span>},</span>
<span id="cb15-164"><a href="#cb15-164"></a>     {<span class="fl">14</span>, <span class="fl">19</span>},</span>
<span id="cb15-165"><a href="#cb15-165"></a>     {<span class="fl">17</span>, <span class="fl">13</span>},</span>
<span id="cb15-166"><a href="#cb15-166"></a>     {<span class="fl">12</span>, <span class="fl">1</span>},</span>
<span id="cb15-167"><a href="#cb15-167"></a>     {<span class="fl">12</span>, <span class="fl">15</span>},</span>
<span id="cb15-168"><a href="#cb15-168"></a>     {<span class="fl">4</span>, <span class="fl">15</span>},</span>
<span id="cb15-169"><a href="#cb15-169"></a>     {<span class="fl">0</span>, <span class="fl">12</span>},</span>
<span id="cb15-170"><a href="#cb15-170"></a>     {<span class="fl">16</span>, <span class="fl">0</span>},</span>
<span id="cb15-171"><a href="#cb15-171"></a>     {<span class="fl">5</span>, <span class="fl">16</span>},</span>
<span id="cb15-172"><a href="#cb15-172"></a>     {<span class="fl">5</span>, <span class="fl">15</span>},</span>
<span id="cb15-173"><a href="#cb15-173"></a>     {<span class="fl">0</span>, <span class="fl">18</span>},</span>
<span id="cb15-174"><a href="#cb15-174"></a>     {<span class="fl">9</span>, <span class="fl">18</span>},</span>
<span id="cb15-175"><a href="#cb15-175"></a>     {<span class="fl">2</span>, <span class="fl">18</span>},</span>
<span id="cb15-176"><a href="#cb15-176"></a>     {<span class="fl">16</span>, <span class="fl">8</span>},</span>
<span id="cb15-177"><a href="#cb15-177"></a>     {<span class="fl">11</span>, <span class="fl">5</span>},</span>
<span id="cb15-178"><a href="#cb15-178"></a>     {<span class="fl">11</span>, <span class="fl">3</span>},</span>
<span id="cb15-179"><a href="#cb15-179"></a>     {<span class="fl">10</span>, <span class="fl">11</span>}</span>
<span id="cb15-180"><a href="#cb15-180"></a>    };</span>
<span id="cb15-181"><a href="#cb15-181"></a>        </span>
<span id="cb15-182"><a href="#cb15-182"></a><span class="kw">#declare s </span>= <span class="fl">0.3</span>;</span>
<span id="cb15-183"><a href="#cb15-183"></a><span class="kw">#declare depth </span>= <span class="fl">6</span>;</span>
<span id="cb15-184"><a href="#cb15-184"></a></span>
<span id="cb15-185"><a href="#cb15-185"></a><span class="kw">#declare htriangles </span>= <span class="kw">array</span>[<span class="kw">dimension_size</span>(faces,<span class="fl">1</span>)];</span>
<span id="cb15-186"><a href="#cb15-186"></a>#for(i, <span class="fl">0</span>, <span class="kw">dimension_size</span>(faces,<span class="fl">1</span>)-<span class="fl">1</span>)</span>
<span id="cb15-187"><a href="#cb15-187"></a>    <span class="kw">#declare htriangles</span>[i] = </span>
<span id="cb15-188"><a href="#cb15-188"></a>        subdiv(vs[faces[i][<span class="fl">0</span>]],vs[faces[i][<span class="fl">1</span>]],vs[faces[i][<span class="fl">2</span>]], s, depth);</span>
<span id="cb15-189"><a href="#cb15-189"></a><span class="ot">#end</span></span>
<span id="cb15-190"><a href="#cb15-190"></a></span>
<span id="cb15-191"><a href="#cb15-191"></a><span class="kw">#declare segments </span>= <span class="kw">array</span>[<span class="kw">dimension_size</span>(edges,<span class="fl">1</span>)];</span>
<span id="cb15-192"><a href="#cb15-192"></a>#for(i, <span class="fl">0</span>, <span class="kw">dimension_size</span>(edges,<span class="fl">1</span>)-<span class="fl">1</span>)</span>
<span id="cb15-193"><a href="#cb15-193"></a>    <span class="kw">#declare segments</span>[i] = </span>
<span id="cb15-194"><a href="#cb15-194"></a>        gyrosegment(vs[edges[i][<span class="fl">0</span>]],vs[edges[i][<span class="fl">1</span>]],s,<span class="fl">100</span>);</span>
<span id="cb15-195"><a href="#cb15-195"></a><span class="ot">#end</span></span>
<span id="cb15-196"><a href="#cb15-196"></a></span>
<span id="cb15-197"><a href="#cb15-197"></a><span class="kw">object</span>{</span>
<span id="cb15-198"><a href="#cb15-198"></a>    <span class="kw">union</span>{</span>
<span id="cb15-199"><a href="#cb15-199"></a>        <span class="kw">mesh</span>{</span>
<span id="cb15-200"><a href="#cb15-200"></a>            #for(j, <span class="fl">0</span>, <span class="kw">dimension_size</span>(faces,<span class="fl">1</span>)-<span class="fl">1</span>)</span>
<span id="cb15-201"><a href="#cb15-201"></a>                <span class="kw">#local htriangle </span>= htriangles[j];</span>
<span id="cb15-202"><a href="#cb15-202"></a>                #for(i, <span class="fl">0</span>, <span class="kw">dimension_size</span>(htriangle,<span class="fl">1</span>)-<span class="fl">1</span>)</span>
<span id="cb15-203"><a href="#cb15-203"></a>                    <span class="kw">triangle</span> {</span>
<span id="cb15-204"><a href="#cb15-204"></a>                        htriangle[i][<span class="fl">0</span>], htriangle[i][<span class="fl">1</span>], htriangle[i][<span class="fl">2</span>]</span>
<span id="cb15-205"><a href="#cb15-205"></a>                    }</span>
<span id="cb15-206"><a href="#cb15-206"></a>                <span class="ot">#end</span></span>
<span id="cb15-207"><a href="#cb15-207"></a>            <span class="ot">#end</span></span>
<span id="cb15-208"><a href="#cb15-208"></a>            <span class="kw">texture</span> {</span>
<span id="cb15-209"><a href="#cb15-209"></a>                Chrome_Metal</span>
<span id="cb15-210"><a href="#cb15-210"></a>                <span class="kw">finish</span> {</span>
<span id="cb15-211"><a href="#cb15-211"></a>                    <span class="kw">ambient</span> <span class="fl">0.01</span></span>
<span id="cb15-212"><a href="#cb15-212"></a>                    <span class="kw">diffuse</span> <span class="fl">2</span></span>
<span id="cb15-213"><a href="#cb15-213"></a>                    <span class="kw">reflection</span> <span class="fl">0</span></span>
<span id="cb15-214"><a href="#cb15-214"></a>                    <span class="kw">brilliance</span> <span class="fl">8</span></span>
<span id="cb15-215"><a href="#cb15-215"></a>                    <span class="kw">specular</span> <span class="fl">0.8</span></span>
<span id="cb15-216"><a href="#cb15-216"></a>                    <span class="kw">roughness</span> <span class="fl">0.1</span></span>
<span id="cb15-217"><a href="#cb15-217"></a>                }</span>
<span id="cb15-218"><a href="#cb15-218"></a>            }</span>
<span id="cb15-219"><a href="#cb15-219"></a>        }</span>
<span id="cb15-220"><a href="#cb15-220"></a>        #for(j, <span class="fl">0</span>, <span class="kw">dimension_size</span>(edges,<span class="fl">1</span>)-<span class="fl">1</span>)</span>
<span id="cb15-221"><a href="#cb15-221"></a>            <span class="kw">#local segment </span>= segments[j];</span>
<span id="cb15-222"><a href="#cb15-222"></a>            <span class="kw">sphere_sweep</span>{</span>
<span id="cb15-223"><a href="#cb15-223"></a>                <span class="kw">linear_spline</span> <span class="fl">101</span></span>
<span id="cb15-224"><a href="#cb15-224"></a>                #for(k,<span class="fl">0</span>,<span class="fl">100</span>)</span>
<span id="cb15-225"><a href="#cb15-225"></a>                    segment[k] <span class="fl">0.01</span></span>
<span id="cb15-226"><a href="#cb15-226"></a>                <span class="ot">#end</span></span>
<span id="cb15-227"><a href="#cb15-227"></a>                <span class="kw">texture</span>{ </span>
<span id="cb15-228"><a href="#cb15-228"></a>                    Gold_Metal</span>
<span id="cb15-229"><a href="#cb15-229"></a>                    <span class="kw">finish</span> {</span>
<span id="cb15-230"><a href="#cb15-230"></a>                        <span class="kw">ambient</span> <span class="fl">0.01</span></span>
<span id="cb15-231"><a href="#cb15-231"></a>                        <span class="kw">diffuse</span> <span class="fl">2</span></span>
<span id="cb15-232"><a href="#cb15-232"></a>                        <span class="kw">reflection</span> <span class="fl">0</span></span>
<span id="cb15-233"><a href="#cb15-233"></a>                        <span class="kw">brilliance</span> <span class="fl">8</span></span>
<span id="cb15-234"><a href="#cb15-234"></a>                        <span class="kw">specular</span> <span class="fl">0.8</span></span>
<span id="cb15-235"><a href="#cb15-235"></a>                        <span class="kw">roughness</span> <span class="fl">0.1</span></span>
<span id="cb15-236"><a href="#cb15-236"></a>                    }</span>
<span id="cb15-237"><a href="#cb15-237"></a>                }</span>
<span id="cb15-238"><a href="#cb15-238"></a>            }</span>
<span id="cb15-239"><a href="#cb15-239"></a>        <span class="ot">#end</span></span>
<span id="cb15-240"><a href="#cb15-240"></a>    }</span>
<span id="cb15-241"><a href="#cb15-241"></a>    <span class="kw">rotate</span> &lt;<span class="fl">0</span>,-<span class="fl">20</span>,<span class="fl">0</span>&gt;</span>
<span id="cb15-242"><a href="#cb15-242"></a>    <span class="kw">rotate</span> &lt;-<span class="fl">60</span>,<span class="fl">0</span>,<span class="fl">0</span>&gt;</span>
<span id="cb15-243"><a href="#cb15-243"></a>}</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/hyperbolicPolyhedra-povray.png"
        />
      </p>
      <h2 id="update-2019-04-09">Update 2019-04-09</h2>
      <p>
        I’ve realized that the <code>addNormals</code> function of the
        <code>rgl</code> package is not appropriate when there are duplicated
        vertices in the mesh (it adds different normals to the duplicated
        vertices). And there are (a lot of) duplicated vertices in the mesh
        created by the <code>gyrosubdiv</code> function.
      </p>
      <p>
        To remove the duplicated vertices, one can use the
        <code>vcgClean</code> function of the <code>Rvcg</code> package (which
        also adds the normals). Observe the difference:
      </p>
      <div class="sourceCode" id="cb16">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb16-1"><a href="#cb16-1"></a>idx &lt;-<span class="st"> </span>faces[<span class="dv">1</span>,]</span>
<span id="cb16-2"><a href="#cb16-2"></a>A &lt;-<span class="st"> </span>vertices[idx[<span class="dv">1</span>],]</span>
<span id="cb16-3"><a href="#cb16-3"></a>B &lt;-<span class="st"> </span>vertices[idx[<span class="dv">2</span>],]</span>
<span id="cb16-4"><a href="#cb16-4"></a>C &lt;-<span class="st"> </span>vertices[idx[<span class="dv">3</span>],]</span>
<span id="cb16-5"><a href="#cb16-5"></a>mesh &lt;-<span class="st"> </span><span class="kw">gyrosubdiv</span>(A, B, C, <span class="dt">s =</span> s, <span class="dt">depth =</span> <span class="dv">4</span>)</span>
<span id="cb16-6"><a href="#cb16-6"></a><span class="kw">view3d</span>(<span class="dv">30</span>, <span class="dv">30</span>, <span class="dt">zoom =</span> <span class="fl">0.9</span>)</span>
<span id="cb16-7"><a href="#cb16-7"></a><span class="kw">shade3d</span>(mesh, <span class="dt">color =</span> <span class="st">"navy"</span>)</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/hyperbolicPolyhedra-triangle-dupVertices-1.png"
        />
      </p>
      <div class="sourceCode" id="cb17">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb17-1"><a href="#cb17-1"></a>mesh &lt;-<span class="st"> </span>Rvcg<span class="op">::</span><span class="kw">vcgClean</span>(mesh, <span class="dt">sel =</span> <span class="kw">c</span>(<span class="dv">0</span>,<span class="dv">7</span>), <span class="dt">silent =</span> <span class="ot">TRUE</span>)</span>
<span id="cb17-2"><a href="#cb17-2"></a><span class="kw">view3d</span>(<span class="dv">30</span>, <span class="dv">30</span>, <span class="dt">zoom =</span> <span class="fl">0.9</span>)</span>
<span id="cb17-3"><a href="#cb17-3"></a><span class="kw">shade3d</span>(mesh, <span class="dt">color =</span> <span class="st">"navy"</span>)</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/hyperbolicPolyhedra-triangle-undupVertices-1.png"
        />
      </p>
      <p>So a better <code>gyrosubdiv</code> function is:</p>
      <div class="sourceCode" id="cb18">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb18-1"><a href="#cb18-1"></a>gyrosubdiv &lt;-<span class="st"> </span><span class="cf">function</span>(A1, A2, A3, <span class="dt">s=</span><span class="dv">1</span>, <span class="dt">depth=</span><span class="dv">5</span>){</span>
<span id="cb18-2"><a href="#cb18-2"></a>  subd &lt;-<span class="st"> </span><span class="kw">gyrosubdiv0</span>(A1, A2, A3, s)</span>
<span id="cb18-3"><a href="#cb18-3"></a>  <span class="cf">for</span>(i <span class="cf">in</span> <span class="kw">seq_len</span>(depth<span class="dv">-1</span>)){</span>
<span id="cb18-4"><a href="#cb18-4"></a>    subd &lt;-<span class="st"> </span>purrr<span class="op">::</span><span class="kw">flatten</span>(<span class="kw">lapply</span>(subd, <span class="cf">function</span>(triplet){</span>
<span id="cb18-5"><a href="#cb18-5"></a>      <span class="kw">gyrosubdiv0</span>(triplet[[<span class="dv">1</span>]], triplet[[<span class="dv">2</span>]], triplet[[<span class="dv">3</span>]], s)</span>
<span id="cb18-6"><a href="#cb18-6"></a>    }))</span>
<span id="cb18-7"><a href="#cb18-7"></a>  }</span>
<span id="cb18-8"><a href="#cb18-8"></a>  vertices &lt;-<span class="st"> </span></span>
<span id="cb18-9"><a href="#cb18-9"></a><span class="st">    </span><span class="kw">do.call</span>(cbind, </span>
<span id="cb18-10"><a href="#cb18-10"></a>            <span class="kw">lapply</span>(subd, <span class="cf">function</span>(triplet) <span class="kw">do.call</span>(cbind, triplet)))</span>
<span id="cb18-11"><a href="#cb18-11"></a>  indices &lt;-<span class="st"> </span><span class="kw">matrix</span>(<span class="dv">1</span><span class="op">:</span><span class="kw">ncol</span>(vertices), <span class="dt">nrow =</span> <span class="dv">3</span>)</span>
<span id="cb18-12"><a href="#cb18-12"></a>  mesh &lt;-<span class="st"> </span><span class="kw">tmesh3d</span>(</span>
<span id="cb18-13"><a href="#cb18-13"></a>    <span class="dt">vertices =</span> vertices,</span>
<span id="cb18-14"><a href="#cb18-14"></a>    <span class="dt">indices =</span> indices,</span>
<span id="cb18-15"><a href="#cb18-15"></a>    <span class="dt">homogeneous =</span> <span class="ot">FALSE</span></span>
<span id="cb18-16"><a href="#cb18-16"></a>  )</span>
<span id="cb18-17"><a href="#cb18-17"></a>  Rvcg<span class="op">::</span><span class="kw">vcgClean</span>(mesh, <span class="dt">sel =</span> <span class="kw">c</span>(<span class="dv">0</span>,<span class="dv">7</span>), <span class="dt">silent =</span> <span class="ot">TRUE</span>)</span>
<span id="cb18-18"><a href="#cb18-18"></a>}</span></code></pre>
      </div>
      <h2 id="reference">Reference</h2>
      <ul>
        <li>
          A. A. Ungar.
          <em
            >Analytic Hyperbolic Geometry: Mathematical Foundations And
            Applications</em
          >. World Scientific Pub Co Inc, 2005.
        </li>
      </ul>
    </div>
  </div>
</div>
]]></description>
      <pubDate>Fri, 05 Apr 2019 00:00:00 UT</pubDate>
      <guid>https://laustep.github.io/stlahblog/posts/hyperbolicPolyhedra.html</guid>
      <dc:creator>Stéphane Laurent</dc:creator>
      <category>R</category>
    </item>
    <item>
      <title>Simulation of the fractional noncentral Wishart distribution</title>
      <link>https://laustep.github.io/stlahblog/posts/WishartFractional.html</link>
      <description><![CDATA[<div class="container-fluid">
  <div class="main col-sm-12">
    <div class="content">
      <p>
        It is well known how to simulate the noncentral Wishart distribution
        when the number of degrees of freedom
        <span class="math inline">\(\nu\)</span> and the dimension
        <span class="math inline">\(d\)</span> satisfy
        <span class="math inline">\(\nu &gt; 2d-1\)</span>, or when
        <span class="math inline">\(\nu \geq d\)</span> is an integer. In their
        paper
        <a href="https://arxiv.org/abs/1006.2281"
          >Exact and high-order discretization schemes for Wishart processes and
          their affine extensions</a
        >, Ahdida &amp; Alfonsi provide a method that allows to simulate the
        Wishart process of dimension <span class="math inline">\(d\)</span> for
        any number of degrees of freedom
        <span class="math inline">\(\nu \geq d-1\)</span> and without
        restrictions on the other parameters. This method allows to simulate the
        noncentral Wishart distribution, in the way we will expose now.
      </p>
      <h1 id="two-properties-of-the-noncentral-wishart-distribution">
        Two properties of the noncentral Wishart distribution
      </h1>
      <p>We will need the two following properties.</p>
      <p>
        Recall that the characteristic function of the noncentral Wishart
        distribution
        <span class="math inline">\(\mathcal{W}(\nu, \Sigma, \Theta)\)</span> at
        <span class="math inline">\(Z\)</span> is
        <span class="math display"
          >\[ \phi_{\nu,\Sigma,\Theta}(Z) =
          \frac{\exp\Bigl(i\textrm{tr}\bigl({(I_d - 2i
          Z\Sigma)}^{-1}Z\Theta\bigr)\Bigr)}{{\det(I_d - 2i
          Z\Sigma)}^{\frac{\nu}{2}}}. \]</span
        >
      </p>
      <p>
        <span class="math inline">\(\bullet\)</span>
        <strong>First property of the Wishart distribution</strong>. Using the
        characteristic function, it is easy to check that
        <span class="math inline"
          >\(A W A' \sim \mathcal{W}(\nu, A\Sigma A', A\Theta A')\)</span
        >
        when
        <span class="math inline"
          >\(W \sim \mathcal{W}(\nu, \Sigma, \Theta)\)</span
        >.
      </p>
      <p>
        <span class="math inline">\(\bullet\)</span>
        <strong>Second property of the Wishart distribution</strong>. Using the
        characteristic function, it is not hard to check that if
        <span class="math inline">\(W_1\)</span> and
        <span class="math inline">\(W_2\)</span> are two random matrices such
        that
        <span class="math inline"
          >\(W_1 \sim \mathcal{W}(\nu, \Sigma_1, \Theta)\)</span
        >
        and
        <span class="math inline"
          >\((W_2 \mid W_1) \sim \mathcal{W}(\nu, \Sigma_2, W_1)\)</span
        >, then
        <span class="math inline"
          >\(W_2 \sim \mathcal{W}(\nu, \Sigma_1+\Sigma_2, \Theta)\)</span
        >. This result is proved in A&amp;A’s paper only for the covariance
        matrices <span class="math inline">\(J_d^i\)</span> we will see later,
        by means of another method.
      </p>
      <p>
        Let’s prove this result with the characteristic function. The
        conditional characteristic function of
        <span class="math inline">\(W_2\)</span> given
        <span class="math inline">\(W_1\)</span> at
        <span class="math inline">\(Z\)</span> is
        <span class="math display"
          >\[ \frac{\exp\Bigl(i\textrm{tr}\bigl({(I_d - 2i
          Z\Sigma_2)}^{-1}ZW_1\bigr)\Bigr)}{{\det(I_d - 2i
          Z\Sigma_2)}^{\frac{\nu}{2}}}. \]</span
        >
        The characteristic function of
        <span class="math inline">\(W_2\)</span> is obtained by taking the
        expectation of this expression, and doing so we get
        <span class="math display"
          >\[ \frac{\phi_{\nu,\Sigma_1,\Theta}\bigl({(I_d - 2i
          Z\Sigma_2)}^{-1}Z\bigr)}{{\det(I_d - 2i Z\Sigma_2)}^{\frac{\nu}{2}}} =
          \frac{\exp\left(i\textrm{tr}\Bigl({\bigr(I_d - 2i {(I_d - 2i
          Z\Sigma_2)}^{-1}Z\Sigma_1\bigl)}^{-1}{(I_d - 2i
          Z\Sigma_2)}^{-1}Z\Theta\Bigr)\right)}{{\det(I_d - 2i
          Z\Sigma_2)}^{\frac{\nu}{2}} {\det(I_d - 2i {\bigl(I_d - 2i
          Z\Sigma_2)}^{-1}Z\Sigma_1\bigr)}^{\frac{\nu}{2}}}. \]</span
        >
      </p>
      <p>
        It is easy to check that the denominator is
        <span class="math inline"
          >\({\det\bigl(I_d -
          2iZ(\Sigma_1+\Sigma_2)\bigr)}^{\frac{\nu}{2}}\)</span
        >. The expression inside
        <span class="math inline">\(\textrm{tr}(\ldots)\)</span> at the
        numerator is
        <span class="math display"
          >\[ {\Bigl((I_d - 2i Z\Sigma_2)\bigr(I_d - 2i {(I_d - 2i
          Z\Sigma_2)}^{-1}Z\Sigma_1\bigl)\Bigr)}^{-1}Z\Theta = {\bigr(I_d -
          2iZ(\Sigma_1+\Sigma_2)\bigl)}^{-1}Z\Theta. \]</span
        >
      </p>
      <p>
        Thus we find that the the characteristic function of
        <span class="math inline">\(W_2\)</span> is
        <span class="math inline">\(\phi_{\nu, \Sigma_1+\Sigma_2,\Theta}\)</span
        >, that is to say
        <span class="math inline"
          >\(W_2 \sim \mathcal{W}(\nu, \Sigma_1+\Sigma_2, \Theta)\)</span
        >.
      </p>
      <h1 id="aas-simulation-method">A&amp;A’s simulation method</h1>
      <p>A&amp;A’s simulation method has three steps:</p>
      <ul>
        <li>
          <p>
            it firstly gives an algorithm to simulate
            <span class="math inline">\(\mathcal{W}(\nu, J_d^1, \Theta)\)</span
            >, denoting by <span class="math inline">\(J_d^i\)</span> the
            <span class="math inline">\(d \times d\)</span> covariance matrix
            whose all entries are equal to zero except the
            <span class="math inline">\((i,i)\)</span>-entry which is equal to
            one;
          </p>
        </li>
        <li>
          <p>
            using the first step and the two properties of the Wishart
            distribution that we have seen, it provides a way to simulate
            <span class="math inline">\(\mathcal{W}(\nu, I_d^n, \Theta)\)</span>
            where
            <span class="math inline">\(I_d^n = J_d^1 + \ldots + J_d^n\)</span>;
          </p>
        </li>
        <li>
          <p>
            using the second step and the first property of the Wishart
            distribution that we have seen, it provides a way to simulate
            <span class="math inline"
              >\(\mathcal{W}(\nu, \Sigma, \Theta)\)</span
            >
            for any covariance matrix
            <span class="math inline">\(\Sigma\)</span>.
          </p>
        </li>
      </ul>
      <p>
        <span class="math inline">\(\bullet\)</span>
        <strong
          >Simulation of
          <span class="math inline"
            >\(\mathcal{W}(\nu, J_d^1, \Theta)\)</span
          ></strong
        >. This algorithm runs as follows. Let
        <span class="math inline">\((L,M,P)\)</span> be an
        <a
          href="https://laustep.github.io/stlahblog/posts/extendedCholesky.html"
          >extended Cholesky decomposition</a
        >
        of <span class="math inline">\(\Theta_{2:d,2:d}\)</span>. Set
        <span class="math inline"
          >\(Q = \begin{pmatrix} 1 &amp; 0 \\ 0 &amp; P \end{pmatrix}\)</span
        >
        and
        <span class="math inline">\(\widetilde{\Theta} = Q\Theta Q'\)</span>,
        then set
        <span class="math inline"
          >\(u = L^{-1}\widetilde{\Theta}_{1, 2:(r+1)}'\)</span
        >
        and
        <span class="math inline"
          >\(v = \widetilde{\Theta}_{1,1} - \sum_{i=1}^r u_i^2\)</span
        >. Take
        <span class="math inline"
          >\(Z_1, \ldots, Z_r \sim_{\text{iid}} \mathcal{N}(0,1)\)</span
        >
        and set <span class="math inline">\(G_i = u_i + Z_i\)</span>. Finally,
        take
        <span class="math inline">\(X \sim \chi^2_{\nu-r, v}\)</span>
        (noncentral chi-squared distribution) independent of the
        <span class="math inline">\(Z_i\)</span>, and set
        <span class="math display"
          >\[ W = Q' \begin{pmatrix} 1 &amp; 0 &amp; 0 \\ 0 &amp; L &amp; 0 \\ 0
          &amp; M &amp; I_{d-r-1} \end{pmatrix} \begin{pmatrix} X + \sum_{i=1}^r
          G_i^2 &amp; G' &amp; 0 \\ G &amp; I_r &amp; 0 \\ 0 &amp; 0 &amp; 0
          \end{pmatrix} \begin{pmatrix} 1 &amp; 0 &amp; 0 \\ 0 &amp; L' &amp; M'
          \\ 0 &amp; 0 &amp; I_{d-r-1} \end{pmatrix} Q. \]</span
        >
        Then A&amp;A have shown that
        <span class="math inline"
          >\(W \sim \mathcal{W}(\nu, J_d^1, \Theta)\)</span
        >.
      </p>
      <p>
        <span class="math inline">\(\bullet\)</span>
        <strong
          >Simulation of
          <span class="math inline"
            >\(\mathcal{W}(\nu, I_d^n, \Theta)\)</span
          ></strong
        >. Let <span class="math inline">\(P\)</span> be the permutation matrix
        exchanging rows <span class="math inline">\(1\)</span> and
        <span class="math inline">\(2\)</span>. Using the previous algorithm,
        simulate
        <span class="math inline"
          >\(W_1 \sim \mathcal{W}(\nu, J_d^1, \Theta)\)</span
        >. By the first property of
        <span class="math inline">\(\mathcal{W}\)</span> we have seen,
        <span class="math inline"
          >\(P W_1 P \sim \mathcal{W}(\nu, J_d^2, P\Theta P)\)</span
        >. Then, still using the previous algorithm, simulate
        <span class="math inline"
          >\((W_2 \mid W_1) \sim \mathcal{W}(\nu, J_d^1, P W_1 P)\)</span
        >. By the second property of
        <span class="math inline">\(\mathcal{W}\)</span> we have seen,
        <span class="math inline"
          >\(W_2 \sim \mathcal{W}(\nu, I_d^2, P \Theta P)\)</span
        >. And by the first property,
        <span class="math inline"
          >\(P W_2 P \sim \mathcal{W}(\nu, I_d^2, \Theta)\)</span
        >. Continuing so on, we can simulate
        <span class="math inline">\(\mathcal{W}(\nu, I_d^n, \Theta)\)</span> for
        any <span class="math inline">\(n \leq d\)</span>.
      </p>
      <p>
        <span class="math inline">\(\bullet\)</span>
        <strong
          >Simulation of
          <span class="math inline"
            >\(\mathcal{W}(\nu, \Sigma, \Theta)\)</span
          ></strong
        >. Finally, given any covariance matrix
        <span class="math inline">\(\Sigma\)</span> of rank
        <span class="math inline">\(n\)</span>, take the
        <span class="math inline">\(\widetilde{C}\)</span> matrix of an extended
        Cholesky decomposition of
        <span class="math inline">\(\Sigma\)</span> with permutation matrix
        <span class="math inline">\(P\)</span>, and set
        <span class="math inline">\(A = P'\widetilde{C}\)</span>. Simulate
        <span class="math inline"
          >\(Y \sim \mathcal{W}\bigl(\nu, I_d^n,
          A^{-1}\Theta{(A^{-1})}'\bigr)\)</span
        >
        with the previous algorithm and finally set
        <span class="math inline">\(W = AYA'\)</span>, so that
        <span class="math inline"
          >\(W \sim \mathcal{W}(\nu, \Sigma, \Theta)\)</span
        >
        by the first property and by the property of the Cholesky decomposition.
      </p>
      <h1 id="checking">Checking</h1>
      <p>
        The algorithm is implemented in my package
        <a href="https://github.com/stla/matrixsampling">matrixsampling</a>.
        Let’s try it.
      </p>
      <div class="sourceCode" id="cb1">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true"></a><span class="kw">library</span>(matrixsampling)</span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true"></a>p &lt;-<span class="st"> </span><span class="dv">6</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true"></a>nu &lt;-<span class="st"> </span><span class="fl">6.3</span></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true"></a>Sigma &lt;-<span class="st"> </span><span class="kw">toeplitz</span>(p<span class="op">:</span><span class="dv">1</span>)</span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true"></a>Theta &lt;-<span class="st"> </span><span class="kw">matrix</span>(<span class="dv">1</span>, p, p)</span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true"></a>nsims &lt;-<span class="st"> </span><span class="dv">100000</span></span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true"></a>W &lt;-<span class="st"> </span><span class="kw">rwishart</span>(nsims, nu, Sigma, Theta)</span></code></pre>
      </div>
      <p>
        As expected, the average simulated matrix is close to the theoretical
        mean <span class="math inline">\(\nu \Sigma + \Theta\)</span>:
      </p>
      <div class="sourceCode" id="cb2">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true"></a><span class="kw">round</span>((nu<span class="op">*</span>Sigma <span class="op">+</span><span class="st"> </span>Theta) <span class="op">-</span><span class="st"> </span><span class="kw">apply</span>(W, <span class="dv">1</span><span class="op">:</span><span class="dv">2</span>, mean), <span class="dv">2</span>)</span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true"></a><span class="co">##       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]</span></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true"></a><span class="co">## [1,] -0.05 -0.04  0.00  0.00  0.02  0.04</span></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true"></a><span class="co">## [2,] -0.04 -0.06 -0.03 -0.03  0.00  0.01</span></span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true"></a><span class="co">## [3,]  0.00 -0.03 -0.04 -0.06 -0.05 -0.05</span></span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true"></a><span class="co">## [4,]  0.00 -0.03 -0.06 -0.07 -0.04 -0.07</span></span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true"></a><span class="co">## [5,]  0.02  0.00 -0.05 -0.04 -0.03 -0.05</span></span>
<span id="cb2-8"><a href="#cb2-8" aria-hidden="true"></a><span class="co">## [6,]  0.04  0.01 -0.05 -0.07 -0.05 -0.09</span></span></code></pre>
      </div>
      <p>
        Let’s compare the theoretical characteristic function to its
        approximation obtained from the simulations:
      </p>
      <div class="sourceCode" id="cb3">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb3-1"><a href="#cb3-1"></a>z &lt;-<span class="st"> </span><span class="kw">seq</span>(<span class="fl">0.001</span>, <span class="fl">0.004</span>, <span class="dt">length.out =</span> <span class="dv">20</span>)</span>
<span id="cb3-2"><a href="#cb3-2"></a>Z &lt;-<span class="st"> </span><span class="kw">sapply</span>(z, <span class="cf">function</span>(z){</span>
<span id="cb3-3"><a href="#cb3-3"></a>  z<span class="op">*</span><span class="kw">diag</span>(p) <span class="op">+</span><span class="st"> </span><span class="kw">matrix</span>(z, p, p)</span>
<span id="cb3-4"><a href="#cb3-4"></a>}, <span class="dt">simplify=</span><span class="ot">FALSE</span>)</span>
<span id="cb3-5"><a href="#cb3-5"></a>tr &lt;-<span class="st"> </span><span class="cf">function</span>(A) <span class="kw">sum</span>(<span class="kw">diag</span>(A))</span>
<span id="cb3-6"><a href="#cb3-6"></a>Phi_theoretical &lt;-<span class="st"> </span><span class="kw">sapply</span>(Z, <span class="cf">function</span>(Z){</span>
<span id="cb3-7"><a href="#cb3-7"></a>             complexplus<span class="op">::</span><span class="kw">Det</span>(<span class="kw">diag</span>(p) <span class="op">-</span><span class="st"> </span><span class="dv">2</span><span class="op">*</span>1i<span class="op">*</span>Z<span class="op">%*%</span>Sigma)<span class="op">^</span>(<span class="op">-</span>nu<span class="op">/</span><span class="dv">2</span>) <span class="op">*</span><span class="st"> </span></span>
<span id="cb3-8"><a href="#cb3-8"></a><span class="st">             </span><span class="kw">exp</span>(1i<span class="op">*</span><span class="kw">tr</span>(<span class="kw">solve</span>(<span class="kw">diag</span>(p) <span class="op">-</span><span class="st"> </span><span class="dv">2</span><span class="op">*</span>1i<span class="op">*</span>Z<span class="op">%*%</span>Sigma) <span class="op">%*%</span><span class="st"> </span>Z <span class="op">%*%</span><span class="st"> </span>Theta))</span>
<span id="cb3-9"><a href="#cb3-9"></a>})</span>
<span id="cb3-10"><a href="#cb3-10"></a>Phi_sims &lt;-<span class="st"> </span><span class="kw">sapply</span>(Z, <span class="cf">function</span>(Z){</span>
<span id="cb3-11"><a href="#cb3-11"></a>  <span class="kw">mean</span>(<span class="kw">apply</span>(W, <span class="dv">3</span>, <span class="cf">function</span>(W){</span>
<span id="cb3-12"><a href="#cb3-12"></a>    <span class="kw">exp</span>(1i<span class="op">*</span><span class="kw">tr</span>(Z<span class="op">%*%</span>W))</span>
<span id="cb3-13"><a href="#cb3-13"></a>  }))</span>
<span id="cb3-14"><a href="#cb3-14"></a>})</span>
<span id="cb3-15"><a href="#cb3-15"></a><span class="kw">layout</span>(<span class="kw">t</span>(<span class="dv">1</span><span class="op">:</span><span class="dv">2</span>))</span>
<span id="cb3-16"><a href="#cb3-16"></a><span class="kw">plot</span>(z, <span class="kw">Re</span>(Phi_theoretical), <span class="dt">type=</span><span class="st">"o"</span>, <span class="dt">pch=</span><span class="dv">19</span>)</span>
<span id="cb3-17"><a href="#cb3-17"></a><span class="kw">lines</span>(z, <span class="kw">Re</span>(Phi_sims), <span class="dt">type=</span><span class="st">"o"</span>, <span class="dt">pch=</span><span class="dv">19</span>, <span class="dt">col=</span><span class="st">"red"</span>)</span>
<span id="cb3-18"><a href="#cb3-18"></a><span class="kw">plot</span>(z, <span class="kw">Im</span>(Phi_theoretical), <span class="dt">type=</span><span class="st">"o"</span>, <span class="dt">pch=</span><span class="dv">19</span>)</span>
<span id="cb3-19"><a href="#cb3-19"></a><span class="kw">lines</span>(z, <span class="kw">Im</span>(Phi_sims), <span class="dt">type=</span><span class="st">"o"</span>, <span class="dt">pch=</span><span class="dv">19</span>, <span class="dt">col=</span><span class="st">"red"</span>)</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/WishFrac-WishartCF-1.png"
        />
      </p>
    </div>
  </div>
</div>
]]></description>
      <pubDate>Sat, 09 Dec 2017 00:00:00 UT</pubDate>
      <guid>https://laustep.github.io/stlahblog/posts/WishartFractional.html</guid>
      <dc:creator>Stéphane Laurent</dc:creator>
      <category>R</category>
    </item>
    <item>
      <title>Owen Q-function by numerical integration</title>
      <link>https://laustep.github.io/stlahblog/posts/OwenQintegration.html</link>
      <description><![CDATA[<div class="container-fluid">
  <div class="main col-sm-12">
    <div class="content">
      <ul>
        <li>
          <a href="#the-first-owen-q-function"
            >The first Owen <span class="math inline">\(Q\)</span>-function</a
          >
        </li>
        <li>
          <a href="#integration-with-r---failure"
            >Integration with R - failure</a
          >
        </li>
        <li>
          <a href="#integration-with-rcppnumerical"
            >Integration with <code>RcppNumerical</code></a
          >
        </li>
        <li><a href="#increasing-the-accuracy">Increasing the accuracy</a></li>
        <li>
          <a href="#when-the-numerical-integration-beats-owens-algorithm"
            >When the numerical integration beats Owen’s algorithm</a
          >
        </li>
        <li><a href="#benchmarks">Benchmarks</a></li>
        <li><a href="#reference">Reference</a></li>
      </ul>
      <h2 id="the-first-owen-q-function">
        The first Owen <span class="math inline">\(Q\)</span>-function
      </h2>
      <p>
        My package <a href="https://github.com/stla/OwenQ">OwenQ</a> provides an
        implementation of the function I call the first Owen
        <span class="math inline">\(Q\)</span>-function, defined by
        <span class="math display"
          >\[ Q_1(\nu, t, \delta, R) =
          \frac{1}{\Gamma\left(\frac{\nu}{2}\right)2^{\frac12(\nu-2)}} \int_0^R
          \Phi\left(\frac{tx}{\sqrt{\nu}}-\delta\right) x^{\nu-1}
          e^{-\frac{x^2}{2}} \mathrm{d}x. \]</span
        >
      </p>
      <p>
        The implementation is done in <code>Rcpp</code>, following the algorithm
        given by Owen (1965) for integer values of the number of degrees of
        freedom <span class="math inline">\(\nu\)</span>. For odd values of
        <span class="math inline">\(\nu\)</span>, this algorithm resorts to the
        evaluation of the Owen <span class="math inline">\(T\)</span>-function.
        The <code>OwenQ</code> package uses the implementation of the Owen
        <span class="math inline">\(T\)</span>-function provided by the
        <code>boost</code> C++ library.
      </p>
      <p>
        Some comparisons with Mathematica show that <code>OwenQ</code> provides
        an excellent evaluation of <span class="math inline">\(Q_1\)</span>,
        except for very large values of
        <span class="math inline">\(\nu\)</span> in combination with large
        values of the non-centrality parameter
        <span class="math inline">\(\delta\)</span>.
      </p>
      <h2 id="integration-with-r---failure">Integration with R - failure</h2>
      <p>
        Let us try to evaluate <span class="math inline">\(Q_1\)</span> with the
        R function <code>integrate</code>.
      </p>
      <div class="sourceCode" id="cb1">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true"></a>integrand &lt;-<span class="st"> </span><span class="cf">function</span>(x, nu, t, delta){</span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true"></a>  <span class="kw">pnorm</span>(t<span class="op">*</span>x <span class="op">/</span><span class="kw">sqrt</span>(nu) <span class="op">-</span><span class="st"> </span>delta) <span class="op">*</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true"></a><span class="st">    </span><span class="kw">exp</span>((nu<span class="dv">-1</span>)<span class="op">*</span><span class="kw">log</span>(x) <span class="op">-</span><span class="st"> </span>x<span class="op">*</span>x<span class="op">/</span><span class="dv">2</span> <span class="op">-</span><span class="st"> </span>((nu<span class="op">/</span><span class="dv">2</span>) <span class="op">-</span><span class="st"> </span><span class="dv">1</span>) <span class="op">*</span><span class="st"> </span><span class="kw">log</span>(<span class="dv">2</span>) <span class="op">-</span><span class="st"> </span><span class="kw">lgamma</span>(nu<span class="op">/</span><span class="dv">2</span>))</span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true"></a>}</span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true"></a>Q1 &lt;-<span class="st"> </span><span class="cf">function</span>(nu, t, delta, R, ...){</span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true"></a>  <span class="kw">integrate</span>(integrand, <span class="dt">lower=</span><span class="dv">0</span>, <span class="dt">upper=</span>R, <span class="dt">nu=</span>nu, <span class="dt">t=</span>t, <span class="dt">delta=</span>delta, ...)</span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true"></a>}</span></code></pre>
      </div>
      <p>
        The evaluation for <span class="math inline">\(\nu=1\)</span>,
        <span class="math inline">\(t=2\)</span>,
        <span class="math inline">\(\delta=3\)</span> and
        <span class="math inline">\(R=4\)</span> is good:
      </p>
      <div class="sourceCode" id="cb2">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true"></a><span class="kw">library</span>(OwenQ)</span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true"></a><span class="kw">OwenQ1</span>(<span class="dv">1</span>, <span class="dv">2</span>, <span class="dv">3</span>, <span class="dv">4</span>)</span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true"></a><span class="co">## [1] 0.1794992</span></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true"></a><span class="kw">Q1</span>(<span class="dv">1</span>, <span class="dv">2</span>, <span class="dv">3</span>, <span class="dv">4</span>)</span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true"></a><span class="co">## 0.1794992 with absolute error &lt; 1.4e-05</span></span></code></pre>
      </div>
      <p>Now let us try with some other values.</p>
      <div class="sourceCode" id="cb3">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true"></a>nu =<span class="st"> </span><span class="dv">300</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true"></a>t =<span class="st"> </span><span class="dv">150</span></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true"></a>delta =<span class="st"> </span><span class="dv">160</span></span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true"></a><span class="kw">OwenQ1</span>(nu, t, delta, <span class="dv">20</span>)</span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true"></a><span class="co">## [1] 0.05232857</span></span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true"></a><span class="kw">Q1</span>(nu, t, delta, <span class="dv">20</span>)</span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true"></a><span class="co">## 0.05232857 with absolute error &lt; 5.1e-05</span></span></code></pre>
      </div>
      <p>
        For <span class="math inline">\(R=20\)</span>, the evaluation is good.
        Now, increase <span class="math inline">\(R\)</span>:
      </p>
      <div class="sourceCode" id="cb4">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true"></a><span class="kw">OwenQ1</span>(nu, t, delta, <span class="dv">100</span>)</span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true"></a><span class="co">## [1] 0.05242536</span></span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true"></a><span class="kw">Q1</span>(nu, t, delta, <span class="dv">100</span>)</span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true"></a><span class="co">## 7.411467e-07 with absolute error &lt; 1.4e-06</span></span></code></pre>
      </div>
      <p>
        The evaluation has failed. And it stills fails if we increase the number
        of subdivisions:
      </p>
      <div class="sourceCode" id="cb5">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true"></a><span class="kw">Q1</span>(nu, t, delta, <span class="dv">100</span>, <span class="dt">subdivisions=</span><span class="dv">10000</span>)</span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true"></a><span class="co">## 7.411467e-07 with absolute error &lt; 1.4e-06</span></span></code></pre>
      </div>
      <p>Let us have a look at the integrand:</p>
      <div class="sourceCode" id="cb6">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true"></a><span class="kw">curve</span>(<span class="kw">integrand</span>(x, nu, t, delta), <span class="dt">from=</span><span class="dv">16</span>, <span class="dt">to=</span><span class="dv">22</span>)</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/OwenQ1-unnamed-chunk-6-1.png"
        />
      </p>
      <p>
        The integrand is almost zero outside the interval
        <span class="math inline">\([18,21]\)</span>.
      </p>
      <p>
        Therefore the integral from <span class="math inline">\(0\)</span> to
        <span class="math inline">\(R\)</span> stabilizes at
        <span class="math inline">\(R=21\)</span>:
      </p>
      <div class="sourceCode" id="cb7">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true"></a>R &lt;-<span class="st"> </span><span class="kw">seq</span>(<span class="dv">0</span>, <span class="dv">30</span>, <span class="dt">length.out=</span><span class="dv">1000</span>)</span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true"></a>integral &lt;-<span class="st"> </span><span class="kw">sapply</span>(R, <span class="cf">function</span>(R) <span class="kw">OwenQ1</span>(nu, t, delta, R))</span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true"></a><span class="kw">plot</span>(R, integral, <span class="dt">type=</span><span class="st">"l"</span>)</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/OwenQ1-unnamed-chunk-7-1.png"
        />
      </p>
      <p>
        The graphic below shows the problem encountered when we use the R
        integration:
      </p>
      <div class="sourceCode" id="cb8">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true"></a>R &lt;-<span class="st"> </span><span class="kw">seq</span>(<span class="dv">21</span>, <span class="dv">100</span>, <span class="dt">length.out=</span><span class="dv">1000</span>)</span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true"></a>integral &lt;-<span class="st"> </span><span class="kw">sapply</span>(R, <span class="cf">function</span>(R) <span class="kw">Q1</span>(nu, t, delta, R)<span class="op">$</span>value)</span>
<span id="cb8-3"><a href="#cb8-3" aria-hidden="true"></a><span class="kw">plot</span>(R, integral, <span class="dt">type=</span><span class="st">"l"</span>)</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/OwenQ1-unnamed-chunk-8-1.png"
        />
      </p>
      <p>
        After <span class="math inline">\(R = 70\)</span>, the evaluation of the
        integral from <span class="math inline">\(0\)</span> to
        <span class="math inline">\(R\)</span> is not stable.
      </p>
      <h2 id="integration-with-rcppnumerical">
        Integration with <code>RcppNumerical</code>
      </h2>
      <p>
        The
        <a href="https://github.com/yixuan/RcppNumerical"
          ><code>RcppNumerical</code> package</a
        >
        allows numerical integration based on the C++
        <code>NumericalIntegration</code> library.
      </p>
      <p>Let us give it a first try.</p>
      <div class="sourceCode" id="cb9">
        <pre
          class="sourceCode numberSource cpp numberLines"
        ><code class="sourceCode cpp"><span id="cb9-1"><a href="#cb9-1"></a><span class="co">// [[Rcpp::depends(RcppEigen)]]</span></span>
<span id="cb9-2"><a href="#cb9-2"></a><span class="co">// [[Rcpp::depends(RcppNumerical)]]</span></span>
<span id="cb9-3"><a href="#cb9-3"></a><span class="pp">#include </span><span class="im">&lt;RcppNumerical.h&gt;</span></span>
<span id="cb9-4"><a href="#cb9-4"></a><span class="kw">using</span> <span class="kw">namespace</span> Numer;</span>
<span id="cb9-5"><a href="#cb9-5"></a><span class="pp">#include </span><span class="im">&lt;Rcpp.h&gt;</span></span>
<span id="cb9-6"><a href="#cb9-6"></a><span class="pp">#include </span><span class="im">&lt;cmath&gt;</span></span>
<span id="cb9-7"><a href="#cb9-7"></a></span>
<span id="cb9-8"><a href="#cb9-8"></a><span class="dt">double</span> integrand (<span class="dt">double</span> x, <span class="dt">double</span> nu, <span class="dt">double</span> t, <span class="dt">double</span> delta) {</span>
<span id="cb9-9"><a href="#cb9-9"></a>  <span class="dt">double</span> f = R::pnorm(t*x /sqrt(nu) - delta, <span class="fl">0.0</span>, <span class="fl">1.0</span>, <span class="dv">1</span>, <span class="dv">0</span>) *</span>
<span id="cb9-10"><a href="#cb9-10"></a>    exp((nu-<span class="dv">1</span>)*log(x) - x*x/<span class="dv">2</span> - ((nu/<span class="dv">2</span>) - <span class="dv">1</span>) * log(<span class="dv">2</span>) - lgamma(nu/<span class="dv">2</span>));</span>
<span id="cb9-11"><a href="#cb9-11"></a>  <span class="cf">return</span> f;</span>
<span id="cb9-12"><a href="#cb9-12"></a>}</span>
<span id="cb9-13"><a href="#cb9-13"></a></span>
<span id="cb9-14"><a href="#cb9-14"></a><span class="kw">class</span> Integrand: <span class="kw">public</span> Func</span>
<span id="cb9-15"><a href="#cb9-15"></a>{</span>
<span id="cb9-16"><a href="#cb9-16"></a><span class="kw">private</span>:</span>
<span id="cb9-17"><a href="#cb9-17"></a>  <span class="dt">double</span> nu;</span>
<span id="cb9-18"><a href="#cb9-18"></a>  <span class="dt">double</span> t;</span>
<span id="cb9-19"><a href="#cb9-19"></a>  <span class="dt">double</span> delta;</span>
<span id="cb9-20"><a href="#cb9-20"></a><span class="kw">public</span>:</span>
<span id="cb9-21"><a href="#cb9-21"></a>  Integrand(<span class="dt">double</span> <span class="va">nu_</span>, <span class="dt">double</span> <span class="va">t_</span>, <span class="dt">double</span> <span class="va">delta_</span>) : </span>
<span id="cb9-22"><a href="#cb9-22"></a>    nu(<span class="va">nu_</span>), t(<span class="va">t_</span>), delta(<span class="va">delta_</span>) {}</span>
<span id="cb9-23"><a href="#cb9-23"></a></span>
<span id="cb9-24"><a href="#cb9-24"></a>  <span class="dt">double</span> <span class="kw">operator</span>()(<span class="at">const</span> <span class="dt">double</span>&amp; x) <span class="at">const</span></span>
<span id="cb9-25"><a href="#cb9-25"></a>  {</span>
<span id="cb9-26"><a href="#cb9-26"></a>    <span class="cf">return</span> integrand_numer(x, nu, t, delta);</span>
<span id="cb9-27"><a href="#cb9-27"></a>  }</span>
<span id="cb9-28"><a href="#cb9-28"></a>};</span>
<span id="cb9-29"><a href="#cb9-29"></a></span>
<span id="cb9-30"><a href="#cb9-30"></a><span class="co">// [[Rcpp::export]]</span></span>
<span id="cb9-31"><a href="#cb9-31"></a>Rcpp::NumericVector </span>
<span id="cb9-32"><a href="#cb9-32"></a>OwenQ1numer(<span class="dt">double</span> nu, <span class="dt">double</span> t, <span class="dt">double</span> delta, <span class="dt">double</span> R,</span>
<span id="cb9-33"><a href="#cb9-33"></a>            <span class="dt">int</span> subdiv=<span class="dv">100</span>, </span>
<span id="cb9-34"><a href="#cb9-34"></a>            <span class="dt">double</span> eps_abs=<span class="fl">1e-14</span>, <span class="dt">double</span> eps_rel=<span class="fl">1e-14</span>){</span>
<span id="cb9-35"><a href="#cb9-35"></a>  Integrand f(nu, t, delta);</span>
<span id="cb9-36"><a href="#cb9-36"></a>  <span class="dt">double</span> err_est;</span>
<span id="cb9-37"><a href="#cb9-37"></a>  <span class="dt">int</span> err_code;</span>
<span id="cb9-38"><a href="#cb9-38"></a>  <span class="at">const</span> <span class="dt">double</span> res = integrate(f, <span class="dv">0</span>, R, err_est, err_code, </span>
<span id="cb9-39"><a href="#cb9-39"></a>                               subdiv, eps_abs, eps_rel);</span>
<span id="cb9-40"><a href="#cb9-40"></a>  Rcpp::NumericVector out = Rcpp::NumericVector::create(res);</span>
<span id="cb9-41"><a href="#cb9-41"></a>  out.attr(<span class="st">"err_est"</span>) = err_est;</span>
<span id="cb9-42"><a href="#cb9-42"></a>  out.attr(<span class="st">"err_code"</span>) = err_code;</span>
<span id="cb9-43"><a href="#cb9-43"></a>  <span class="cf">return</span> out;</span>
<span id="cb9-44"><a href="#cb9-44"></a>}</span></code></pre>
      </div>
      <p>
        For <span class="math inline">\(R=100\)</span>, the evaluation is
        successful:
      </p>
      <div class="sourceCode" id="cb10">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true"></a><span class="kw">OwenQ1numer</span>(nu, t, delta, <span class="dv">100</span>)</span>
<span id="cb10-2"><a href="#cb10-2" aria-hidden="true"></a><span class="co">## [1] 0.05242536</span></span>
<span id="cb10-3"><a href="#cb10-3" aria-hidden="true"></a><span class="co">## attr(,"err_est")</span></span>
<span id="cb10-4"><a href="#cb10-4" aria-hidden="true"></a><span class="co">## [1] 5.773263e-16</span></span>
<span id="cb10-5"><a href="#cb10-5" aria-hidden="true"></a><span class="co">## attr(,"err_code")</span></span>
<span id="cb10-6"><a href="#cb10-6" aria-hidden="true"></a><span class="co">## [1] 0</span></span></code></pre>
      </div>
      <p>It fails for <span class="math inline">\(R=3000\)</span>:</p>
      <div class="sourceCode" id="cb11">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb11-1"><a href="#cb11-1" aria-hidden="true"></a><span class="kw">OwenQ1</span>(nu, t, delta, <span class="dv">3000</span>)</span>
<span id="cb11-2"><a href="#cb11-2" aria-hidden="true"></a><span class="co">## [1] 0.05242536</span></span>
<span id="cb11-3"><a href="#cb11-3" aria-hidden="true"></a><span class="kw">OwenQ1numer</span>(nu, t, delta, <span class="dv">3000</span>)</span>
<span id="cb11-4"><a href="#cb11-4" aria-hidden="true"></a><span class="co">## [1] 1.913546e-35</span></span>
<span id="cb11-5"><a href="#cb11-5" aria-hidden="true"></a><span class="co">## attr(,"err_est")</span></span>
<span id="cb11-6"><a href="#cb11-6" aria-hidden="true"></a><span class="co">## [1] 3.788077e-35</span></span>
<span id="cb11-7"><a href="#cb11-7" aria-hidden="true"></a><span class="co">## attr(,"err_code")</span></span>
<span id="cb11-8"><a href="#cb11-8" aria-hidden="true"></a><span class="co">## [1] 0</span></span></code></pre>
      </div>
      <p>Let us have a look at the instability:</p>
      <div class="sourceCode" id="cb12">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb12-1"><a href="#cb12-1" aria-hidden="true"></a>R &lt;-<span class="st"> </span><span class="kw">seq</span>(<span class="dv">2500</span>, <span class="dv">5000</span>, <span class="dt">length.out=</span><span class="dv">1000</span>)</span>
<span id="cb12-2"><a href="#cb12-2" aria-hidden="true"></a>integral &lt;-<span class="st"> </span><span class="kw">sapply</span>(R, <span class="cf">function</span>(R) <span class="kw">OwenQ1numer</span>(nu, t, delta, R))</span>
<span id="cb12-3"><a href="#cb12-3" aria-hidden="true"></a><span class="kw">plot</span>(R, integral, <span class="dt">type=</span><span class="st">"l"</span>)</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/OwenQ1-unnamed-chunk-11-1.png"
        />
      </p>
      <h2 id="increasing-the-accuracy">Increasing the accuracy</h2>
      <p>
        Different integration rules are available in <code>RcppNumerical</code>.
        They all are Gauss-Kronrod quadratures, but with different accuracies.
        Let us try the Gauss-Kronrod integration rule with the highest available
        accuracy:
      </p>
      <div class="sourceCode" id="cb13">
        <pre
          class="sourceCode numberSource cpp numberLines"
        ><code class="sourceCode cpp"><span id="cb13-1"><a href="#cb13-1"></a><span class="co">// [[Rcpp::export]]</span></span>
<span id="cb13-2"><a href="#cb13-2"></a>Rcpp::NumericVector </span>
<span id="cb13-3"><a href="#cb13-3"></a>OwenQ1numer201(<span class="dt">double</span> nu, <span class="dt">double</span> t, <span class="dt">double</span> delta, <span class="dt">double</span> R,</span>
<span id="cb13-4"><a href="#cb13-4"></a>              <span class="dt">int</span> subdiv=<span class="dv">100</span>, </span>
<span id="cb13-5"><a href="#cb13-5"></a>              <span class="dt">double</span> eps_abs=<span class="fl">1e-14</span>, <span class="dt">double</span> eps_rel=<span class="fl">1e-14</span>){</span>
<span id="cb13-6"><a href="#cb13-6"></a>  Integrand f(nu, t, delta);</span>
<span id="cb13-7"><a href="#cb13-7"></a>  <span class="dt">double</span> err_est;</span>
<span id="cb13-8"><a href="#cb13-8"></a>  <span class="dt">int</span> err_code;</span>
<span id="cb13-9"><a href="#cb13-9"></a>  <span class="at">const</span> <span class="dt">double</span> res = integrate(f, <span class="dv">0</span>, R, err_est, err_code, subdiv, </span>
<span id="cb13-10"><a href="#cb13-10"></a>                               eps_abs, eps_rel, </span>
<span id="cb13-11"><a href="#cb13-11"></a>                               Integrator&lt;<span class="dt">double</span>&gt;::GaussKronrod201);</span>
<span id="cb13-12"><a href="#cb13-12"></a>  Rcpp::NumericVector out = Rcpp::NumericVector::create(res);</span>
<span id="cb13-13"><a href="#cb13-13"></a>  out.attr(<span class="st">"err_est"</span>) = err_est;</span>
<span id="cb13-14"><a href="#cb13-14"></a>  out.attr(<span class="st">"err_code"</span>) = err_code;</span>
<span id="cb13-15"><a href="#cb13-15"></a>  <span class="cf">return</span> out;</span>
<span id="cb13-16"><a href="#cb13-16"></a>}</span></code></pre>
      </div>
      <p>
        For <span class="math inline">\(R=3000\)</span>, the numerical
        integration does not fail anymore:
      </p>
      <div class="sourceCode" id="cb14">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb14-1"><a href="#cb14-1" aria-hidden="true"></a><span class="kw">OwenQ1numer201</span>(nu, t, delta, <span class="dv">3000</span>)</span>
<span id="cb14-2"><a href="#cb14-2" aria-hidden="true"></a><span class="co">## [1] 0.05242536</span></span>
<span id="cb14-3"><a href="#cb14-3" aria-hidden="true"></a><span class="co">## attr(,"err_est")</span></span>
<span id="cb14-4"><a href="#cb14-4" aria-hidden="true"></a><span class="co">## [1] 5.84141e-16</span></span>
<span id="cb14-5"><a href="#cb14-5" aria-hidden="true"></a><span class="co">## attr(,"err_code")</span></span>
<span id="cb14-6"><a href="#cb14-6" aria-hidden="true"></a><span class="co">## [1] 0</span></span></code></pre>
      </div>
      <p>
        Let us have a look at the integral from
        <span class="math inline">\(0\)</span> to
        <span class="math inline">\(R\)</span> for
        <span class="math inline">\(R\)</span> going, as before, from
        <span class="math inline">\(2500\)</span> to
        <span class="math inline">\(5000\)</span>:
      </p>
      <div class="sourceCode" id="cb15">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb15-1"><a href="#cb15-1" aria-hidden="true"></a>R &lt;-<span class="st"> </span><span class="kw">seq</span>(<span class="dv">2500</span>, <span class="dv">5000</span>, <span class="dt">length.out=</span><span class="dv">1000</span>)</span>
<span id="cb15-2"><a href="#cb15-2" aria-hidden="true"></a>integral &lt;-<span class="st"> </span><span class="kw">sapply</span>(R, <span class="cf">function</span>(R) <span class="kw">OwenQ1numer201</span>(nu, t, delta, R))</span>
<span id="cb15-3"><a href="#cb15-3" aria-hidden="true"></a><span class="kw">plot</span>(R, integral, <span class="dt">type=</span><span class="st">"l"</span>)</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/OwenQ1-unnamed-chunk-13-1.png"
        />
      </p>
      <p>
        The instability has gone. Now it appears for
        <span class="math inline">\(R\)</span> higher than
        <span class="math inline">\(15000\)</span>:
      </p>
      <div class="sourceCode" id="cb16">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb16-1"><a href="#cb16-1" aria-hidden="true"></a>R &lt;-<span class="st"> </span><span class="kw">seq</span>(<span class="dv">15000</span>, <span class="dv">30000</span>, <span class="dt">length.out=</span><span class="dv">1000</span>)</span>
<span id="cb16-2"><a href="#cb16-2" aria-hidden="true"></a>integral &lt;-<span class="st"> </span><span class="kw">sapply</span>(R, <span class="cf">function</span>(R) <span class="kw">OwenQ1numer201</span>(nu, t, delta, R))</span>
<span id="cb16-3"><a href="#cb16-3" aria-hidden="true"></a><span class="kw">plot</span>(R, integral, <span class="dt">type=</span><span class="st">"l"</span>)</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/OwenQ1-unnamed-chunk-14-1.png"
        />
      </p>
      <p>
        There is no such problem with the <code>OwenQ1</code> function of the
        <code>OwenQ</code> package:
      </p>
      <div class="sourceCode" id="cb17">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb17-1"><a href="#cb17-1" aria-hidden="true"></a>R &lt;-<span class="st"> </span><span class="kw">seq</span>(<span class="dv">1500</span>, <span class="dv">30000</span>, <span class="dt">length.out=</span><span class="dv">1000</span>)</span>
<span id="cb17-2"><a href="#cb17-2" aria-hidden="true"></a>owenQ1 &lt;-<span class="st"> </span><span class="kw">sapply</span>(R, <span class="cf">function</span>(R) <span class="kw">OwenQ1</span>(nu, t, delta, R))</span>
<span id="cb17-3"><a href="#cb17-3" aria-hidden="true"></a><span class="kw">plot</span>(R, owenQ1, <span class="dt">type=</span><span class="st">"l"</span>)</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/OwenQ1-unnamed-chunk-15-1.png"
        />
      </p>
      <h2 id="when-the-numerical-integration-beats-owens-algorithm">
        When the numerical integration beats Owen’s algorithm
      </h2>
      <p>
        On the other hand, for some situations it can happen that
        <code>OwenQ1</code> fails while the
        <code>RcppNumerical</code> integration is successful. As we announced
        before, <code>OwenQ1</code> can fail to evaluate the
        <span class="math inline">\(Q_1\)</span> function when
        <span class="math inline">\(\nu\)</span> is very large. Here is such an
        example:
      </p>
      <div class="sourceCode" id="cb18">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb18-1"><a href="#cb18-1" aria-hidden="true"></a><span class="kw">OwenQ1</span>(<span class="dv">5000</span>, <span class="dv">50</span>, <span class="dv">50</span>, <span class="dv">100</span>) <span class="co"># this result is not correct</span></span>
<span id="cb18-2"><a href="#cb18-2" aria-hidden="true"></a><span class="co">## [1] 0</span></span>
<span id="cb18-3"><a href="#cb18-3" aria-hidden="true"></a><span class="kw">OwenQ1numer201</span>(<span class="dv">5000</span>, <span class="dv">50</span>, <span class="dv">50</span>, <span class="dv">100</span>) <span class="co"># this result is correct</span></span>
<span id="cb18-4"><a href="#cb18-4" aria-hidden="true"></a><span class="co">## [1] 0.4990485</span></span>
<span id="cb18-5"><a href="#cb18-5" aria-hidden="true"></a><span class="co">## attr(,"err_est")</span></span>
<span id="cb18-6"><a href="#cb18-6" aria-hidden="true"></a><span class="co">## [1] 5.561545e-15</span></span>
<span id="cb18-7"><a href="#cb18-7" aria-hidden="true"></a><span class="co">## attr(,"err_code")</span></span>
<span id="cb18-8"><a href="#cb18-8" aria-hidden="true"></a><span class="co">## [1] 0</span></span></code></pre>
      </div>
      <p>The numerical integration brilliantly gives the correct result.</p>
      <h2 id="benchmarks">Benchmarks</h2>
      <p>Now let us compare the speed of the two implementations.</p>
      <div class="sourceCode" id="cb19">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb19-1"><a href="#cb19-1" aria-hidden="true"></a><span class="kw">library</span>(microbenchmark)</span>
<span id="cb19-2"><a href="#cb19-2" aria-hidden="true"></a><span class="kw">microbenchmark</span>(</span>
<span id="cb19-3"><a href="#cb19-3" aria-hidden="true"></a>  <span class="dt">OwenQ1 =</span> <span class="kw">OwenQ1</span>(nu, t, delta, <span class="dv">5000</span>),</span>
<span id="cb19-4"><a href="#cb19-4" aria-hidden="true"></a>  <span class="dt">OwenQ1numer201 =</span> <span class="kw">OwenQ1numer201</span>(nu, t, delta, <span class="dv">5000</span>), </span>
<span id="cb19-5"><a href="#cb19-5" aria-hidden="true"></a>  <span class="dt">times =</span> <span class="dv">100</span></span>
<span id="cb19-6"><a href="#cb19-6" aria-hidden="true"></a>)</span>
<span id="cb19-7"><a href="#cb19-7" aria-hidden="true"></a><span class="co">## Unit: microseconds</span></span>
<span id="cb19-8"><a href="#cb19-8" aria-hidden="true"></a><span class="co">##            expr     min      lq      mean  median      uq     max neval</span></span>
<span id="cb19-9"><a href="#cb19-9" aria-hidden="true"></a><span class="co">##          OwenQ1  50.425  51.764  55.13293  52.210  53.103 115.576   100</span></span>
<span id="cb19-10"><a href="#cb19-10" aria-hidden="true"></a><span class="co">##  OwenQ1numer201 485.953 486.400 494.11950 486.846 487.738 614.024   100</span></span>
<span id="cb19-11"><a href="#cb19-11" aria-hidden="true"></a><span class="co">##  cld</span></span>
<span id="cb19-12"><a href="#cb19-12" aria-hidden="true"></a><span class="co">##   a </span></span>
<span id="cb19-13"><a href="#cb19-13" aria-hidden="true"></a><span class="co">##    b</span></span></code></pre>
      </div>
      <p>
        Well, <code>OwenQ1</code> is faster. But, as we have seen, not always
        better. And <code>OwenQ1</code> is restricted to integer values of
        <span class="math inline">\(\nu\)</span>.
      </p>
      <h2 id="reference">Reference</h2>
      <ul>
        <li>
          Owen, D. B. (1965).
          <em>A special case of a bivariate noncentral t-distribution.</em>
          Biometrika 52, 437-446.
        </li>
      </ul>
    </div>
  </div>
</div>
]]></description>
      <pubDate>Mon, 31 Jul 2017 00:00:00 UT</pubDate>
      <guid>https://laustep.github.io/stlahblog/posts/OwenQintegration.html</guid>
      <dc:creator>Stéphane Laurent</dc:creator>
      <category>R</category>
    </item>
    <item>
      <title>Back to the parametric Hopf torus</title>
      <link>https://laustep.github.io/stlahblog/posts/HopfTorus2.html</link>
      <description><![CDATA[<div class="container-fluid">
  <div class="main col-sm-12">
    <div class="content">
      <p>
        In a <a href="https://laustep.github.io/stlahblog/posts/HopfTorusParametric.html">previous post</a>, I explained
        how to get a parameterization of a Hopf cylinder or torus. There is a
        clearer way, which I present here.
      </p>
      <p>
        For the Hopf map, the preimage of a point
        <span class="math inline">\(p=(p_x,p_y,p_z)\)</span> on the unit sphere
        <span class="math inline">\(S^2\)</span> is the circle on
        <span class="math inline">\(S^3\)</span> with parametrization:
        <span class="math display"
          >\[ \begin{array}{ccc} \mathcal{C}_p \colon &amp; (0,2\pi[ &amp;
          \longrightarrow &amp; S^3 \\ &amp; \phi &amp; \longmapsto &amp;
          \mathcal{C}_p(\phi) \end{array} \]</span
        >
        where
        <span class="math display"
          >\[ \mathcal{C}_p(\phi) = \frac{1}{\sqrt{2(1+p_z)}} \begin{pmatrix}
          (1+p_z) \cos(\phi) \\ p_x \sin(\phi) - p_y \cos(\phi) \\ p_x
          \cos(\phi) + p_y \sin(\phi) \\ (1+p_z) \sin(\phi) \end{pmatrix}.
          \]</span
        >
      </p>
      <p>
        Now consider a spherical curve. That is, let
        <span class="math inline">\(\Gamma\)</span> be a function mapping an
        interval <span class="math inline">\(I \subset \mathbb{R}\)</span> to
        the unit sphere <span class="math inline">\(S^2\)</span>. Then the Hopf
        cylinder corresponding to
        <span class="math inline">\(\Gamma\)</span> has parameterization
        <span class="math display"
          >\[ \begin{array}{ccc} H_\Gamma \colon &amp; I \times (0,2\pi[ &amp;
          \longrightarrow &amp; S^3 \\ &amp; (t, \phi) &amp; \longmapsto &amp;
          \mathcal{C}_{\Gamma(t)}(\phi) \end{array}. \]</span
        >
        Recall the
        <a href="https://laustep.github.io/stlahblog/posts/HopfTorusTennisBall.html">tennis ball curve</a> example,
        given for a real constant <span class="math inline">\(A\)</span> and an
        integer constant <span class="math inline">\(n\)</span> by:
        <span class="math display"
          >\[ \Gamma(t) = \begin{pmatrix} \sin\bigl(\pi/2 - (\pi/2 - A)
          \cos(nt)\bigr) \cos\bigl(t + A \sin(2nt)\bigr) \\ \sin\bigl(\pi/2 -
          (\pi/2 - A) \cos(nt)\bigr) \sin\bigl(t + A \sin(2nt)\bigr) \\
          \cos\bigl(\pi/2 - (\pi/2 - A) \cos(nt)\bigr) \end{pmatrix}, \quad t
          \in (0,2\pi[. \]</span
        >
      </p>
      <div class="sourceCode" id="cb1">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb1-1">A &lt;-<span class="st"> </span><span class="fl">0.44</span></span>
<span id="cb1-2">n &lt;-<span class="st"> </span><span class="dv">3</span></span>
<span id="cb1-3">Gamma &lt;-<span class="st"> </span><span class="cf">function</span>(t){</span>
<span id="cb1-4">  alpha &lt;-<span class="st"> </span>pi<span class="op">/</span><span class="dv">2</span> <span class="op">-</span><span class="st"> </span>(pi<span class="op">/</span><span class="dv">2</span><span class="op">-</span>A)<span class="op">*</span><span class="kw">cos</span>(n<span class="op">*</span>t)</span>
<span id="cb1-5">  beta &lt;-<span class="st"> </span>t <span class="op">+</span><span class="st"> </span>A<span class="op">*</span><span class="kw">sin</span>(<span class="dv">2</span><span class="op">*</span>n<span class="op">*</span>t)</span>
<span id="cb1-6">  <span class="kw">c</span>(</span>
<span id="cb1-7">    <span class="kw">sin</span>(alpha) <span class="op">*</span><span class="st"> </span><span class="kw">cos</span>(beta),</span>
<span id="cb1-8">    <span class="kw">sin</span>(alpha) <span class="op">*</span><span class="st"> </span><span class="kw">sin</span>(beta),</span>
<span id="cb1-9">    <span class="kw">cos</span>(alpha)</span>
<span id="cb1-10">  )</span>
<span id="cb1-11">}</span>
<span id="cb1-12">HopfInverse &lt;-<span class="st"> </span><span class="cf">function</span>(p, phi){</span>
<span id="cb1-13">  <span class="kw">c</span>(</span>
<span id="cb1-14">    (<span class="dv">1</span><span class="op">+</span>p[<span class="dv">3</span>])<span class="op">*</span><span class="kw">cos</span>(phi),</span>
<span id="cb1-15">    p[<span class="dv">1</span>]<span class="op">*</span><span class="kw">sin</span>(phi) <span class="op">-</span><span class="st"> </span>p[<span class="dv">2</span>]<span class="op">*</span><span class="kw">cos</span>(phi), </span>
<span id="cb1-16">    p[<span class="dv">1</span>]<span class="op">*</span><span class="kw">cos</span>(phi) <span class="op">+</span><span class="st"> </span>p[<span class="dv">2</span>]<span class="op">*</span><span class="kw">sin</span>(phi),</span>
<span id="cb1-17">    (<span class="dv">1</span><span class="op">+</span>p[<span class="dv">3</span>])<span class="op">*</span><span class="kw">sin</span>(phi)</span>
<span id="cb1-18">  ) <span class="op">/</span><span class="st"> </span><span class="kw">sqrt</span>(<span class="dv">2</span><span class="op">*</span>(<span class="dv">1</span><span class="op">+</span>p[<span class="dv">3</span>])) </span>
<span id="cb1-19">}</span>
<span id="cb1-20">Stereo &lt;-<span class="st"> </span><span class="cf">function</span>(q){</span>
<span id="cb1-21">  <span class="dv">2</span><span class="op">*</span>q[<span class="dv">1</span><span class="op">:</span><span class="dv">3</span>] <span class="op">/</span><span class="st"> </span>(<span class="dv">1</span><span class="op">-</span>q[<span class="dv">4</span>])</span>
<span id="cb1-22">}</span>
<span id="cb1-23">F &lt;-<span class="st"> </span><span class="cf">function</span>(t, phi){</span>
<span id="cb1-24">  <span class="kw">Stereo</span>(<span class="kw">HopfInverse</span>(<span class="kw">Gamma</span>(t), phi))</span>
<span id="cb1-25">}</span></code></pre>
      </div>
      <p>
        Now we’re ready to plot the stereographic projection of the Hopf torus
        with <code>misc3d</code>:
      </p>
      <div class="sourceCode" id="cb2">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb2-1">fx &lt;-<span class="st"> </span><span class="kw">Vectorize</span>(<span class="cf">function</span>(u,v) <span class="kw">F</span>(u,v)[<span class="dv">1</span>])</span>
<span id="cb2-2">fy &lt;-<span class="st"> </span><span class="kw">Vectorize</span>(<span class="cf">function</span>(u,v) <span class="kw">F</span>(u,v)[<span class="dv">2</span>])</span>
<span id="cb2-3">fz &lt;-<span class="st"> </span><span class="kw">Vectorize</span>(<span class="cf">function</span>(u,v) <span class="kw">F</span>(u,v)[<span class="dv">3</span>])</span>
<span id="cb2-4"><span class="kw">library</span>(misc3d)</span>
<span id="cb2-5"><span class="kw">parametric3d</span>(fx, fy, fz, <span class="dt">umin =</span> <span class="dv">0</span>, <span class="dt">umax =</span> <span class="dv">2</span><span class="op">*</span>pi, <span class="dt">vmin =</span> <span class="dv">0</span>, <span class="dt">vmax =</span> <span class="dv">2</span><span class="op">*</span>pi, </span>
<span id="cb2-6">             <span class="dt">n =</span> <span class="dv">300</span>, <span class="dt">smooth =</span> <span class="ot">TRUE</span>, <span class="dt">color =</span> <span class="st">"#363940"</span>)</span>
<span id="cb2-7">rgl<span class="op">::</span><span class="kw">view3d</span>(<span class="dv">90</span>, <span class="dv">0</span>, <span class="dt">zoom =</span> <span class="fl">0.65</span>)</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/HopfTorus_grey.png"
        />
      </p>
      <p>
        A ring cyclide is a Hopf torus. It corresponds to the case when
        <span class="math inline">\(\Gamma\)</span> describes a circle on the
        unit sphere <span class="math inline">\(S^2\)</span>. Below is a R
        function to compute such a circle.
      </p>
      <div class="sourceCode" id="cb3">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb3-1"><span class="co"># helper function: plane passing by points p1, p2, p3 </span></span>
<span id="cb3-2">plane3pts &lt;-<span class="st"> </span><span class="cf">function</span>(p1,p2,p3){ </span>
<span id="cb3-3">    xcoef &lt;-<span class="st"> </span>(p1[<span class="dv">2</span>]<span class="op">-</span>p2[<span class="dv">2</span>])<span class="op">*</span>(p2[<span class="dv">3</span>]<span class="op">-</span>p3[<span class="dv">3</span>])<span class="op">-</span>(p1[<span class="dv">3</span>]<span class="op">-</span>p2[<span class="dv">3</span>])<span class="op">*</span>(p2[<span class="dv">2</span>]<span class="op">-</span>p3[<span class="dv">2</span>])</span>
<span id="cb3-4">    ycoef &lt;-<span class="st"> </span>(p1[<span class="dv">3</span>]<span class="op">-</span>p2[<span class="dv">3</span>])<span class="op">*</span>(p2[<span class="dv">1</span>]<span class="op">-</span>p3[<span class="dv">1</span>])<span class="op">-</span>(p1[<span class="dv">1</span>]<span class="op">-</span>p2[<span class="dv">1</span>])<span class="op">*</span>(p2[<span class="dv">3</span>]<span class="op">-</span>p3[<span class="dv">3</span>])</span>
<span id="cb3-5">    zcoef &lt;-<span class="st"> </span>(p1[<span class="dv">1</span>]<span class="op">-</span>p2[<span class="dv">1</span>])<span class="op">*</span>(p2[<span class="dv">2</span>]<span class="op">-</span>p3[<span class="dv">2</span>])<span class="op">-</span>(p1[<span class="dv">2</span>]<span class="op">-</span>p2[<span class="dv">2</span>])<span class="op">*</span>(p2[<span class="dv">1</span>]<span class="op">-</span>p3[<span class="dv">1</span>])</span>
<span id="cb3-6">    offset &lt;-<span class="st"> </span>p1[<span class="dv">1</span>]<span class="op">*</span>xcoef <span class="op">+</span><span class="st"> </span>p1[<span class="dv">2</span>]<span class="op">*</span>ycoef <span class="op">+</span><span class="st"> </span>p1[<span class="dv">3</span>]<span class="op">*</span>zcoef</span>
<span id="cb3-7">    <span class="kw">c</span>(xcoef, ycoef, zcoef, offset)</span>
<span id="cb3-8">}</span>
<span id="cb3-9"></span>
<span id="cb3-10"><span class="co"># helper function: cross product </span></span>
<span id="cb3-11">cross &lt;-<span class="st"> </span><span class="cf">function</span>(v, w){ </span>
<span id="cb3-12">  <span class="kw">c</span>(</span>
<span id="cb3-13">    v[<span class="dv">2</span>] <span class="op">*</span><span class="st"> </span>w[<span class="dv">3</span>] <span class="op">-</span><span class="st"> </span>v[<span class="dv">3</span>] <span class="op">*</span><span class="st"> </span>w[<span class="dv">2</span>], </span>
<span id="cb3-14">    v[<span class="dv">3</span>] <span class="op">*</span><span class="st"> </span>w[<span class="dv">1</span>] <span class="op">-</span><span class="st"> </span>v[<span class="dv">1</span>] <span class="op">*</span><span class="st"> </span>w[<span class="dv">3</span>], </span>
<span id="cb3-15">    v[<span class="dv">1</span>] <span class="op">*</span><span class="st"> </span>w[<span class="dv">2</span>] <span class="op">-</span><span class="st"> </span>v[<span class="dv">2</span>] <span class="op">*</span><span class="st"> </span>w[<span class="dv">1</span>]</span>
<span id="cb3-16">  )</span>
<span id="cb3-17">}</span>
<span id="cb3-18"></span>
<span id="cb3-19"><span class="co"># circle passing by points three points p1, p2, p3 </span></span>
<span id="cb3-20"><span class="co"># given in Cartesian coordinates</span></span>
<span id="cb3-21">circle3pts &lt;-<span class="st"> </span><span class="cf">function</span>(p1, p2, p3){</span>
<span id="cb3-22">  p12 &lt;-<span class="st"> </span>(p1<span class="op">+</span>p2)<span class="op">/</span><span class="dv">2</span></span>
<span id="cb3-23">  p23 &lt;-<span class="st"> </span>(p2<span class="op">+</span>p3)<span class="op">/</span><span class="dv">2</span></span>
<span id="cb3-24">  v12 &lt;-<span class="st"> </span>p2<span class="op">-</span>p1</span>
<span id="cb3-25">  v23 &lt;-<span class="st"> </span>p3<span class="op">-</span>p2</span>
<span id="cb3-26">  plane &lt;-<span class="st"> </span><span class="kw">plane3pts</span>(p1, p2, p3)</span>
<span id="cb3-27">  A &lt;-<span class="st"> </span><span class="kw">rbind</span>(plane[<span class="dv">1</span><span class="op">:</span><span class="dv">3</span>], v12, v23)</span>
<span id="cb3-28">  b &lt;-<span class="st"> </span><span class="kw">c</span>(plane[<span class="dv">4</span>], <span class="kw">sum</span>(p12<span class="op">*</span>v12), <span class="kw">sum</span>(p23<span class="op">*</span>v23))</span>
<span id="cb3-29">  center &lt;-<span class="st"> </span><span class="kw">c</span>(<span class="kw">solve</span>(A) <span class="op">%*%</span><span class="st"> </span>b)</span>
<span id="cb3-30">  r &lt;-<span class="st"> </span><span class="kw">sqrt</span>(<span class="kw">c</span>(<span class="kw">crossprod</span>(p1<span class="op">-</span>center)))</span>
<span id="cb3-31">  i &lt;-<span class="st"> </span>(p1<span class="op">-</span>center) <span class="op">/</span><span class="st"> </span>r</span>
<span id="cb3-32">  normal &lt;-<span class="st"> </span>plane[<span class="dv">1</span><span class="op">:</span><span class="dv">3</span>] <span class="op">/</span><span class="st"> </span><span class="kw">sqrt</span>(<span class="kw">c</span>(<span class="kw">crossprod</span>(plane[<span class="dv">1</span><span class="op">:</span><span class="dv">3</span>])))</span>
<span id="cb3-33">  <span class="kw">list</span>(<span class="dt">center =</span> center, <span class="dt">radius =</span> r, <span class="dt">i =</span> i, <span class="dt">j =</span> <span class="kw">cross</span>(i,normal))</span>
<span id="cb3-34">} <span class="co"># circle parameterization: center + radius*(cos(t)*i + sin(t)*j)</span></span>
<span id="cb3-35"></span>
<span id="cb3-36"><span class="co"># circle on unit sphere passing by three points </span></span>
<span id="cb3-37"><span class="co"># given in spherical coordinates </span></span>
<span id="cb3-38">circleOnUnitSphere &lt;-<span class="st"> </span><span class="cf">function</span>(thph1, thph2, thph3){</span>
<span id="cb3-39">  theta1 &lt;-<span class="st"> </span>thph1[<span class="dv">1</span>]; phi1 &lt;-<span class="st"> </span>thph1[<span class="dv">2</span>]</span>
<span id="cb3-40">  theta2 &lt;-<span class="st"> </span>thph2[<span class="dv">1</span>]; phi2 &lt;-<span class="st"> </span>thph2[<span class="dv">2</span>]</span>
<span id="cb3-41">  theta3 &lt;-<span class="st"> </span>thph3[<span class="dv">1</span>]; phi3 &lt;-<span class="st"> </span>thph3[<span class="dv">2</span>]</span>
<span id="cb3-42">  p1 &lt;-<span class="st"> </span><span class="kw">c</span>(<span class="kw">sin</span>(theta1)<span class="op">*</span><span class="kw">cos</span>(phi1), <span class="kw">sin</span>(theta1)<span class="op">*</span><span class="kw">sin</span>(phi1), <span class="kw">cos</span>(theta1))</span>
<span id="cb3-43">  p2 &lt;-<span class="st"> </span><span class="kw">c</span>(<span class="kw">sin</span>(theta2)<span class="op">*</span><span class="kw">cos</span>(phi2), <span class="kw">sin</span>(theta2)<span class="op">*</span><span class="kw">sin</span>(phi2), <span class="kw">cos</span>(theta2))</span>
<span id="cb3-44">  p3 &lt;-<span class="st"> </span><span class="kw">c</span>(<span class="kw">sin</span>(theta3)<span class="op">*</span><span class="kw">cos</span>(phi3), <span class="kw">sin</span>(theta3)<span class="op">*</span><span class="kw">sin</span>(phi3), <span class="kw">cos</span>(theta3))</span>
<span id="cb3-45">  <span class="kw">circle3pts</span>(p1, p2, p3)</span>
<span id="cb3-46">}</span></code></pre>
      </div>
      <p>
        The function returns a list with four elements: a point
        <code>center</code>, a number <code>radius</code>, and two vectors
        <code>i</code> and <code>j</code>. The parameterization of the spherical
        circle is then <code>center + radius*(cos(t)*i + sin(t)*j)</code> for
        <code>t</code> <span class="math inline">\(\in (0, 2\pi[\)</span>.
      </p>
      <p>
        Let’s try. We enter three pairs of spherical coordinates and we apply
        the <code>circleOnUnitSphere</code> function:
      </p>
      <div class="sourceCode" id="cb4">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb4-1">thph1 =<span class="st"> </span><span class="kw">c</span>(<span class="fl">1.3</span>, <span class="fl">1.5</span>)</span>
<span id="cb4-2">thph2 =<span class="st"> </span><span class="kw">c</span>(<span class="fl">1.9</span>, <span class="fl">2.8</span>)</span>
<span id="cb4-3">thph3 =<span class="st"> </span><span class="kw">c</span>(<span class="dv">1</span>, <span class="dv">2</span>)</span>
<span id="cb4-4">circ &lt;-<span class="st"> </span><span class="kw">circleOnUnitSphere</span>(thph1, thph2, thph3)</span></code></pre>
      </div>
      <p>
        Then we define the parametrization of the stereographically projected
        Hopf torus:
      </p>
      <div class="sourceCode" id="cb5">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb5-1">F &lt;-<span class="st"> </span><span class="cf">function</span>(t, phi){</span>
<span id="cb5-2">  p &lt;-<span class="st"> </span><span class="kw">with</span>(circ, center <span class="op">+</span><span class="st"> </span>radius<span class="op">*</span>(<span class="kw">cos</span>(t)<span class="op">*</span>i <span class="op">+</span><span class="st"> </span><span class="kw">sin</span>(t)<span class="op">*</span>j))</span>
<span id="cb5-3">  <span class="kw">Stereo</span>(<span class="kw">HopfInverse</span>(p, phi))</span>
<span id="cb5-4">}</span></code></pre>
      </div>
      <p>And we plot:</p>
      <div class="sourceCode" id="cb6">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb6-1"><span class="kw">parametric3d</span>(fx, fy, fz, <span class="dt">umin =</span> <span class="dv">0</span>, <span class="dt">umax =</span> <span class="dv">2</span><span class="op">*</span>pi, <span class="dt">vmin =</span> <span class="dv">0</span>, <span class="dt">vmax =</span> <span class="dv">2</span><span class="op">*</span>pi, </span>
<span id="cb6-2">             <span class="dt">n =</span> <span class="dv">250</span>, <span class="dt">smooth =</span> <span class="ot">TRUE</span>, <span class="dt">color =</span> <span class="st">"#363940"</span>)</span>
<span id="cb6-3">rgl<span class="op">::</span><span class="kw">view3d</span>(<span class="dv">90</span>, <span class="dv">0</span>, <span class="dt">zoom =</span> <span class="fl">0.65</span>)</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/cyclide_grey.png"
        />
      </p>
      <p>
        By rotating our spherical circle about the
        <span class="math inline">\(z\)</span>-axis, we can obtain the
        <a href="https://laustep.github.io/stlahblog/posts/linkedCyclidesParametric.html">linked cyclides</a>. Below is
        a R function to perform a rotation in spherical coordinates. See
        <a
          href="http://stla.github.io/stlapblog/posts/RotationSphericalCoordinates.html"
          >this post</a
        >
        on my former blog for some explanations.
      </p>
      <div class="sourceCode" id="cb7">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb7-1"><span class="co"># helper functions: basic rotations ####</span></span>
<span id="cb7-2">Rx &lt;-<span class="st"> </span><span class="cf">function</span>(alpha){</span>
<span id="cb7-3">  <span class="kw">rbind</span>(<span class="kw">c</span>(<span class="kw">cos</span>(alpha<span class="op">/</span><span class="dv">2</span>), <span class="op">-</span>1i<span class="op">*</span><span class="kw">sin</span>(alpha<span class="op">/</span><span class="dv">2</span>)),</span>
<span id="cb7-4">        <span class="kw">c</span>(<span class="op">-</span>1i<span class="op">*</span><span class="kw">sin</span>(alpha<span class="op">/</span><span class="dv">2</span>), <span class="kw">cos</span>(alpha<span class="op">/</span><span class="dv">2</span>)))</span>
<span id="cb7-5">}</span>
<span id="cb7-6">Ry &lt;-<span class="st"> </span><span class="cf">function</span>(alpha){</span>
<span id="cb7-7">  <span class="kw">rbind</span>(<span class="kw">c</span>(<span class="kw">cos</span>(alpha<span class="op">/</span><span class="dv">2</span>), <span class="op">-</span><span class="kw">sin</span>(alpha<span class="op">/</span><span class="dv">2</span>)),</span>
<span id="cb7-8">        <span class="kw">c</span>(<span class="kw">sin</span>(alpha<span class="op">/</span><span class="dv">2</span>), <span class="kw">cos</span>(alpha<span class="op">/</span><span class="dv">2</span>)))</span>
<span id="cb7-9">}</span>
<span id="cb7-10">Rz &lt;-<span class="st"> </span><span class="cf">function</span>(alpha){</span>
<span id="cb7-11">  <span class="kw">rbind</span>(<span class="kw">c</span>(<span class="kw">exp</span>(<span class="op">-</span>1i<span class="op">*</span>alpha<span class="op">/</span><span class="dv">2</span>), <span class="dv">0</span>),</span>
<span id="cb7-12">        <span class="kw">c</span>(<span class="dv">0</span>, <span class="kw">exp</span>(1i<span class="op">*</span>alpha<span class="op">/</span><span class="dv">2</span>)))</span>
<span id="cb7-13">}</span>
<span id="cb7-14"></span>
<span id="cb7-15"><span class="co"># 3D rotation in spherical coordinates ####</span></span>
<span id="cb7-16"><span class="co">#' @description Rotation of a vector given in spherical coordinates.</span></span>
<span id="cb7-17"><span class="co">#' @param theta_phi spherical coordinates, a vector containing the </span></span>
<span id="cb7-18"><span class="co">#' colatitude (or polar angle), between 0 and pi, and the longitude </span></span>
<span id="cb7-19"><span class="co">#' (or azimuthal angle), between 0 and 2pi</span></span>
<span id="cb7-20"><span class="co">#' @param axis either a letter 'x', 'y' or 'z', a numeric vector of </span></span>
<span id="cb7-21"><span class="co">#' length 2 (the spherical coordinates of the axis), or a numeric </span></span>
<span id="cb7-22"><span class="co">#' vector of length 3 (the Cartesian coordinates of the axis)</span></span>
<span id="cb7-23"><span class="co">#' @param alpha angle of rotation</span></span>
<span id="cb7-24"><span class="co">#' @return The spherical coordinates of the transformed vector.</span></span>
<span id="cb7-25">rotation &lt;-<span class="st"> </span><span class="cf">function</span>(theta_phi, <span class="dt">axis=</span><span class="st">"x"</span>, alpha){</span>
<span id="cb7-26">  <span class="cf">if</span>(<span class="kw">is.character</span>(axis)){</span>
<span id="cb7-27">    axis &lt;-<span class="st"> </span><span class="kw">match.arg</span>(axis, <span class="kw">c</span>(<span class="st">"x"</span>,<span class="st">"y"</span>,<span class="st">"z"</span>))</span>
<span id="cb7-28">    R &lt;-<span class="st"> </span><span class="cf">switch</span>(axis, </span>
<span id="cb7-29">                <span class="st">"x"</span> =<span class="st"> </span><span class="kw">Rx</span>(alpha),</span>
<span id="cb7-30">                <span class="st">"y"</span> =<span class="st"> </span><span class="kw">Ry</span>(alpha),</span>
<span id="cb7-31">                <span class="st">"z"</span> =<span class="st"> </span><span class="kw">Rz</span>(alpha))</span>
<span id="cb7-32">  }<span class="cf">else</span> <span class="cf">if</span>(<span class="kw">length</span>(axis) <span class="op">==</span><span class="st"> </span><span class="dv">2</span>){</span>
<span id="cb7-33">    Theta &lt;-<span class="st"> </span>axis[<span class="dv">1</span>]; Phi &lt;-<span class="st"> </span>axis[<span class="dv">2</span>]</span>
<span id="cb7-34">    R &lt;-<span class="st"> </span><span class="kw">Rz</span>(Phi) <span class="op">%*%</span><span class="st"> </span><span class="kw">Ry</span>(Theta) <span class="op">%*%</span><span class="st"> </span><span class="kw">Rz</span>(alpha) <span class="op">%*%</span><span class="st"> </span></span>
<span id="cb7-35"><span class="st">           </span><span class="kw">t</span>(<span class="kw">Ry</span>(Theta)) <span class="op">%*%</span><span class="st"> </span><span class="kw">t</span>(<span class="kw">Conj</span>(<span class="kw">Rz</span>(Phi)))</span>
<span id="cb7-36">  }<span class="cf">else</span> <span class="cf">if</span>(<span class="kw">length</span>(axis) <span class="op">==</span><span class="st"> </span><span class="dv">3</span>){</span>
<span id="cb7-37">    axis &lt;-<span class="st"> </span>axis <span class="op">/</span><span class="st"> </span><span class="kw">sqrt</span>(<span class="kw">c</span>(<span class="kw">crossprod</span>(axis)))</span>
<span id="cb7-38">    X &lt;-<span class="st"> </span><span class="kw">rbind</span>(<span class="kw">c</span>(<span class="dv">0</span>,<span class="dv">1</span>), <span class="kw">c</span>(<span class="dv">1</span>,<span class="dv">0</span>))</span>
<span id="cb7-39">    Y &lt;-<span class="st"> </span><span class="kw">rbind</span>(<span class="kw">c</span>(<span class="dv">0</span>,<span class="op">-</span>1i), <span class="kw">c</span>(1i,<span class="dv">0</span>)) </span>
<span id="cb7-40">    Z &lt;-<span class="st"> </span><span class="kw">rbind</span>(<span class="kw">c</span>(<span class="dv">1</span>,<span class="dv">0</span>), <span class="kw">c</span>(<span class="dv">0</span>,<span class="op">-</span><span class="dv">1</span>))</span>
<span id="cb7-41">    R &lt;-<span class="st"> </span><span class="kw">cos</span>(alpha<span class="op">/</span><span class="dv">2</span>)<span class="op">*</span><span class="kw">diag</span>(<span class="dv">2</span>) <span class="op">-</span><span class="st"> </span>1i<span class="op">*</span><span class="kw">sin</span>(alpha<span class="op">/</span><span class="dv">2</span>) <span class="op">*</span><span class="st"> </span></span>
<span id="cb7-42"><span class="st">           </span>(axis[<span class="dv">1</span>]<span class="op">*</span>X <span class="op">+</span><span class="st"> </span>axis[<span class="dv">2</span>]<span class="op">*</span>Y <span class="op">+</span><span class="st"> </span>axis[<span class="dv">3</span>]<span class="op">*</span>Z)</span>
<span id="cb7-43">  }<span class="cf">else</span>{</span>
<span id="cb7-44">    <span class="kw">stop</span>(<span class="st">"`axis` must be either:</span></span>
<span id="cb7-45"><span class="st">         - a letter ('x', 'y' or 'z')</span></span>
<span id="cb7-46"><span class="st">         - a numeric vector of length two (spherical coordinates)</span></span>
<span id="cb7-47"><span class="st">         - a numeric vector of length three (Cartesian coordinates)"</span>)</span>
<span id="cb7-48">  }</span>
<span id="cb7-49">  theta &lt;-<span class="st"> </span>theta_phi[<span class="dv">1</span>]; phi &lt;-<span class="st"> </span>theta_phi[<span class="dv">2</span>]</span>
<span id="cb7-50">  qubit &lt;-<span class="st"> </span><span class="kw">c</span>(<span class="kw">cos</span>(theta<span class="op">/</span><span class="dv">2</span>), <span class="kw">exp</span>(1i<span class="op">*</span>phi)<span class="op">*</span><span class="kw">sin</span>(theta<span class="op">/</span><span class="dv">2</span>))</span>
<span id="cb7-51">  newqubit &lt;-<span class="st"> </span>R <span class="op">%*%</span><span class="st"> </span>qubit</span>
<span id="cb7-52">  z0 &lt;-<span class="st"> </span>newqubit[<span class="dv">1</span>,<span class="dv">1</span>]; z1 &lt;-<span class="st"> </span>newqubit[<span class="dv">2</span>,<span class="dv">1</span>]</span>
<span id="cb7-53">  <span class="kw">c</span>(<span class="dv">2</span><span class="op">*</span><span class="kw">atan</span>(<span class="kw">Mod</span>(z1)<span class="op">/</span><span class="kw">Mod</span>(z0)), <span class="kw">Arg</span>(z1)<span class="op">-</span><span class="kw">Arg</span>(z0))</span>
<span id="cb7-54">}</span></code></pre>
      </div>
      <p>Now, let’s rotate our spherical circle and plot:</p>
      <div class="sourceCode" id="cb8">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb8-1">thph1 &lt;-<span class="st"> </span><span class="kw">rotation</span>(thph1, <span class="st">"z"</span>, <span class="dv">2</span><span class="op">*</span>pi<span class="op">/</span><span class="dv">3</span>)</span>
<span id="cb8-2">thph2 &lt;-<span class="st"> </span><span class="kw">rotation</span>(thph2, <span class="st">"z"</span>, <span class="dv">2</span><span class="op">*</span>pi<span class="op">/</span><span class="dv">3</span>)</span>
<span id="cb8-3">thph3 &lt;-<span class="st"> </span><span class="kw">rotation</span>(thph3, <span class="st">"z"</span>, <span class="dv">2</span><span class="op">*</span>pi<span class="op">/</span><span class="dv">3</span>)</span>
<span id="cb8-4">circ &lt;-<span class="st"> </span><span class="kw">circleOnUnitSphere</span>(thph1, thph2, thph3)</span>
<span id="cb8-5"><span class="kw">parametric3d</span>(fx, fy, fz, <span class="dt">umin =</span> <span class="dv">0</span>, <span class="dt">umax =</span> <span class="dv">2</span><span class="op">*</span>pi, <span class="dt">vmin =</span> <span class="dv">0</span>, <span class="dt">vmax =</span> <span class="dv">2</span><span class="op">*</span>pi, </span>
<span id="cb8-6">             <span class="dt">n =</span> <span class="dv">250</span>, <span class="dt">smooth =</span> <span class="ot">TRUE</span>, <span class="dt">color =</span> <span class="st">"#363940"</span>, <span class="dt">add =</span> <span class="ot">TRUE</span>)</span>
<span id="cb8-7">thph1 &lt;-<span class="st"> </span><span class="kw">rotation</span>(thph1, <span class="st">"z"</span>, <span class="dv">2</span><span class="op">*</span>pi<span class="op">/</span><span class="dv">3</span>)</span>
<span id="cb8-8">thph2 &lt;-<span class="st"> </span><span class="kw">rotation</span>(thph2, <span class="st">"z"</span>, <span class="dv">2</span><span class="op">*</span>pi<span class="op">/</span><span class="dv">3</span>)</span>
<span id="cb8-9">thph3 &lt;-<span class="st"> </span><span class="kw">rotation</span>(thph3, <span class="st">"z"</span>, <span class="dv">2</span><span class="op">*</span>pi<span class="op">/</span><span class="dv">3</span>)</span>
<span id="cb8-10">circ &lt;-<span class="st"> </span><span class="kw">circleOnUnitSphere</span>(thph1, thph2, thph3)</span>
<span id="cb8-11"><span class="kw">parametric3d</span>(fx, fy, fz, <span class="dt">umin =</span> <span class="dv">0</span>, <span class="dt">umax =</span> <span class="dv">2</span><span class="op">*</span>pi, <span class="dt">vmin =</span> <span class="dv">0</span>, <span class="dt">vmax =</span> <span class="dv">2</span><span class="op">*</span>pi, </span>
<span id="cb8-12">             <span class="dt">n =</span> <span class="dv">250</span>, <span class="dt">smooth =</span> <span class="ot">TRUE</span>, <span class="dt">color =</span> <span class="st">"#363940"</span>, <span class="dt">add =</span> <span class="ot">TRUE</span>)</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/linkedCyclides_grey.png"
        />
      </p>
    </div>
  </div>
</div>
]]></description>
      <pubDate>Sun, 12 Apr 2020 00:00:00 UT</pubDate>
      <guid>https://laustep.github.io/stlahblog/posts/HopfTorus2.html</guid>
      <dc:creator>Stéphane Laurent</dc:creator>
      <category>R</category>
    </item>
    <item>
      <title>Haskell is fast</title>
      <link>https://laustep.github.io/stlahblog/posts/HaskellIsFast.html</link>
      <description><![CDATA[<div class="container-fluid">
  <div class="main col-sm-12">
    <div class="content">
      <p>
        <em>Updated title:</em>
        <strong>Haskell is fast, but Julia is faster</strong> (see updates at
        the end).
      </p>
      <p>
        My R package ‘HypergeoMat’ provides a Rcpp implementation of Koev &amp;
        Edelman’s algorithm for the evaluation of the hypergeometric function of
        a matrix argument.
      </p>
      <p>
        I also implemented this algorithm in
        <a
          href="https://gist.github.com/stla/e85e2de1ad9aeeebc01583f1d0b8e1d0#file-hypergeompq9-jl"
          >Julia</a
        >
        and in <a href="https://github.com/stla/hypergeomPFQ">Haskell</a>.
      </p>
      <p>So let us benchmark now.</p>
      <p>Here is the hypergeometric function of a matrix argument:</p>
      <p>
        <span class="math display"
          >\[ {}_pF_q^{(\alpha)} \left(\begin{matrix} a_1, \ldots, a_p \\ b_1,
          \ldots, b_q\end{matrix}; X\right) = \sum_{k=0}^\infty\sum_{\kappa
          \vdash k} \frac{{(a_1)}_\kappa^{(\alpha)} \cdots
          {(a_p)}_\kappa^{(\alpha)}} {{(b_1)}_\kappa^{(\alpha)} \cdots
          {(b_q)}_\kappa^{(\alpha)}} \frac{C_\kappa^{(\alpha)}(X)}{k!}. \]</span
        >
      </p>
      <p>
        Well, I will not explain this expression. But observe that this is a sum
        from <span class="math inline">\(k=0\)</span> to
        <span class="math inline">\(\infty\)</span>. The algorithm evaluates the
        partial sums of this series, that is, the sum from
        <span class="math inline">\(k=0\)</span> to an integer
        <span class="math inline">\(m\)</span>.
      </p>
      <p>
        My Haskell library generates a shared library (a DLL) which can be
        called from R. And one can call Julia from R with the help of the
        ‘XRJulia’ package. So we will benchmark the three implementations from
        R.
      </p>
      <p>Firstly, let’s check that they return the same value:</p>
      <div class="sourceCode" id="cb1">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb1-1"><span class="kw">library</span>(HypergeoMat)</span>
<span id="cb1-2"><span class="kw">library</span>(XRJulia)</span>
<span id="cb1-3"><span class="co"># source the Julia code</span></span>
<span id="cb1-4"><span class="kw">juliaSource</span>(<span class="st">"HypergeomPQ09.jl"</span>)</span>
<span id="cb1-5"><span class="co"># load the Haskell DLL</span></span>
<span id="cb1-6">dll &lt;-<span class="st"> "libHypergeom.so"</span></span>
<span id="cb1-7"><span class="kw">dyn.load</span>(dll)</span>
<span id="cb1-8"><span class="kw">.C</span>(<span class="st">"HsStart"</span>)</span>
<span id="cb1-9"></span>
<span id="cb1-10">a &lt;-<span class="st"> </span><span class="kw">c</span>(<span class="dv">8</span>, <span class="dv">7</span>, <span class="dv">3</span>)</span>
<span id="cb1-11">b &lt;-<span class="st"> </span><span class="kw">c</span>(<span class="dv">9</span>, <span class="dv">16</span>)</span>
<span id="cb1-12">x &lt;-<span class="st"> </span><span class="kw">c</span>(<span class="fl">0.1</span>, <span class="fl">0.2</span>, <span class="fl">0.3</span>)</span>
<span id="cb1-13">alpha &lt;-<span class="st"> </span><span class="dv">2</span></span>
<span id="cb1-14">m &lt;-<span class="st"> </span>5L <span class="co"># `m` is the truncation order</span></span>
<span id="cb1-15"></span>
<span id="cb1-16"><span class="kw">hypergeomPFQ</span>(m, a, b, x, alpha)</span>
<span id="cb1-17"><span class="co"># 2.116251</span></span>
<span id="cb1-18"><span class="kw">juliaEval</span>(<span class="st">"hypergeom(5, [8.0, 7.0, 3.0], [9.0, 16.0], [0.1, 0.2, 0.3], 2.0)"</span>)</span>
<span id="cb1-19"><span class="co"># 2.116251</span></span>
<span id="cb1-20"><span class="kw">.Call</span>(<span class="st">"hypergeomR"</span>, m, a, b, x, alpha)</span>
<span id="cb1-21"><span class="co"># 2.116251</span></span></code></pre>
      </div>
      <p>
        Well, the same results. Now, let’s run a first series of benchmarks, for
        <span class="math inline">\(m=5\)</span>.
      </p>
      <div class="sourceCode" id="cb2">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb2-1"><span class="kw">library</span>(microbenchmark)</span>
<span id="cb2-2"><span class="kw">microbenchmark</span>(</span>
<span id="cb2-3">  <span class="dt">Rcpp =</span></span>
<span id="cb2-4">    <span class="kw">hypergeomPFQ</span>(m, a, b, x, alpha),</span>
<span id="cb2-5">  <span class="dt">Julia =</span></span>
<span id="cb2-6">    <span class="kw">juliaEval</span>(<span class="st">"hypergeom(5, [8.0, 7.0, 3.0], [9.0, 16.0], [0.1, 0.2, 0.3], 2.0)"</span>),</span>
<span id="cb2-7">  <span class="dt">Haskell =</span></span>
<span id="cb2-8">    <span class="kw">.Call</span>(<span class="st">"hypergeomR"</span>, m, a, b, x, alpha),</span>
<span id="cb2-9">  <span class="dt">times =</span> <span class="dv">10</span></span>
<span id="cb2-10">)</span></code></pre>
      </div>
      <pre><code>Unit: microseconds
    expr      min        lq       mean    median        uq       max neval cld
    Rcpp  356.682   623.807   837.7237   827.402  1084.191  1382.500    10  a 
   Julia 4052.000 47767.565 44725.3895 48845.156 50597.779 51308.089    10   b
 Haskell  610.852  1136.963  1343.7442  1289.435  1504.323  2650.976    10  a </code></pre>
      <p>
        Should we conclude that Rcpp is the winner, and that Julia is slow?
        That’s not sure. Observe that the unit of these durations is the
        microsecond. Perhaps the call to Julia via <code>juliaEval</code> is
        time-consuming, as well as the call to the Haskell DLL via
        <code>.Call</code>.
      </p>
      <p>So let us try with <span class="math inline">\(m=40\)</span> now.</p>
      <div class="sourceCode" id="cb4">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb4-1">m &lt;-<span class="st"> </span>40L</span>
<span id="cb4-2"><span class="kw">microbenchmark</span>(</span>
<span id="cb4-3">  <span class="dt">Rcpp =</span></span>
<span id="cb4-4">    <span class="kw">hypergeomPFQ</span>(m, a, b, x, alpha),</span>
<span id="cb4-5">  <span class="dt">Julia =</span></span>
<span id="cb4-6">    <span class="kw">juliaEval</span>(<span class="st">"hypergeom(40, [8.0, 7.0, 3.0], [9.0, 16.0], [0.1, 0.2, 0.3], 2.0)"</span>),</span>
<span id="cb4-7">  <span class="dt">Haskell =</span></span>
<span id="cb4-8">    <span class="kw">.Call</span>(<span class="st">"hypergeomR"</span>, m, a, b, x, alpha),</span>
<span id="cb4-9">  <span class="dt">times =</span> <span class="dv">10</span></span>
<span id="cb4-10">)</span></code></pre>
      </div>
      <pre><code>Unit: seconds
    expr       min        lq      mean    median        uq      max neval cld
    Rcpp 25.547556 25.924749 26.130888 26.185776 26.354177 26.47846    10   c
   Julia 18.959032 19.088749 19.191394 19.173662 19.291175 19.62415    10  b 
 Haskell  6.642601  6.653627  6.736082  6.735448  6.760926  6.94283    10 a </code></pre>
      <p>
        This time, the unit is the second. Haskell is clearly the winner,
        followed by Julia.
      </p>
      <p>
        I’m using Julia 1.2.0, and I have been told that there is a great
        improvement of performance in Julia 1.5.0, the latest version. I’ll try
        with Julia 1.5.0 and then I will update this post to show whether there
        is a gain of speed.
      </p>
      <p>
        One should not conclude from this experiment that Haskell
        <em>always</em> beats C++. That depends on the algorithm we benchmark.
        This one intensively uses recursion, and perhaps Haskell is strong when
        dealing with recursion.
      </p>
      <p>Don’t forget:</p>
      <div class="sourceCode" id="cb6">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb6-1"><span class="kw">dyn.unload</span>(dll)</span></code></pre>
      </div>
      <h1 id="update-julia-1.5-is-amazing">Update: Julia 1.5 is amazing</h1>
      <p>
        Now I upgraded Julia to the latest version, 1.5.2. The results are
        amazing:
      </p>
      <pre><code>Unit: seconds
    expr       min        lq      mean    median        uq       max neval cld
    Rcpp 23.464676 24.392115 24.860484 24.823062 25.013047 27.437176    10   c
   Julia  2.806364  2.852674  3.101521  2.973963  3.363618  3.897855    10 a
 Haskell  6.912441  7.459939  7.648012  7.674404  7.798719  8.322777    10  b</code></pre>
      <p>
        19 seconds for Julia 1.2.0 and 3 seconds for Julia 1.5.2! It beats
        Haskell.
      </p>
      <h1 id="update-even-better">Update: even better</h1>
      <p>
        Thanks to some advice I got on
        <a href="https://discourse.julialang.org/">discourse.julialang.org</a>,
        I improved my
        <a
          href="https://gist.github.com/stla/e85e2de1ad9aeeebc01583f1d0b8e1d0#file-hypergeompq10-jl"
          >Julia code</a
        >, and it is faster now:
      </p>
      <pre><code>Unit: seconds
  expr      min       lq     mean   median       uq      max neval
 Julia 1.499753 1.549549 1.750907 1.658282 1.915167 2.428611    10</code></pre>
    </div>
  </div>
</div>
]]></description>
      <pubDate>Thu, 22 Oct 2020 00:00:00 UT</pubDate>
      <guid>https://laustep.github.io/stlahblog/posts/HaskellIsFast.html</guid>
      <dc:creator>Stéphane Laurent</dc:creator>
      <category>R</category>
    </item>
    <item>
      <title>The 'kde1d' package</title>
      <link>https://laustep.github.io/stlahblog/posts/kde1d.html</link>
      <description><![CDATA[<div class="container-fluid">
  <div class="main col-sm-12">
    <div class="content">
      <p>
        It seems to me that the <code>kde1d</code> package (One-Dimensional
        Kernel Density Estimation) is not very known. I’ve never heard of it on
        Stack Overflow, except in an answer of mine.
      </p>
      <p>
        However this is a great package, IMHO. I’m going to show why I like it.
      </p>
      <h3 id="the-dpqr-family">The <code>d/p/q/r</code> family</h3>
      <p>
        Estimating a density with the <code>kde1d</code> function returns a
        <code>kde1d</code> object, and this makes available the density, the
        distribution function, the quantile function associated to the density
        estimate, as well as a sampler from the estimated distribution.
      </p>
      <p>
        Let’s fit a density with <code>kde1d</code> to a simulated Gaussian
        sample:
      </p>
      <div class="sourceCode" id="cb1">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb1-1"><span class="kw">library</span>(kde1d)</span>
<span id="cb1-2"><span class="kw">set.seed</span>(<span class="dv">666</span>)</span>
<span id="cb1-3">y &lt;-<span class="st"> </span><span class="kw">rnorm</span>(<span class="dv">100</span>)</span>
<span id="cb1-4">fit &lt;-<span class="st"> </span><span class="kw">kde1d</span>(y)</span></code></pre>
      </div>
      <p>
        Here is the density estimate, in green, along with the true density, in
        blue:
      </p>
      <div class="sourceCode" id="cb2">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb2-1">opar &lt;-<span class="st"> </span><span class="kw">par</span>(<span class="dt">mar =</span> <span class="kw">c</span>(<span class="dv">3</span>, <span class="dv">1</span>, <span class="dv">1</span>, <span class="dv">1</span>))</span>
<span id="cb2-2"><span class="kw">plot</span>(<span class="ot">NULL</span>, <span class="dt">xlim =</span> <span class="kw">c</span>(<span class="op">-</span><span class="fl">3.5</span>, <span class="fl">3.5</span>), <span class="dt">ylim =</span> <span class="kw">c</span>(<span class="dv">0</span>, <span class="fl">0.4</span>), <span class="dt">axes =</span> <span class="ot">FALSE</span>, <span class="dt">xlab =</span> <span class="ot">NA</span>)</span>
<span id="cb2-3"><span class="kw">axis</span>(<span class="dv">1</span>, <span class="dt">at =</span> <span class="kw">seq</span>(<span class="op">-</span><span class="dv">3</span>, <span class="dv">3</span>, <span class="dt">by=</span><span class="dv">1</span>))</span>
<span id="cb2-4"><span class="kw">curve</span>(<span class="kw">dkde1d</span>(x, fit), <span class="dt">n =</span> <span class="dv">300</span>, <span class="dt">add =</span> <span class="ot">TRUE</span>, <span class="dt">col =</span> <span class="st">"green"</span>, <span class="dt">lwd =</span> <span class="dv">2</span>)</span>
<span id="cb2-5"><span class="kw">curve</span>(<span class="kw">dnorm</span>(x), <span class="dt">n =</span> <span class="dv">300</span>, <span class="dt">add =</span> <span class="ot">TRUE</span>, <span class="dt">col =</span> <span class="st">"blue"</span>, <span class="dt">lwd =</span> <span class="dv">2</span>)</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/kde1d-unnamed-chunk-2-1.png"
        />
      </p>
      <p>The density can even be evaluated outside the range of the data:</p>
      <div class="sourceCode" id="cb3">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb3-1"><span class="kw">print</span>(<span class="kw">dkde1d</span>(<span class="kw">max</span>(y)<span class="op">+</span><span class="dv">1</span>, fit))</span>
<span id="cb3-2"><span class="co">## [1] 0.001684873</span></span></code></pre>
      </div>
      <p>The corresponding cumulative distribution function:</p>
      <div class="sourceCode" id="cb4">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb4-1">opar &lt;-<span class="st"> </span><span class="kw">par</span>(<span class="dt">mar =</span> <span class="kw">c</span>(<span class="fl">4.5</span>, <span class="dv">5</span>, <span class="dv">1</span>, <span class="dv">1</span>))</span>
<span id="cb4-2"><span class="kw">plot</span>(<span class="ot">NULL</span>, <span class="dt">xlim =</span> <span class="kw">c</span>(<span class="op">-</span><span class="fl">3.5</span>, <span class="fl">3.5</span>), <span class="dt">ylim =</span> <span class="kw">c</span>(<span class="dv">0</span>, <span class="dv">1</span>), <span class="dt">axes =</span> <span class="ot">FALSE</span>, </span>
<span id="cb4-3">     <span class="dt">xlab =</span> <span class="st">"x"</span>, <span class="dt">ylab =</span> <span class="kw">expression</span>(<span class="st">"Pr("</span><span class="op">&lt;=</span><span class="st">"x)"</span>))</span>
<span id="cb4-4"><span class="kw">axis</span>(<span class="dv">1</span>, <span class="dt">at =</span> <span class="kw">seq</span>(<span class="op">-</span><span class="dv">3</span>, <span class="dv">3</span>, <span class="dt">by=</span><span class="dv">1</span>))</span>
<span id="cb4-5"><span class="kw">axis</span>(<span class="dv">2</span>, <span class="dt">at =</span> <span class="kw">seq</span>(<span class="dv">0</span>, <span class="dv">1</span>, <span class="dt">by=</span><span class="fl">0.25</span>))</span>
<span id="cb4-6"><span class="kw">curve</span>(<span class="kw">pkde1d</span>(x, fit), <span class="dt">n =</span> <span class="dv">300</span>, <span class="dt">add =</span> <span class="ot">TRUE</span>, <span class="dt">col =</span> <span class="st">"green"</span>, <span class="dt">lwd =</span> <span class="dv">2</span>)</span>
<span id="cb4-7"><span class="kw">curve</span>(<span class="kw">pnorm</span>(x), <span class="dt">n =</span> <span class="dv">300</span>, <span class="dt">add =</span> <span class="ot">TRUE</span>, <span class="dt">col =</span> <span class="st">"blue"</span>, <span class="dt">lwd =</span> <span class="dv">2</span>)</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/kde1d-unnamed-chunk-4-1.png"
        />
      </p>
      <p>
        The corresponding inverse cumulative distribution function is evaluated
        by <code>qkde1d</code>, and <code>rkde1d</code> simulates from the
        estimated distribution.
      </p>
      <h3 id="bounded-data">Bounded data</h3>
      <p>
        By default, the data supplied to the <code>kde1d</code> function is
        assumed to be unbounded. For bounded data, use the
        <code>xmin</code> and/or <code>xmax</code> options.
      </p>
      <h3 id="estimating-monotonic-densities">
        Estimating monotonic densities
      </h3>
      <p>
        Now, something I use to convince my folks that <code>kde1d</code> is
        great. Consider a distribution having a monotonic density. The base
        function <code>density</code> does not correctly estimate the density
        (at least, with the default settings):
      </p>
      <div class="sourceCode" id="cb5">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb5-1"><span class="kw">set.seed</span>(<span class="dv">666</span>)</span>
<span id="cb5-2">y &lt;-<span class="st"> </span><span class="kw">rbeta</span>(<span class="dv">100</span>, <span class="dv">1</span>, <span class="dv">4</span>)</span>
<span id="cb5-3">opar &lt;-<span class="st"> </span><span class="kw">par</span>(<span class="dt">mar =</span> <span class="kw">c</span>(<span class="dv">3</span>, <span class="dv">1</span>, <span class="dv">1</span>, <span class="dv">1</span>))</span>
<span id="cb5-4"><span class="kw">plot</span>(<span class="ot">NULL</span>, <span class="dt">xlim =</span> <span class="kw">c</span>(<span class="dv">0</span>, <span class="dv">1</span>), <span class="dt">ylim =</span> <span class="kw">c</span>(<span class="dv">0</span>, <span class="dv">4</span>), <span class="dt">axes =</span> <span class="ot">FALSE</span>, <span class="dt">xlab =</span> <span class="ot">NA</span>)</span>
<span id="cb5-5"><span class="kw">axis</span>(<span class="dv">1</span>, <span class="dt">at =</span> <span class="kw">seq</span>(<span class="dv">0</span>, <span class="dv">1</span>, <span class="dt">by=</span><span class="fl">0.2</span>))</span>
<span id="cb5-6"><span class="kw">lines</span>(<span class="kw">density</span>(y, <span class="dt">from =</span> <span class="dv">0</span>, <span class="dt">to =</span> <span class="dv">1</span>), <span class="dt">col =</span> <span class="st">"green"</span>, <span class="dt">lwd =</span> <span class="dv">2</span>)</span>
<span id="cb5-7"><span class="kw">curve</span>(<span class="kw">dbeta</span>(x, <span class="dv">1</span>, <span class="dv">4</span>), <span class="dt">n =</span> <span class="dv">300</span>, <span class="dt">add =</span> <span class="ot">TRUE</span>, <span class="dt">col =</span> <span class="st">"blue"</span>, <span class="dt">lwd =</span> <span class="dv">2</span>)</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/kde1d-unnamed-chunk-5-1.png"
        />
      </p>
      <p>
        The monotonic aspect of the density does not occur in the estimated
        density. With <code>kde1d</code>, it does:
      </p>
      <div class="sourceCode" id="cb6">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb6-1">fit &lt;-<span class="st"> </span><span class="kw">kde1d</span>(y, <span class="dt">xmin =</span> <span class="dv">0</span>, <span class="dt">xmax =</span> <span class="dv">1</span>)</span>
<span id="cb6-2">opar &lt;-<span class="st"> </span><span class="kw">par</span>(<span class="dt">mar =</span> <span class="kw">c</span>(<span class="dv">3</span>, <span class="dv">1</span>, <span class="dv">1</span>, <span class="dv">1</span>))</span>
<span id="cb6-3"><span class="kw">plot</span>(<span class="ot">NULL</span>, <span class="dt">xlim =</span> <span class="kw">c</span>(<span class="dv">0</span>, <span class="dv">1</span>), <span class="dt">ylim =</span> <span class="kw">c</span>(<span class="dv">0</span>, <span class="dv">4</span>), <span class="dt">axes =</span> <span class="ot">FALSE</span>, <span class="dt">xlab =</span> <span class="ot">NA</span>)</span>
<span id="cb6-4"><span class="kw">axis</span>(<span class="dv">1</span>, <span class="dt">at =</span> <span class="kw">seq</span>(<span class="dv">0</span>, <span class="dv">1</span>, <span class="dt">by=</span><span class="fl">0.2</span>))</span>
<span id="cb6-5"><span class="kw">curve</span>(<span class="kw">dkde1d</span>(x, fit), <span class="dt">n =</span> <span class="dv">300</span>, <span class="dt">add =</span> <span class="ot">TRUE</span>, <span class="dt">col =</span> <span class="st">"green"</span>, <span class="dt">lwd =</span> <span class="dv">2</span>)</span>
<span id="cb6-6"><span class="kw">curve</span>(<span class="kw">dbeta</span>(x, <span class="dv">1</span>, <span class="dv">4</span>), <span class="dt">n =</span> <span class="dv">300</span>, <span class="dt">add =</span> <span class="ot">TRUE</span>, <span class="dt">col =</span> <span class="st">"blue"</span>, <span class="dt">lwd =</span> <span class="dv">2</span>)</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/kde1d-unnamed-chunk-6-1.png"
        />
      </p>
    </div>
  </div>
</div>
]]></description>
      <pubDate>Thu, 15 Oct 2020 00:00:00 UT</pubDate>
      <guid>https://laustep.github.io/stlahblog/posts/kde1d.html</guid>
      <dc:creator>Stéphane Laurent</dc:creator>
      <category>R</category>
    </item>
    <item>
      <title>My RGL artworks</title>
      <link>https://laustep.github.io/stlahblog/posts/MyRGLartworks.html</link>
      <description><![CDATA[<div class="container-fluid">
  <div class="main col-sm-12">
    <div class="content">
      <p>
        These are some of my artworks realized with the R package
        <code>rgl</code>. Source code is available in
        <a href="https://gist.github.com/stla">my gists</a>.
      </p>
      <p>
        <img
          src="https://camo.githubusercontent.com/3a27a77e8d60a10ea347017bb4f78a85f28dce7f/68747470733a2f2f7468756d62732e6766796361742e636f6d2f45737465656d656453686f7779446f6c7068696e2d73697a655f726573747269637465642e676966"
        />
      </p>
      <p>
        <img
          src="https://camo.githubusercontent.com/62bb1cef024c3353381dbadfdb75d8839d5ed1e3/68747470733a2f2f7468756d62732e6766796361742e636f6d2f48656c7066756c506c6173746963416e74626561722d73697a655f726573747269637465642e676966"
        />
      </p>
      <p>
        <img
          src="https://camo.githubusercontent.com/5ea6d902f0f85b3fff29e87251e6977e28ba0c3c/68747470733a2f2f7468756d62732e6766796361742e636f6d2f506c756d70496d70617373696f6e65644265617665722d73697a655f726573747269637465642e676966"
        />
      </p>
      <p>
        <img
          src="https://camo.githubusercontent.com/978e0f0f42673e22685f350e3c6dd6b1c8fe6dff/68747470733a2f2f7468756d62732e6766796361742e636f6d2f4269746573697a6564457175616c476175722d73697a655f726573747269637465642e676966"
        />
      </p>
      <p>
        <img
          src="https://camo.githubusercontent.com/93c6b1b2f80818492f9714858d7fc0ffe66f3266/68747470733a2f2f7468756d62732e6766796361742e636f6d2f416d626974696f757354616d6541646461782d73697a655f726573747269637465642e676966"
        />
      </p>
      <p>
        <img
          src="https://camo.githubusercontent.com/d1e218228c4efdf6085e5ae80f5cc9feeea1e04d/68747470733a2f2f7468756d62732e6766796361742e636f6d2f4b696e64686561727465644f726e6572794865646765686f672d73697a655f726573747269637465642e676966"
        />
      </p>
      <p>
        <img
          src="https://camo.githubusercontent.com/dcd38ed43716c092ae0723d1075b32e082a6cd5b/68747470733a2f2f7468756d62732e6766796361742e636f6d2f466c6177656453656c6672656c69616e7443697272697065642d73697a655f726573747269637465642e676966"
        />
      </p>
      <p>
        <img
          src="https://camo.githubusercontent.com/5ed40dd4b6e85f75621a47d3dc4230e1ad46dc75/68747470733a2f2f7468756d62732e6766796361742e636f6d2f556e73746561647957656570794672696c6c6e65636b65646c697a6172642d73697a655f726573747269637465642e676966"
        />
      </p>
      <p>
        <img
          src="https://camo.githubusercontent.com/14d6b4ef37daab1a761c14cc4e237510958615ae/68747470733a2f2f7468756d62732e6766796361742e636f6d2f59656c6c6f77496465616c496e6368776f726d2d73697a655f726573747269637465642e676966"
        />
      </p>
      <p>
        <img
          src="https://camo.githubusercontent.com/9b47e1d657392cd29e9d684864b0d531d701cf18/68747470733a2f2f7468756d62732e6766796361742e636f6d2f426f6e794964656e746963616c426f696c77656576696c2d73697a655f726573747269637465642e676966"
        />
      </p>
      <p>
        <img
          src="https://camo.githubusercontent.com/59629ef36e30e73ebf584a45435a5e9fcd8ab1ae/68747470733a2f2f7468756d62732e6766796361742e636f6d2f4c696b656c794561726c7942656e67616c74696765722d73697a655f726573747269637465642e676966"
        />
      </p>
      <p>
        <img
          src="https://camo.githubusercontent.com/94af9461f70bf88fed1ce3eaa9fbf0374b5d0883/68747470733a2f2f7468756d62732e6766796361742e636f6d2f5765656b6c79517561727465726c794963746572696e65776172626c65722d73697a655f726573747269637465642e676966"
        />
      </p>
      <p>
        <img
          src="https://camo.githubusercontent.com/460582ebfe5d8ef2724fb11970e634385a3ecc4d/68747470733a2f2f7468756d62732e6766796361742e636f6d2f546f726e536e65616b794b6f616c61626561722d73697a655f726573747269637465642e676966"
        />
      </p>
      <p>
        <img
          src="https://camo.githubusercontent.com/9cb20d35d9ad95e96c76946e65c3165d91726006/68747470733a2f2f7468756d62732e6766796361742e636f6d2f556e666f7274756e617465436172656672656547726f756e64626565746c652d73697a655f726573747269637465642e676966"
        />
      </p>
      <p>
        <img
          src="https://camo.githubusercontent.com/ff1d85320bd032c9082b008b6dec2df37ea073b8/68747470733a2f2f7468756d62732e6766796361742e636f6d2f46616d6f75734c6176697368416e7469706f646573677265656e706172616b6565742d73697a655f726573747269637465642e676966"
        />
      </p>
      <p>
        <img
          src="https://camo.githubusercontent.com/6a397f4022cb0794053f7e3f980dbf50e119c10c/68747470733a2f2f7468756d62732e6766796361742e636f6d2f537069666679536d616c6c42757a7a6172642d73697a655f726573747269637465642e676966"
        />
      </p>
      <p>
        <img
          src="https://camo.githubusercontent.com/184b3b5000b26e83ea3fe399352105d07df746d5/68747470733a2f2f7468756d62732e6766796361742e636f6d2f43697263756c6172536d6172744861636b65652d73697a655f726573747269637465642e676966"
        />
      </p>
      <p>
        <img
          src="https://camo.githubusercontent.com/abacd39b34b5b57c6c9db5d9c11c1b07c59de371/68747470733a2f2f7468756d62732e6766796361742e636f6d2f536572696f7573446972656374426f6e6f626f2d73697a655f726573747269637465642e676966"
        />
      </p>
    </div>
  </div>
</div>
]]></description>
      <pubDate>Thu, 08 Oct 2020 00:00:00 UT</pubDate>
      <guid>https://laustep.github.io/stlahblog/posts/MyRGLartworks.html</guid>
      <dc:creator>Stéphane Laurent</dc:creator>
      <category>R</category>
    </item>
    <item>
      <title>Child tables with DT, editing, exporting</title>
      <link>https://laustep.github.io/stlahblog/posts/DT_childTables.html</link>
      <description><![CDATA[<div class="container-fluid">
  <div class="main col-sm-12">
    <div class="content">
      <p>
        I’m going to show how to use the <code>DT</code> package to do a table
        with child tables, and how to edit and export such a table.
      </p>
      <p>
        In order to do a table with child tables, one adds a list column to the
        dataframe of the main table; each cell of this column contains the child
        table of the corresponding row, given as a list. This is done by the
        <code>NestedData</code> function below.
      </p>
      <div class="sourceCode" id="cb1">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb1-1">NestedData &lt;-<span class="st"> </span><span class="cf">function</span>(dat, children){</span>
<span id="cb1-2">  <span class="kw">stopifnot</span>(<span class="kw">length</span>(children) <span class="op">==</span><span class="st"> </span><span class="kw">nrow</span>(dat))</span>
<span id="cb1-3">  g &lt;-<span class="st"> </span><span class="cf">function</span>(d){</span>
<span id="cb1-4">    <span class="cf">if</span>(<span class="kw">is.data.frame</span>(d)){</span>
<span id="cb1-5">      purrr<span class="op">::</span><span class="kw">transpose</span>(d)</span>
<span id="cb1-6">    }<span class="cf">else</span>{</span>
<span id="cb1-7">      purrr<span class="op">::</span><span class="kw">transpose</span>(<span class="kw">NestedData</span>(d[[<span class="dv">1</span>]], <span class="dt">children =</span> d<span class="op">$</span>children))</span>
<span id="cb1-8">    }</span>
<span id="cb1-9">  }</span>
<span id="cb1-10">  subdats &lt;-<span class="st"> </span><span class="kw">lapply</span>(children, g)</span>
<span id="cb1-11">  oplus &lt;-<span class="st"> </span><span class="kw">ifelse</span>(<span class="kw">lengths</span>(subdats), <span class="st">"&amp;oplus;"</span>, <span class="st">""</span>) </span>
<span id="cb1-12">  <span class="kw">cbind</span>(<span class="st">" "</span> =<span class="st"> </span>oplus, dat, <span class="st">"_details"</span> =<span class="st"> </span><span class="kw">I</span>(subdats), </span>
<span id="cb1-13">        <span class="dt">stringsAsFactors =</span> <span class="ot">FALSE</span>)</span>
<span id="cb1-14">}</span></code></pre>
      </div>
      <p>
        The usage of <code>NestedData</code> is easy to understand with an
        example:
      </p>
      <div class="sourceCode" id="cb2">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb2-1">dat0   =<span class="st"> </span>iris[<span class="dv">1</span><span class="op">:</span><span class="dv">3</span>,]        <span class="co"># main table, with three rows</span></span>
<span id="cb2-2">dat01  =<span class="st"> </span>airquality[<span class="dv">1</span><span class="op">:</span><span class="dv">4</span>,]  <span class="co"># |- child of first row</span></span>
<span id="cb2-3">dat02  =<span class="st"> </span>cars[<span class="dv">1</span><span class="op">:</span><span class="dv">2</span>,]        <span class="co"># |- child of second row, with two rows</span></span>
<span id="cb2-4">dat021 =<span class="st"> </span>mtcars[<span class="dv">1</span><span class="op">:</span><span class="dv">3</span>,]      <span class="co"># |  |- child of first row of dat02</span></span>
<span id="cb2-5">dat022 =<span class="st"> </span>PlantGrowth[<span class="dv">1</span><span class="op">:</span><span class="dv">4</span>,] <span class="co"># |  |- child of second row of dat02</span></span>
<span id="cb2-6">dat03  =<span class="st"> </span><span class="kw">data.frame</span>(<span class="ot">NULL</span>)  <span class="co"># |- third row has no child</span></span>
<span id="cb2-7"></span>
<span id="cb2-8">Dat &lt;-<span class="st"> </span><span class="kw">NestedData</span>(</span>
<span id="cb2-9">  <span class="dt">dat =</span> dat0, </span>
<span id="cb2-10">  <span class="dt">children =</span> <span class="kw">list</span>(</span>
<span id="cb2-11">    dat01, </span>
<span id="cb2-12">    <span class="kw">list</span>(  </span>
<span id="cb2-13">      dat02, </span>
<span id="cb2-14">      <span class="dt">children =</span> <span class="kw">list</span>(</span>
<span id="cb2-15">        dat021, </span>
<span id="cb2-16">        dat022</span>
<span id="cb2-17">      )</span>
<span id="cb2-18">    ), </span>
<span id="cb2-19">    dat03 </span>
<span id="cb2-20">  )</span>
<span id="cb2-21">)</span></code></pre>
      </div>
      <p>
        Now we define the JavaScript callback which will be used. The code
        depends on whether one wants to display the row names of the main table,
        so the user has to enter this information before.
      </p>
      <div class="sourceCode" id="cb3">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb3-1"><span class="kw">library</span>(DT)</span>
<span id="cb3-2"></span>
<span id="cb3-3"><span class="co">## whether to show row names</span></span>
<span id="cb3-4">rowNames =<span class="st"> </span><span class="ot">FALSE</span></span>
<span id="cb3-5">colIdx &lt;-<span class="st"> </span><span class="kw">as.integer</span>(rowNames)</span>
<span id="cb3-6"></span>
<span id="cb3-7"><span class="co">## the callback</span></span>
<span id="cb3-8">parentRows &lt;-<span class="st"> </span><span class="kw">which</span>(Dat[,<span class="dv">1</span>] <span class="op">!=</span><span class="st"> ""</span>)</span>
<span id="cb3-9">callback &lt;-<span class="st"> </span><span class="kw">JS</span>(</span>
<span id="cb3-10">  <span class="kw">sprintf</span>(<span class="st">"var parentRows = [%s];"</span>, <span class="kw">toString</span>(parentRows<span class="dv">-1</span>)),</span>
<span id="cb3-11">  <span class="kw">sprintf</span>(<span class="st">"var j0 = %d;"</span>, colIdx),</span>
<span id="cb3-12">  <span class="st">"var nrows = table.rows().count();"</span>,</span>
<span id="cb3-13">  <span class="st">"for(let i = 0; i &lt; nrows; ++i){"</span>,</span>
<span id="cb3-14">  <span class="st">"  var $cell = table.cell(i,j0).nodes().to$();"</span>,</span>
<span id="cb3-15">  <span class="st">"  if(parentRows.indexOf(i) &gt; -1){"</span>,</span>
<span id="cb3-16">  <span class="st">"    $cell.css({cursor: 'pointer'});"</span>,</span>
<span id="cb3-17">  <span class="st">"  }else{"</span>,</span>
<span id="cb3-18">  <span class="st">"    $cell.removeClass('details-control');"</span>,</span>
<span id="cb3-19">  <span class="st">"  }"</span>,</span>
<span id="cb3-20">  <span class="st">"}"</span>,</span>
<span id="cb3-21">  <span class="st">""</span>,</span>
<span id="cb3-22">  <span class="st">"// --- make the table header of the nested table --- //"</span>,</span>
<span id="cb3-23">  <span class="st">"var formatHeader = function(d, childId){"</span>,</span>
<span id="cb3-24">  <span class="st">"  if(d !== null){"</span>,</span>
<span id="cb3-25">  <span class="st">"    var html = "</span>, </span>
<span id="cb3-26">  <span class="st">"      '&lt;table class=</span><span class="ch">\"</span><span class="st">display compact hover</span><span class="ch">\"</span><span class="st"> ' + "</span>,</span>
<span id="cb3-27">  <span class="st">"      'style=</span><span class="ch">\"</span><span class="st">padding-left: 30px;</span><span class="ch">\"</span><span class="st"> id=</span><span class="ch">\"</span><span class="st">' + childId + "</span>, </span>
<span id="cb3-28">  <span class="st">"      '</span><span class="ch">\"</span><span class="st">&gt;&lt;thead&gt;&lt;tr&gt;';"</span>,</span>
<span id="cb3-29">  <span class="st">"    var data = d[d.length-1] || d._details;"</span>,</span>
<span id="cb3-30">  <span class="st">"    for(let key in data[0]){"</span>,</span>
<span id="cb3-31">  <span class="st">"      html += '&lt;th&gt;' + key + '&lt;/th&gt;';"</span>,</span>
<span id="cb3-32">  <span class="st">"    }"</span>,</span>
<span id="cb3-33">  <span class="st">"    html += '&lt;/tr&gt;&lt;/thead&gt;&lt;/table&gt;'"</span>,</span>
<span id="cb3-34">  <span class="st">"    return html;"</span>,</span>
<span id="cb3-35">  <span class="st">"  } else {"</span>,</span>
<span id="cb3-36">  <span class="st">"    return '';"</span>,</span>
<span id="cb3-37">  <span class="st">"  }"</span>,</span>
<span id="cb3-38">  <span class="st">"};"</span>,</span>
<span id="cb3-39">  <span class="st">""</span>,</span>
<span id="cb3-40">  <span class="st">"// --- row callback to style rows of child tables --- //"</span>,</span>
<span id="cb3-41">  <span class="st">"var rowCallback = function(row, dat, displayNum, index){"</span>,</span>
<span id="cb3-42">  <span class="st">"  if($(row).hasClass('odd')){"</span>,</span>
<span id="cb3-43">  <span class="st">"    $(row).css('background-color', 'papayawhip');"</span>,</span>
<span id="cb3-44">  <span class="st">"    $(row).hover(function(){"</span>,</span>
<span id="cb3-45">  <span class="st">"      $(this).css('background-color', '#E6FF99');"</span>,</span>
<span id="cb3-46">  <span class="st">"    }, function(){"</span>,</span>
<span id="cb3-47">  <span class="st">"      $(this).css('background-color', 'papayawhip');"</span>,</span>
<span id="cb3-48">  <span class="st">"    });"</span>,</span>
<span id="cb3-49">  <span class="st">"  } else {"</span>,</span>
<span id="cb3-50">  <span class="st">"    $(row).css('background-color', 'lemonchiffon');"</span>,</span>
<span id="cb3-51">  <span class="st">"    $(row).hover(function(){"</span>,</span>
<span id="cb3-52">  <span class="st">"      $(this).css('background-color', '#DDFF75');"</span>,</span>
<span id="cb3-53">  <span class="st">"    }, function(){"</span>,</span>
<span id="cb3-54">  <span class="st">"      $(this).css('background-color', 'lemonchiffon');"</span>,</span>
<span id="cb3-55">  <span class="st">"    });"</span>,</span>
<span id="cb3-56">  <span class="st">"  }"</span>,</span>
<span id="cb3-57">  <span class="st">"};"</span>,</span>
<span id="cb3-58">  <span class="st">""</span>,</span>
<span id="cb3-59">  <span class="st">"// --- header callback to style header of child tables --- //"</span>,</span>
<span id="cb3-60">  <span class="st">"var headerCallback = function(thead, data, start, end, display){"</span>,</span>
<span id="cb3-61">  <span class="st">"  $('th', thead).css({"</span>,</span>
<span id="cb3-62">  <span class="st">"    'border-top': '3px solid indigo',"</span>, </span>
<span id="cb3-63">  <span class="st">"    'color': 'indigo',"</span>,</span>
<span id="cb3-64">  <span class="st">"    'background-color': '#fadadd'"</span>,</span>
<span id="cb3-65">  <span class="st">"  });"</span>,</span>
<span id="cb3-66">  <span class="st">"};"</span>,</span>
<span id="cb3-67">  <span class="st">""</span>,</span>
<span id="cb3-68">  <span class="st">"// --- make the datatable --- //"</span>,</span>
<span id="cb3-69">  <span class="st">"var formatDatatable = function(d, childId){"</span>,</span>
<span id="cb3-70">  <span class="st">"  var data = d[d.length-1] || d._details;"</span>,</span>
<span id="cb3-71">  <span class="st">"  var colNames = Object.keys(data[0]);"</span>,</span>
<span id="cb3-72">  <span class="st">"  var columns = colNames.map(function(x){"</span>,</span>
<span id="cb3-73">  <span class="st">"    return {data: x.replace(/</span><span class="ch">\\</span><span class="st">./g, '</span><span class="ch">\\\\\\</span><span class="st">.'), title: x};"</span>,</span>
<span id="cb3-74">  <span class="st">"  });"</span>,</span>
<span id="cb3-75">  <span class="st">"  var id = 'table#' + childId;"</span>,</span>
<span id="cb3-76">  <span class="st">"  if(colNames.indexOf('_details') === -1){"</span>,</span>
<span id="cb3-77">  <span class="st">"    var subtable = $(id).DataTable({"</span>,</span>
<span id="cb3-78">  <span class="st">"      'data': data,"</span>,</span>
<span id="cb3-79">  <span class="st">"      'columns': columns,"</span>,</span>
<span id="cb3-80">  <span class="st">"      'autoWidth': true,"</span>,</span>
<span id="cb3-81">  <span class="st">"      'deferRender': true,"</span>,</span>
<span id="cb3-82">  <span class="st">"      'info': false,"</span>,</span>
<span id="cb3-83">  <span class="st">"      'lengthChange': false,"</span>,</span>
<span id="cb3-84">  <span class="st">"      'ordering': data.length &gt; 1,"</span>,</span>
<span id="cb3-85">  <span class="st">"      'order': [],"</span>,</span>
<span id="cb3-86">  <span class="st">"      'paging': false,"</span>,</span>
<span id="cb3-87">  <span class="st">"      'scrollX': false,"</span>,</span>
<span id="cb3-88">  <span class="st">"      'scrollY': false,"</span>,</span>
<span id="cb3-89">  <span class="st">"      'searching': false,"</span>,</span>
<span id="cb3-90">  <span class="st">"      'sortClasses': false,"</span>,</span>
<span id="cb3-91">  <span class="st">"      'rowCallback': rowCallback,"</span>,</span>
<span id="cb3-92">  <span class="st">"      'headerCallback': headerCallback,"</span>,</span>
<span id="cb3-93">  <span class="st">"      'columnDefs': [{targets: '_all', className: 'dt-center'}]"</span>,</span>
<span id="cb3-94">  <span class="st">"    });"</span>,</span>
<span id="cb3-95">  <span class="st">"  } else {"</span>,</span>
<span id="cb3-96">  <span class="st">"    var subtable = $(id).DataTable({"</span>,</span>
<span id="cb3-97">  <span class="st">"      'data': data,"</span>,</span>
<span id="cb3-98">  <span class="st">"      'columns': columns,"</span>,</span>
<span id="cb3-99">  <span class="st">"      'autoWidth': true,"</span>,</span>
<span id="cb3-100">  <span class="st">"      'deferRender': true,"</span>,</span>
<span id="cb3-101">  <span class="st">"      'info': false,"</span>,</span>
<span id="cb3-102">  <span class="st">"      'lengthChange': false,"</span>,</span>
<span id="cb3-103">  <span class="st">"      'ordering': data.length &gt; 1,"</span>,</span>
<span id="cb3-104">  <span class="st">"      'order': [],"</span>,</span>
<span id="cb3-105">  <span class="st">"      'paging': false,"</span>,</span>
<span id="cb3-106">  <span class="st">"      'scrollX': false,"</span>,</span>
<span id="cb3-107">  <span class="st">"      'scrollY': false,"</span>,</span>
<span id="cb3-108">  <span class="st">"      'searching': false,"</span>,</span>
<span id="cb3-109">  <span class="st">"      'sortClasses': false,"</span>,</span>
<span id="cb3-110">  <span class="st">"      'rowCallback': rowCallback,"</span>,</span>
<span id="cb3-111">  <span class="st">"      'headerCallback': headerCallback,"</span>,</span>
<span id="cb3-112">  <span class="st">"      'columnDefs': ["</span>, </span>
<span id="cb3-113">  <span class="st">"        {targets: -1, visible: false},"</span>, </span>
<span id="cb3-114">  <span class="st">"        {targets: 0, orderable: false, className: 'details-control'},"</span>, </span>
<span id="cb3-115">  <span class="st">"        {targets: '_all', className: 'dt-center'}"</span>,</span>
<span id="cb3-116">  <span class="st">"      ]"</span>,</span>
<span id="cb3-117">  <span class="st">"    }).column(0).nodes().to$().css({cursor: 'pointer'});"</span>,</span>
<span id="cb3-118">  <span class="st">"  }"</span>,</span>
<span id="cb3-119">  <span class="st">"};"</span>,</span>
<span id="cb3-120">  <span class="st">""</span>,</span>
<span id="cb3-121">  <span class="st">"// --- display the child table on click --- //"</span>,</span>
<span id="cb3-122">  <span class="st">"// array to store id's of already created child tables"</span>,</span>
<span id="cb3-123">  <span class="st">"var children = [];"</span>, </span>
<span id="cb3-124">  <span class="st">"table.on('click', 'td.details-control', function(){"</span>,</span>
<span id="cb3-125">  <span class="st">"  var tbl = $(this).closest('table'),"</span>,</span>
<span id="cb3-126">  <span class="st">"      tblId = tbl.attr('id'),"</span>,</span>
<span id="cb3-127">  <span class="st">"      td = $(this),"</span>,</span>
<span id="cb3-128">  <span class="st">"      row = $(tbl).DataTable().row(td.closest('tr')),"</span>,</span>
<span id="cb3-129">  <span class="st">"      rowIdx = row.index();"</span>,</span>
<span id="cb3-130">  <span class="st">"  if(row.child.isShown()){"</span>,</span>
<span id="cb3-131">  <span class="st">"    row.child.hide();"</span>,</span>
<span id="cb3-132">  <span class="st">"    td.html('&amp;oplus;');"</span>,</span>
<span id="cb3-133">  <span class="st">"  } else {"</span>,</span>
<span id="cb3-134">  <span class="st">"    var childId = tblId + '-child-' + rowIdx;"</span>,</span>
<span id="cb3-135">  <span class="st">"    if(children.indexOf(childId) === -1){"</span>, </span>
<span id="cb3-136">  <span class="st">"      // this child has not been created yet"</span>,</span>
<span id="cb3-137">  <span class="st">"      children.push(childId);"</span>,</span>
<span id="cb3-138">  <span class="st">"      row.child(formatHeader(row.data(), childId)).show();"</span>,</span>
<span id="cb3-139">  <span class="st">"      td.html('&amp;CircleMinus;');"</span>,</span>
<span id="cb3-140">  <span class="st">"      formatDatatable(row.data(), childId, rowIdx);"</span>,</span>
<span id="cb3-141">  <span class="st">"    }else{"</span>,</span>
<span id="cb3-142">  <span class="st">"      // this child has already been created"</span>,</span>
<span id="cb3-143">  <span class="st">"      row.child(true);"</span>,</span>
<span id="cb3-144">  <span class="st">"      td.html('&amp;CircleMinus;');"</span>,</span>
<span id="cb3-145">  <span class="st">"    }"</span>,</span>
<span id="cb3-146">  <span class="st">"  }"</span>,</span>
<span id="cb3-147">  <span class="st">"});"</span>)</span></code></pre>
      </div>
      <p>
        Now, here is the code which generates the table. The first column
        contains some HTML (⊕) so we have to not escape it. The last column
        contains the child data, it has to be hidden. Finally we assign the
        class <code>details-control</code> to the first column, this is used by
        the callback.
      </p>
      <div class="sourceCode" id="cb4">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb4-1"><span class="kw">datatable</span>(</span>
<span id="cb4-2">  Dat, </span>
<span id="cb4-3">  <span class="dt">callback =</span> callback, <span class="dt">rownames =</span> rowNames, <span class="dt">escape =</span> <span class="op">-</span>colIdx<span class="dv">-1</span>,</span>
<span id="cb4-4">  <span class="dt">options =</span> <span class="kw">list</span>(</span>
<span id="cb4-5">    <span class="dt">paging =</span> <span class="ot">FALSE</span>,</span>
<span id="cb4-6">    <span class="dt">searching =</span> <span class="ot">FALSE</span>,</span>
<span id="cb4-7">    <span class="dt">columnDefs =</span> <span class="kw">list</span>(</span>
<span id="cb4-8">      <span class="kw">list</span>(</span>
<span id="cb4-9">        <span class="dt">visible =</span> <span class="ot">FALSE</span>, </span>
<span id="cb4-10">        <span class="dt">targets =</span> <span class="kw">ncol</span>(Dat)<span class="op">-</span><span class="dv">1</span><span class="op">+</span>colIdx</span>
<span id="cb4-11">      ),</span>
<span id="cb4-12">      <span class="kw">list</span>(</span>
<span id="cb4-13">        <span class="dt">orderable =</span> <span class="ot">FALSE</span>, </span>
<span id="cb4-14">        <span class="dt">className =</span> <span class="st">"details-control"</span>, </span>
<span id="cb4-15">        <span class="dt">targets =</span> colIdx</span>
<span id="cb4-16">      ),</span>
<span id="cb4-17">      <span class="kw">list</span>(</span>
<span id="cb4-18">        <span class="dt">className =</span> <span class="st">"dt-center"</span>, </span>
<span id="cb4-19">        <span class="dt">targets =</span> <span class="st">"_all"</span></span>
<span id="cb4-20">      )</span>
<span id="cb4-21">    )</span>
<span id="cb4-22">  )</span>
<span id="cb4-23">)</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/DTchildRows1.gif"
        />
      </p>
      <h1 id="editing">Editing</h1>
      <p>
        We use the JavaScript library
        <a href="https://github.com/ejbeaty/CellEdit">CellEdit</a> to allow
        cells, including the cells of the child tables, to be editable. Download
        the file <strong>dataTables.cellEdit.js</strong>.
      </p>
      <p>
        Some CSS is required in order to make things pretty. Save the following
        CSS code in a file <strong>dataTables.cellEdit.css</strong>.
      </p>
      <div class="sourceCode" id="cb5">
        <pre
          class="sourceCode css"
        ><code class="sourceCode css"><span id="cb5-1"><span class="fu">.my-input-class</span> {</span>
<span id="cb5-2">  <span class="kw">padding</span>: <span class="dv">3</span><span class="dt">px</span> <span class="dv">6</span><span class="dt">px</span><span class="op">;</span></span>
<span id="cb5-3">  <span class="kw">border</span>: <span class="dv">1</span><span class="dt">px</span> <span class="dv">solid</span> <span class="cn">#ccc</span><span class="op">;</span></span>
<span id="cb5-4">  <span class="kw">border-radius</span>: <span class="dv">4</span><span class="dt">px</span><span class="op">;</span></span>
<span id="cb5-5">  <span class="kw">width</span>: <span class="dv">60</span><span class="dt">px</span><span class="op">;</span></span>
<span id="cb5-6">}</span>
<span id="cb5-7"></span>
<span id="cb5-8"><span class="fu">.my-confirm-class</span> {</span>
<span id="cb5-9">  <span class="kw">padding</span>: <span class="dv">3</span><span class="dt">px</span> <span class="dv">6</span><span class="dt">px</span><span class="op">;</span></span>
<span id="cb5-10">  <span class="kw">font-size</span>: <span class="dv">12</span><span class="dt">px</span><span class="op">;</span></span>
<span id="cb5-11">  <span class="kw">color</span>: <span class="cn">white</span><span class="op">;</span></span>
<span id="cb5-12">  <span class="kw">text-align</span>: <span class="dv">center</span><span class="op">;</span></span>
<span id="cb5-13">  <span class="kw">vertical-align</span>: <span class="dv">middle</span><span class="op">;</span></span>
<span id="cb5-14">  <span class="kw">border-radius</span>: <span class="dv">4</span><span class="dt">px</span><span class="op">;</span></span>
<span id="cb5-15">  <span class="kw">background-color</span>: <span class="cn">#337ab7</span><span class="op">;</span></span>
<span id="cb5-16">  <span class="kw">text-decoration</span>: <span class="dv">none</span><span class="op">;</span></span>
<span id="cb5-17">}</span>
<span id="cb5-18"></span>
<span id="cb5-19"><span class="fu">.my-cancel-class</span> {</span>
<span id="cb5-20">  <span class="kw">padding</span>: <span class="dv">3</span><span class="dt">px</span> <span class="dv">6</span><span class="dt">px</span><span class="op">;</span></span>
<span id="cb5-21">  <span class="kw">font-size</span>: <span class="dv">12</span><span class="dt">px</span><span class="op">;</span></span>
<span id="cb5-22">  <span class="kw">color</span>: <span class="cn">white</span><span class="op">;</span></span>
<span id="cb5-23">  <span class="kw">text-align</span>: <span class="dv">center</span><span class="op">;</span></span>
<span id="cb5-24">  <span class="kw">vertical-align</span>: <span class="dv">middle</span><span class="op">;</span></span>
<span id="cb5-25">  <span class="kw">border-radius</span>: <span class="dv">4</span><span class="dt">px</span><span class="op">;</span></span>
<span id="cb5-26">  <span class="kw">background-color</span>: <span class="cn">#a94442</span><span class="op">;</span></span>
<span id="cb5-27">  <span class="kw">text-decoration</span>: <span class="dv">none</span><span class="op">;</span></span>
<span id="cb5-28">}</span></code></pre>
      </div>
      <p>Now modify the callback as follows:</p>
      <div class="sourceCode" id="cb6">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb6-1">callback &lt;-<span class="st"> </span><span class="kw">JS</span>(</span>
<span id="cb6-2">  <span class="st">"function onUpdate(updatedCell, updatedRow, oldValue) {};"</span>,</span>
<span id="cb6-3">  <span class="st">"table.MakeCellsEditable({"</span>,</span>
<span id="cb6-4">  <span class="st">"  onUpdate: onUpdate,"</span>,</span>
<span id="cb6-5">  <span class="st">"  inputCss: 'my-input-class',"</span>,</span>
<span id="cb6-6">  <span class="st">"  confirmationButton: {"</span>,</span>
<span id="cb6-7">  <span class="st">"    confirmCss: 'my-confirm-class',"</span>,</span>
<span id="cb6-8">  <span class="st">"    cancelCss: 'my-cancel-class'"</span>,</span>
<span id="cb6-9">  <span class="st">"  }"</span>,</span>
<span id="cb6-10">  <span class="st">"});"</span>,</span>
<span id="cb6-11">  <span class="kw">sprintf</span>(<span class="st">"var parentRows = [%s];"</span>, <span class="kw">toString</span>(parentRows<span class="dv">-1</span>)),</span>
<span id="cb6-12">  </span>
<span id="cb6-13">  ......</span>
<span id="cb6-14">  </span>
<span id="cb6-15">  <span class="st">"// --- make the datatable --- //"</span>,</span>
<span id="cb6-16">  <span class="st">"var formatDatatable = function(d, childId){"</span>,</span>
<span id="cb6-17">  </span>
<span id="cb6-18">  ......</span>
<span id="cb6-19"></span>
<span id="cb6-20">  <span class="st">"    }).column(0).nodes().to$().css({cursor: 'pointer'});"</span>,</span>
<span id="cb6-21">  <span class="st">"  }"</span>,</span>
<span id="cb6-22">  <span class="st">"  subtable.MakeCellsEditable({"</span>,</span>
<span id="cb6-23">  <span class="st">"    onUpdate: onUpdate,"</span>,</span>
<span id="cb6-24">  <span class="st">"    inputCss: 'my-input-class',"</span>,</span>
<span id="cb6-25">  <span class="st">"    confirmationButton: {"</span>,</span>
<span id="cb6-26">  <span class="st">"      confirmCss: 'my-confirm-class',"</span>,</span>
<span id="cb6-27">  <span class="st">"      cancelCss: 'my-cancel-class'"</span>,</span>
<span id="cb6-28">  <span class="st">"    }"</span>,</span>
<span id="cb6-29">  <span class="st">"  });"</span>,</span>
<span id="cb6-30">  <span class="st">"};"</span>,</span>
<span id="cb6-31">  <span class="st">""</span>,</span>
<span id="cb6-32">  <span class="st">"// --- display the child table on click --- //"</span>,</span>
<span id="cb6-33"></span>
<span id="cb6-34">  ......</span>
<span id="cb6-35">  </span>
<span id="cb6-36">  <span class="st">"});"</span>)</span></code></pre>
      </div>
      <p>
        Use the same code as before to generate the table but store the output:
      </p>
      <div class="sourceCode" id="cb7">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb7-1">dtable &lt;-<span class="st"> </span><span class="kw">datatable</span>(</span>
<span id="cb7-2">  Dat, </span>
<span id="cb7-3">  <span class="dt">callback =</span> callback, <span class="dt">rownames =</span> rowNames, <span class="dt">escape =</span> <span class="op">-</span>colIdx<span class="dv">-1</span>,</span>
<span id="cb7-4">  <span class="dt">options =</span> <span class="kw">list</span>(</span>
<span id="cb7-5">    <span class="dt">paging =</span> <span class="ot">FALSE</span>,</span>
<span id="cb7-6">    <span class="dt">searching =</span> <span class="ot">FALSE</span>,</span>
<span id="cb7-7">    <span class="dt">columnDefs =</span> <span class="kw">list</span>(</span>
<span id="cb7-8">      <span class="kw">list</span>(</span>
<span id="cb7-9">        <span class="dt">visible =</span> <span class="ot">FALSE</span>, </span>
<span id="cb7-10">        <span class="dt">targets =</span> <span class="kw">ncol</span>(Dat)<span class="op">-</span><span class="dv">1</span><span class="op">+</span>colIdx</span>
<span id="cb7-11">      ),</span>
<span id="cb7-12">      <span class="kw">list</span>(</span>
<span id="cb7-13">        <span class="dt">orderable =</span> <span class="ot">FALSE</span>, </span>
<span id="cb7-14">        <span class="dt">className =</span> <span class="st">"details-control"</span>, </span>
<span id="cb7-15">        <span class="dt">targets =</span> colIdx</span>
<span id="cb7-16">      ),</span>
<span id="cb7-17">      <span class="kw">list</span>(</span>
<span id="cb7-18">        <span class="dt">className =</span> <span class="st">"dt-center"</span>, </span>
<span id="cb7-19">        <span class="dt">targets =</span> <span class="st">"_all"</span></span>
<span id="cb7-20">      )</span>
<span id="cb7-21">    )</span>
<span id="cb7-22">  )</span>
<span id="cb7-23">)</span></code></pre>
      </div>
      <p>Now we add the dependencies to the <code>datatable</code>:</p>
      <div class="sourceCode" id="cb8">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb8-1">path &lt;-<span class="st"> "path/to/cellEdit"</span> <span class="co"># folder containing the files </span></span>
<span id="cb8-2">                           <span class="co"># dataTables.cellEdit.js and </span></span>
<span id="cb8-3">                           <span class="co"># dataTables.cellEdit.css</span></span>
<span id="cb8-4">dep &lt;-<span class="st"> </span>htmltools<span class="op">::</span><span class="kw">htmlDependency</span>(</span>
<span id="cb8-5">  <span class="st">"CellEdit"</span>, <span class="st">"1.0.19"</span>, path, </span>
<span id="cb8-6">  <span class="dt">script =</span> <span class="st">"dataTables.cellEdit.js"</span>, </span>
<span id="cb8-7">  <span class="dt">stylesheet =</span> <span class="st">"dataTables.cellEdit.css"</span>)</span>
<span id="cb8-8">dtable<span class="op">$</span>dependencies &lt;-<span class="st"> </span><span class="kw">c</span>(dtable<span class="op">$</span>dependencies, <span class="kw">list</span>(dep))</span>
<span id="cb8-9"></span>
<span id="cb8-10">dtable</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/DTchildRows2.gif"
        />
      </p>
      <h1 id="exporting">Exporting</h1>
      <p>
        Now we show how to export a table with its child tables to an Excel
        file, when there is only one level of child tables (<em>i.e.</em> when
        the child tables of the main table do not have child tables themselves).
        To do so, we use the <code>customize</code> callback of the Excel button
        provided by the <code>Buttons</code> extension. I found this code on the
        DataTables forum. In the first row of the callback,
        <code>mytable</code> is the id of the datatable:
      </p>
      <div class="sourceCode" id="cb9">
        <pre
          class="sourceCode js"
        ><code class="sourceCode javascript"><span id="cb9-1"><span class="kw">var</span> table <span class="op">=</span> <span class="fu">$</span>(<span class="st">'#mytable'</span>)<span class="op">.</span><span class="fu">find</span>(<span class="st">'table'</span>)<span class="op">.</span><span class="fu">DataTable</span>()<span class="op">;</span></span></code></pre>
      </div>
      <p>
        If you don’t use Shiny, you have to set this id in the
        <code>elementId</code> argument of the <code>datatable</code> function.
        If you use Shiny, this id is the key of the element of the
        <code>output</code> object in which you assign a <code>renderDT</code>:
      </p>
      <div class="sourceCode" id="cb10">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb10-1">output[[<span class="st">"mytable"</span>]] &lt;-<span class="st"> </span><span class="kw">renderDT</span>({</span>
<span id="cb10-2">  ......</span>
<span id="cb10-3">})</span></code></pre>
      </div>
      <p>
        The JavaScript code depends on whether the user desires a title in the
        Excel file, so this information has to be provided first.
      </p>
      <div class="sourceCode" id="cb11">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb11-1">excelTitle =<span class="st"> </span><span class="ot">NULL</span> <span class="co"># enter title or set to NULL if you don't want a title</span></span>
<span id="cb11-2">js_customXLSX &lt;-<span class="st"> </span><span class="kw">JS</span>(</span>
<span id="cb11-3">  <span class="st">"function(xlsx){"</span>,</span>
<span id="cb11-4">  <span class="st">"  var table = $('#mytable').find('table').DataTable();"</span>,</span>
<span id="cb11-5">  <span class="st">"  // Number of columns."</span>,</span>
<span id="cb11-6">  <span class="kw">sprintf</span>(<span class="st">"  var ncols = %d;"</span>, <span class="kw">ncol</span>(Dat)),</span>
<span id="cb11-7">  <span class="st">"  // Is there a title?"</span>,</span>
<span id="cb11-8">  <span class="kw">sprintf</span>(<span class="st">"  var title = %s;"</span>, </span>
<span id="cb11-9">          <span class="kw">ifelse</span>(<span class="kw">is.null</span>(excelTitle), <span class="st">"false"</span>, <span class="st">"true"</span>)),</span>
<span id="cb11-10">  <span class="st">"  // Integer to Excel column: 0 -&gt; A, 1 -&gt; B, ..., 25 -&gt; Z, 26 -&gt; AA, ..."</span>,</span>
<span id="cb11-11">  <span class="st">"  var XLcolumn = function(j){"</span>, </span>
<span id="cb11-12">  <span class="st">"    return j &lt; 0 ? "</span>,</span>
<span id="cb11-13">  <span class="st">"      '' : XLcolumn(j/26-1) + String.fromCharCode(j % 26 + 65);"</span>,</span>
<span id="cb11-14">  <span class="st">"  };"</span>,</span>
<span id="cb11-15">  <span class="st">"  // Get sheet."</span>,</span>
<span id="cb11-16">  <span class="st">"  var sheet = xlsx.xl.worksheets['sheet1.xml'];"</span>,</span>
<span id="cb11-17">  <span class="st">"  // Get a clone of the sheet data.        "</span>,</span>
<span id="cb11-18">  <span class="st">"  var sheetData = $('sheetData', sheet).clone();"</span>,</span>
<span id="cb11-19">  <span class="st">"  // Clear the current sheet data for appending rows."</span>,</span>
<span id="cb11-20">  <span class="st">"  $('sheetData', sheet).empty();"</span>,</span>
<span id="cb11-21">  <span class="st">"  // Row count in Excel sheet."</span>,</span>
<span id="cb11-22">  <span class="st">"  var rowCount = 1;"</span>,</span>
<span id="cb11-23">  <span class="st">"  // Iterate each row in the sheet data."</span>,</span>
<span id="cb11-24">  <span class="st">"  $(sheetData).children().each(function (index) {"</span>,</span>
<span id="cb11-25">  <span class="st">"    // Used for DT row() API to get child data."</span>,</span>
<span id="cb11-26">  <span class="st">"    var rowIndex = title ? index - 2 : index - 1;"</span>, </span>
<span id="cb11-27">  <span class="st">"    // Don't process row if it's the title row or the header row."</span>,</span>
<span id="cb11-28">  <span class="st">"    var i0 = title ? 1 : 0;"</span>,</span>
<span id="cb11-29">  <span class="st">"    if (index &gt; i0) {"</span>, </span>
<span id="cb11-30">  <span class="st">"      // Get row"</span>,</span>
<span id="cb11-31">  <span class="st">"      var row = $(this.outerHTML);"</span>,</span>
<span id="cb11-32">  <span class="st">"      // Set the Excel row attr to the current Excel row count."</span>,</span>
<span id="cb11-33">  <span class="st">"      row.attr('r', rowCount);"</span>,</span>
<span id="cb11-34">  <span class="st">"      // Iterate each cell in the row to change the row number."</span>,</span>
<span id="cb11-35">  <span class="st">"      row.children().each(function (index) {"</span>,</span>
<span id="cb11-36">  <span class="st">"        var cell = $(this);"</span>,</span>
<span id="cb11-37">  <span class="st">"        // Set each cell's row value."</span>,</span>
<span id="cb11-38">  <span class="st">"        var rc = cell.attr('r');"</span>,</span>
<span id="cb11-39">  <span class="st">"        rc = rc.replace(/</span><span class="ch">\\</span><span class="st">d+$/, </span><span class="ch">\"\"</span><span class="st">) + rowCount;"</span>,</span>
<span id="cb11-40">  <span class="st">"        cell.attr('r', rc);"</span>,</span>
<span id="cb11-41">  <span class="st">"      });"</span>,</span>
<span id="cb11-42">  <span class="st">"      // Get the row HTML and append to sheetData."</span>,</span>
<span id="cb11-43">  <span class="st">"      row = row[0].outerHTML;"</span>,</span>
<span id="cb11-44">  <span class="st">"      $('sheetData', sheet).append(row);"</span>,</span>
<span id="cb11-45">  <span class="st">"      rowCount++;"</span>,</span>
<span id="cb11-46">  <span class="st">"      // Get the child data - could be any data attached to the row."</span>,</span>
<span id="cb11-47">  <span class="st">"      var data = table.row(':eq(' + rowIndex + ')').data();"</span>,</span>
<span id="cb11-48">  <span class="st">"      var childData = data[ncols-1];"</span>, </span>
<span id="cb11-49">  <span class="st">"      if(childData.length &gt; 0){"</span>,</span>
<span id="cb11-50">  <span class="st">"        var colNames = Object.keys(childData[0]);"</span>,</span>
<span id="cb11-51">  <span class="st">"        // Prepare Excel formatted row"</span>,</span>
<span id="cb11-52">  <span class="st">"        var headerRow = '&lt;row r=</span><span class="ch">\"</span><span class="st">' + rowCount +"</span>,</span>
<span id="cb11-53">  <span class="st">"          '</span><span class="ch">\"</span><span class="st">&gt;&lt;c t=</span><span class="ch">\"</span><span class="st">inlineStr</span><span class="ch">\"</span><span class="st"> r=</span><span class="ch">\"</span><span class="st">A' + rowCount +"</span>,</span>
<span id="cb11-54">  <span class="st">"          '</span><span class="ch">\"</span><span class="st">&gt;&lt;is&gt;&lt;t&gt;&lt;/t&gt;&lt;/is&gt;&lt;/c&gt;';"</span>,</span>
<span id="cb11-55">  <span class="st">"        for(let i = 0; i &lt; colNames.length; i++){"</span>,</span>
<span id="cb11-56">  <span class="st">"          headerRow = headerRow +"</span>,</span>
<span id="cb11-57">  <span class="st">"            '&lt;c t=</span><span class="ch">\"</span><span class="st">inlineStr</span><span class="ch">\"</span><span class="st"> r=</span><span class="ch">\"</span><span class="st">' + XLcolumn(i+1) + rowCount +"</span>,</span>
<span id="cb11-58">  <span class="st">"            '</span><span class="ch">\"</span><span class="st"> s=</span><span class="ch">\"</span><span class="st">7</span><span class="ch">\"</span><span class="st">&gt;&lt;is&gt;&lt;t&gt;' + colNames[i] +"</span>, </span>
<span id="cb11-59">  <span class="st">"            '&lt;/t&gt;&lt;/is&gt;&lt;/c&gt;';"</span>,</span>
<span id="cb11-60">  <span class="st">"        }"</span>,</span>
<span id="cb11-61">  <span class="st">"        headerRow = headerRow + '&lt;/row&gt;';"</span>,</span>
<span id="cb11-62">  <span class="st">"        // Append header row to sheetData."</span>,</span>
<span id="cb11-63">  <span class="st">"        $('sheetData', sheet).append(headerRow);"</span>,</span>
<span id="cb11-64">  <span class="st">"        rowCount++; // Increment excel row counter."</span>,</span>
<span id="cb11-65">  <span class="st">"      }"</span>,</span>
<span id="cb11-66">  <span class="st">"      // The child data is an array of rows"</span>,</span>
<span id="cb11-67">  <span class="st">"      for(let c = 0; c &lt; childData.length; c++){"</span>,</span>
<span id="cb11-68">  <span class="st">"        // Get row data."</span>,</span>
<span id="cb11-69">  <span class="st">"        var child = childData[c];"</span>,</span>
<span id="cb11-70">  <span class="st">"        // Prepare Excel formatted row"</span>,</span>
<span id="cb11-71">  <span class="st">"        var childRow = '&lt;row r=</span><span class="ch">\"</span><span class="st">' + rowCount +"</span>,</span>
<span id="cb11-72">  <span class="st">"          '</span><span class="ch">\"</span><span class="st">&gt;&lt;c t=</span><span class="ch">\"</span><span class="st">inlineStr</span><span class="ch">\"</span><span class="st"> r=</span><span class="ch">\"</span><span class="st">A' + rowCount +"</span>,</span>
<span id="cb11-73">  <span class="st">"          '</span><span class="ch">\"</span><span class="st">&gt;&lt;is&gt;&lt;t&gt;&lt;/t&gt;&lt;/is&gt;&lt;/c&gt;';"</span>,</span>
<span id="cb11-74">  <span class="st">"        for(let i = 0; i &lt; colNames.length; i++){"</span>,</span>
<span id="cb11-75">  <span class="st">"          childRow = childRow +"</span>,</span>
<span id="cb11-76">  <span class="st">"            '&lt;c t=</span><span class="ch">\"</span><span class="st">inlineStr</span><span class="ch">\"</span><span class="st"> r=</span><span class="ch">\"</span><span class="st">' + XLcolumn(i+1) + rowCount +"</span>,</span>
<span id="cb11-77">  <span class="st">"            '</span><span class="ch">\"</span><span class="st"> s=</span><span class="ch">\"</span><span class="st">5</span><span class="ch">\"</span><span class="st">&gt;&lt;is&gt;&lt;t&gt;' + child[colNames[i]] +"</span>, </span>
<span id="cb11-78">  <span class="st">"            '&lt;/t&gt;&lt;/is&gt;&lt;/c&gt;';"</span>,</span>
<span id="cb11-79">  <span class="st">"        }"</span>,</span>
<span id="cb11-80">  <span class="st">"        childRow = childRow + '&lt;/row&gt;';"</span>,</span>
<span id="cb11-81">  <span class="st">"        // Append row to sheetData."</span>,</span>
<span id="cb11-82">  <span class="st">"        $('sheetData', sheet).append(childRow);"</span>,</span>
<span id="cb11-83">  <span class="st">"        rowCount++; // Increment excel row counter."</span>,</span>
<span id="cb11-84">  <span class="st">"      }"</span>,</span>
<span id="cb11-85">  <span class="st">"      // Just append the header row and increment excel row counter."</span>,</span>
<span id="cb11-86">  <span class="st">"    } else {"</span>,</span>
<span id="cb11-87">  <span class="st">"      $('sheetData', sheet).append(this.outerHTML);"</span>,</span>
<span id="cb11-88">  <span class="st">"      rowCount++;"</span>,</span>
<span id="cb11-89">  <span class="st">"    }"</span>,</span>
<span id="cb11-90">  <span class="st">"  });"</span>,</span>
<span id="cb11-91">  <span class="st">"}"</span></span>
<span id="cb11-92">)</span></code></pre>
      </div>
      <p>Let’s see an example.</p>
      <div class="sourceCode" id="cb12">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb12-1">dat0  =<span class="st"> </span>iris[<span class="dv">1</span><span class="op">:</span><span class="dv">3</span>,]         <span class="co"># main table, with three rows</span></span>
<span id="cb12-2">dat01 =<span class="st"> </span>airquality[<span class="dv">1</span><span class="op">:</span><span class="dv">4</span>,]   <span class="co"># |- child of first row</span></span>
<span id="cb12-3">dat02 =<span class="st"> </span>cars[<span class="dv">1</span><span class="op">:</span><span class="dv">2</span>,]         <span class="co"># |- child of second row</span></span>
<span id="cb12-4">dat03 =<span class="st"> </span>PlantGrowth[<span class="dv">1</span><span class="op">:</span><span class="dv">3</span>,]  <span class="co"># |- child of third row</span></span>
<span id="cb12-5">Dat &lt;-<span class="st"> </span><span class="kw">NestedData</span>(</span>
<span id="cb12-6">  <span class="dt">dat =</span> dat0, </span>
<span id="cb12-7">  <span class="dt">children =</span> <span class="kw">list</span>(dat01, dat02, dat03)</span>
<span id="cb12-8">)</span></code></pre>
      </div>
      <p>
        Below is the code generating the table with a button for the exporting.
        Remember, if you use Shiny, do not set <code>elementId</code>.
      </p>
      <div class="sourceCode" id="cb13">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb13-1">dtable &lt;-<span class="st"> </span><span class="kw">datatable</span>(</span>
<span id="cb13-2">  Dat, </span>
<span id="cb13-3">  <span class="dt">callback =</span> callback, <span class="dt">rownames =</span> rowNames, <span class="dt">escape =</span> <span class="op">-</span>colIdx<span class="dv">-1</span>,</span>
<span id="cb13-4">  <span class="dt">extensions =</span> <span class="st">"Buttons"</span>, <span class="dt">elementId =</span> <span class="st">"mytable"</span>,</span>
<span id="cb13-5">  <span class="dt">options =</span> <span class="kw">list</span>(</span>
<span id="cb13-6">    <span class="dt">paging =</span> <span class="ot">FALSE</span>,</span>
<span id="cb13-7">    <span class="dt">searching =</span> <span class="ot">FALSE</span>,</span>
<span id="cb13-8">    <span class="dt">dom =</span> <span class="st">"Bfrtip"</span>,</span>
<span id="cb13-9">    <span class="dt">columnDefs =</span> <span class="kw">list</span>(</span>
<span id="cb13-10">      <span class="kw">list</span>(</span>
<span id="cb13-11">        <span class="dt">visible =</span> <span class="ot">FALSE</span>, </span>
<span id="cb13-12">        <span class="dt">targets =</span> <span class="kw">ncol</span>(Dat)<span class="op">-</span><span class="dv">1</span><span class="op">+</span>colIdx</span>
<span id="cb13-13">      ),</span>
<span id="cb13-14">      <span class="kw">list</span>(</span>
<span id="cb13-15">        <span class="dt">orderable =</span> <span class="ot">FALSE</span>, </span>
<span id="cb13-16">        <span class="dt">className =</span> <span class="st">"details-control"</span>, </span>
<span id="cb13-17">        <span class="dt">targets =</span> colIdx</span>
<span id="cb13-18">      ),</span>
<span id="cb13-19">      <span class="kw">list</span>(</span>
<span id="cb13-20">        <span class="dt">className =</span> <span class="st">"dt-center"</span>, </span>
<span id="cb13-21">        <span class="dt">targets =</span> <span class="st">"_all"</span></span>
<span id="cb13-22">      )</span>
<span id="cb13-23">    ),</span>
<span id="cb13-24">    <span class="dt">buttons =</span> <span class="kw">list</span>(</span>
<span id="cb13-25">      <span class="kw">list</span>(</span>
<span id="cb13-26">        <span class="dt">extend =</span> <span class="st">"excel"</span>,</span>
<span id="cb13-27">        <span class="dt">exportOptions =</span> <span class="kw">list</span>(</span>
<span id="cb13-28">          <span class="dt">orthogonal =</span> <span class="st">"export"</span>, </span>
<span id="cb13-29">          <span class="dt">columns =</span> <span class="dv">0</span><span class="op">:</span>(<span class="kw">ncol</span>(Dat)<span class="op">-</span><span class="dv">2</span>)</span>
<span id="cb13-30">        ),</span>
<span id="cb13-31">        <span class="dt">title =</span> excelTitle,</span>
<span id="cb13-32">        <span class="dt">orientation =</span> <span class="st">"landscape"</span>,</span>
<span id="cb13-33">        <span class="dt">customize =</span> js_customXLSX</span>
<span id="cb13-34">      )</span>
<span id="cb13-35">    )</span>
<span id="cb13-36">  )</span>
<span id="cb13-37">)</span></code></pre>
      </div>
      <p>Here is the Excel file one gets:</p>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/DTchildRows3.png"
        />
      </p>
    </div>
  </div>
</div>
]]></description>
      <pubDate>Fri, 08 May 2020 00:00:00 UT</pubDate>
      <guid>https://laustep.github.io/stlahblog/posts/DT_childTables.html</guid>
      <dc:creator>Stéphane Laurent</dc:creator>
      <category>R</category>
    </item>
    <item>
      <title>Focal quadrics and their lines of curvature</title>
      <link>https://laustep.github.io/stlahblog/posts/focalQuadrics.html</link>
      <description><![CDATA[<div class="container-fluid">
  <div class="main col-sm-12">
    <div class="content">
      <p>
        This blog post provides some R code for drawing focal quadrics and their
        curvatures lines with the <code>rgl</code> package.
      </p>
      <h1 id="ellipsoid">Ellipsoid</h1>
      <p>
        The <code>ellipsoidMesh</code> function below generates a mesh of the
        ellipsoid of equation
        <span class="math display"
          >\[ \frac{x^2}{a^2} + \frac{y^2}{b^2} + \frac{z^2}{c^2} = 1. \]</span
        >
      </p>
      <div class="sourceCode" id="cb1">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb1-1"><span class="kw">library</span>(rgl)</span>
<span id="cb1-2">ellipsoidMesh &lt;-<span class="st"> </span><span class="cf">function</span>(a, b, c, <span class="dt">smoothness =</span> <span class="dv">5</span>){</span>
<span id="cb1-3">  <span class="kw">stopifnot</span>(a <span class="op">&gt;</span><span class="st"> </span><span class="dv">0</span>, b <span class="op">&gt;</span><span class="st"> </span><span class="dv">0</span>, c <span class="op">&gt;</span><span class="st"> </span><span class="dv">0</span>)</span>
<span id="cb1-4">  sphere &lt;-<span class="st"> </span><span class="kw">subdivision3d</span>(<span class="kw">icosahedron3d</span>(), <span class="dt">depth =</span> smoothness)</span>
<span id="cb1-5">  sphere<span class="op">$</span>vb[4L,] &lt;-<span class="st"> </span></span>
<span id="cb1-6"><span class="st">    </span><span class="kw">apply</span>(sphere<span class="op">$</span>vb[1L<span class="op">:</span>3L,], 2L, <span class="cf">function</span>(x) <span class="kw">sqrt</span>(<span class="kw">sum</span>(x<span class="op">*</span>x)))</span>
<span id="cb1-7">  sphere<span class="op">$</span>normals &lt;-<span class="st"> </span>sphere<span class="op">$</span>vb</span>
<span id="cb1-8">  <span class="kw">scale3d</span>(sphere, a, b, c)</span>
<span id="cb1-9">}</span></code></pre>
      </div>
      <p>
        The curvature lines of this ellipsoid are generated by the function
        <code>curvatureLinesE</code> given below. There are two families of
        curvature lines. The arguments <code>nu</code> and
        <code>nv</code> control the numbers of curvature lines in these two
        families. When the ellipsoid is tri-axial, <em>i.e.</em> when
        <span class="math inline">\(a\)</span>,
        <span class="math inline">\(b\)</span>,
        <span class="math inline">\(c\)</span> are distinct, the arguments
        <code>du</code> and <code>dv</code> must be positive and they control
        the size of the smallest curvature lines (if they were
        <span class="math inline">\(0\)</span>, the smallest curvature lines
        would degenerate to segments). When the ellipsoid is an ellipsoid of
        revolution, <em>i.e.</em> when two values of
        <span class="math inline">\(a\)</span>,
        <span class="math inline">\(b\)</span>,
        <span class="math inline">\(c\)</span> are equal, the curvature lines
        are the meridians and the parallels; in this case, <code>du</code> is
        ignored, and <code>dv</code>, which must be positive and strictly
        smaller than <span class="math inline">\(\frac{\pi}{2}\)</span>, control
        the size of the smallest parallel.
      </p>
      <div class="sourceCode" id="cb2">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb2-1">curvatureLinesE &lt;-<span class="st"> </span><span class="cf">function</span>(a, b, c, nu, nv, du, dv, <span class="dt">npoints =</span> <span class="dv">100</span>){</span>
<span id="cb2-2">  <span class="kw">stopifnot</span>(a <span class="op">&gt;</span><span class="st"> </span><span class="dv">0</span>, b <span class="op">&gt;</span><span class="st"> </span><span class="dv">0</span>, c <span class="op">&gt;</span><span class="st"> </span><span class="dv">0</span>)</span>
<span id="cb2-3">  <span class="cf">if</span>((a <span class="op">!=</span><span class="st"> </span>b <span class="op">&amp;&amp;</span><span class="st"> </span>b <span class="op">!=</span><span class="st"> </span>c) <span class="op">&amp;&amp;</span><span class="st"> </span>(a <span class="op">&lt;</span><span class="st"> </span>b <span class="op">||</span><span class="st"> </span>b <span class="op">&lt;</span><span class="st"> </span>c)){</span>
<span id="cb2-4">    perm &lt;-<span class="st"> </span><span class="kw">order</span>(<span class="kw">c</span>(a,b,c), <span class="dt">decreasing =</span> <span class="ot">TRUE</span>)</span>
<span id="cb2-5">    abc &lt;-<span class="st"> </span><span class="kw">c</span>(a,b,c)[perm]</span>
<span id="cb2-6">    clines &lt;-<span class="st"> </span></span>
<span id="cb2-7"><span class="st">      </span><span class="kw">curvatureLinesE</span>(abc[1L], abc[2L], abc[3L], nu, nv, du, dv, npoints)</span>
<span id="cb2-8">    <span class="kw">return</span>(<span class="kw">lapply</span>(clines, <span class="cf">function</span>(l) l[, perm]))</span>
<span id="cb2-9">  }</span>
<span id="cb2-10">  <span class="cf">if</span>(a <span class="op">!=</span><span class="st"> </span>b <span class="op">&amp;&amp;</span><span class="st"> </span>b <span class="op">!=</span><span class="st"> </span>c){</span>
<span id="cb2-11">    <span class="kw">stopifnot</span>(du <span class="op">&gt;</span><span class="st"> </span><span class="dv">0</span>, dv <span class="op">&gt;</span><span class="st"> </span><span class="dv">0</span>)</span>
<span id="cb2-12">    a2 &lt;-<span class="st"> </span>a<span class="op">^</span><span class="dv">2</span>; b2 &lt;-<span class="st"> </span>b<span class="op">^</span><span class="dv">2</span>; c2 &lt;-<span class="st"> </span>c<span class="op">^</span><span class="dv">2</span></span>
<span id="cb2-13">    h2ab &lt;-<span class="st"> </span>a2 <span class="op">-</span><span class="st"> </span>b2; h2ac &lt;-<span class="st"> </span>a2 <span class="op">-</span><span class="st"> </span>c2; h2bc &lt;-<span class="st"> </span>b2 <span class="op">-</span><span class="st"> </span>c2</span>
<span id="cb2-14">    <span class="cf">if</span>(du <span class="op">&gt;=</span><span class="st"> </span>h2ab) <span class="kw">stop</span>(<span class="st">"`du` is too large."</span>)</span>
<span id="cb2-15">    <span class="cf">if</span>(dv <span class="op">&gt;=</span><span class="st"> </span>h2bc) <span class="kw">stop</span>(<span class="st">"`dv` is too large."</span>)</span>
<span id="cb2-16">    out &lt;-<span class="st"> </span><span class="kw">vector</span>(<span class="st">"list"</span>, <span class="dv">2</span><span class="op">*</span>nv<span class="dv">-1</span> <span class="op">+</span><span class="st"> </span><span class="dv">2</span><span class="op">*</span>nu<span class="dv">-1</span>)</span>
<span id="cb2-17">    u_ &lt;-<span class="st"> </span><span class="kw">seq</span>(b2<span class="op">+</span>du, a2, <span class="dt">length.out =</span> nu)</span>
<span id="cb2-18">    s_ &lt;-<span class="st"> </span><span class="kw">seq</span>(b2, a2, <span class="dt">length.out =</span> npoints)</span>
<span id="cb2-19">    v_ &lt;-<span class="st"> </span><span class="kw">seq</span>(c2, b2<span class="op">-</span>dv, <span class="dt">length.out =</span> nv) </span>
<span id="cb2-20">    t_ &lt;-<span class="st"> </span><span class="kw">seq</span>(c2, b2, <span class="dt">length.out =</span> npoints)</span>
<span id="cb2-21">    mx &lt;-<span class="st"> </span>a <span class="op">/</span><span class="st"> </span><span class="kw">sqrt</span>(h2ac<span class="op">*</span>h2ab)</span>
<span id="cb2-22">    my &lt;-<span class="st"> </span>b <span class="op">/</span><span class="st"> </span><span class="kw">sqrt</span>(h2bc<span class="op">*</span>h2ab)</span>
<span id="cb2-23">    mz &lt;-<span class="st"> </span>c <span class="op">/</span><span class="st"> </span><span class="kw">sqrt</span>(h2bc<span class="op">*</span>h2ac)</span>
<span id="cb2-24">    <span class="cf">for</span>(j <span class="cf">in</span> 1L<span class="op">:</span>nv){</span>
<span id="cb2-25">      x &lt;-<span class="st"> </span>mx <span class="op">*</span><span class="st"> </span><span class="kw">sqrt</span>((a2<span class="op">-</span>s_)<span class="op">*</span>(a2<span class="op">-</span>v_[j]))</span>
<span id="cb2-26">      y &lt;-<span class="st"> </span>my <span class="op">*</span><span class="st"> </span><span class="kw">sqrt</span>((s_<span class="op">-</span>b2)<span class="op">*</span>(b2<span class="op">-</span>v_[j]))</span>
<span id="cb2-27">      z &lt;-<span class="st"> </span>mz <span class="op">*</span><span class="st"> </span><span class="kw">sqrt</span>((s_<span class="op">-</span>c2)<span class="op">*</span>(v_[j]<span class="op">-</span>c2))</span>
<span id="cb2-28">      M &lt;-<span class="st"> </span><span class="kw">rbind</span>(<span class="kw">cbind</span>(x, y, z), <span class="kw">cbind</span>(<span class="op">-</span>x, y, z)[(npoints<span class="dv">-1</span>)<span class="op">:</span>1L,])</span>
<span id="cb2-29">      M &lt;-<span class="st"> </span><span class="kw">rbind</span>(M, <span class="kw">cbind</span>(M[,1L], <span class="op">-</span>M[,2L], M[,3L])[(<span class="dv">2</span><span class="op">*</span>npoints<span class="dv">-2</span>)<span class="op">:</span>1L,])</span>
<span id="cb2-30">      out[[j]] &lt;-<span class="st"> </span>M</span>
<span id="cb2-31">      <span class="cf">if</span>(j <span class="op">&gt;</span><span class="st"> </span>1L){</span>
<span id="cb2-32">        out[[nv<span class="op">+</span>j<span class="dv">-1</span>]] &lt;-<span class="st"> </span><span class="kw">cbind</span>(M[,<span class="kw">c</span>(1L,2L)], <span class="op">-</span>M[,3L])</span>
<span id="cb2-33">      }</span>
<span id="cb2-34">    }</span>
<span id="cb2-35">    <span class="cf">for</span>(i <span class="cf">in</span> 1L<span class="op">:</span>nu){</span>
<span id="cb2-36">      x &lt;-<span class="st"> </span>mx <span class="op">*</span><span class="st"> </span><span class="kw">sqrt</span>((a2<span class="op">-</span>u_[i])<span class="op">*</span>(a2<span class="op">-</span>t_))</span>
<span id="cb2-37">      y &lt;-<span class="st"> </span>my <span class="op">*</span><span class="st"> </span><span class="kw">sqrt</span>((u_[i]<span class="op">-</span>b2)<span class="op">*</span>(b2<span class="op">-</span>t_))</span>
<span id="cb2-38">      z &lt;-<span class="st"> </span>mz <span class="op">*</span><span class="st"> </span><span class="kw">sqrt</span>((u_[i]<span class="op">-</span>c2)<span class="op">*</span>(t_<span class="op">-</span>c2))</span>
<span id="cb2-39">      M &lt;-<span class="st"> </span><span class="kw">rbind</span>(<span class="kw">cbind</span>(x, y, z), <span class="kw">cbind</span>(x, <span class="op">-</span>y, z)[(npoints<span class="dv">-1</span>)<span class="op">:</span>1L,])</span>
<span id="cb2-40">      M &lt;-<span class="st"> </span><span class="kw">rbind</span>(M, <span class="kw">cbind</span>(M[,<span class="kw">c</span>(1L,2L)], <span class="op">-</span>M[,3L])[(<span class="dv">2</span><span class="op">*</span>npoints<span class="dv">-2</span>)<span class="op">:</span>1L,])</span>
<span id="cb2-41">      out[[<span class="dv">2</span><span class="op">*</span>nv<span class="dv">-1</span><span class="op">+</span>i]] &lt;-<span class="st"> </span>M</span>
<span id="cb2-42">      <span class="cf">if</span>(i <span class="op">&lt;</span><span class="st"> </span>nu){</span>
<span id="cb2-43">        out[[<span class="dv">2</span><span class="op">*</span>nv<span class="dv">-1</span><span class="op">+</span>nu<span class="op">+</span>i]] &lt;-<span class="st"> </span><span class="kw">cbind</span>(<span class="op">-</span>M[,1L], M[,<span class="kw">c</span>(2L,3L)])</span>
<span id="cb2-44">      }</span>
<span id="cb2-45">    }</span>
<span id="cb2-46">  }<span class="cf">else</span>{ <span class="co"># a == b || b == c </span></span>
<span id="cb2-47">    <span class="co"># surface of revolution =&gt; curvature lines are meridians and parallels</span></span>
<span id="cb2-48">    <span class="kw">stopifnot</span>(dv <span class="op">&gt;</span><span class="st"> </span><span class="dv">0</span>, dv <span class="op">&lt;</span><span class="st"> </span>pi<span class="op">/</span><span class="dv">2</span>)</span>
<span id="cb2-49">    out &lt;-<span class="st"> </span><span class="kw">vector</span>(<span class="st">"list"</span>, nu <span class="op">+</span><span class="st"> </span>nv)</span>
<span id="cb2-50">    u_ &lt;-<span class="st"> </span><span class="kw">seq</span>(<span class="dv">0</span>, <span class="dv">2</span><span class="op">*</span>pi, <span class="dt">length.out =</span> nu<span class="op">+</span><span class="dv">1</span>)[<span class="op">-</span>1L]</span>
<span id="cb2-51">    s_ &lt;-<span class="st"> </span><span class="kw">seq</span>(<span class="dv">0</span>, <span class="dv">2</span><span class="op">*</span>pi, <span class="dt">length.out =</span> npoints)</span>
<span id="cb2-52">    v_ &lt;-<span class="st"> </span><span class="kw">seq</span>(<span class="op">-</span>pi<span class="op">/</span><span class="dv">2</span><span class="op">+</span>dv, pi<span class="op">/</span><span class="dv">2</span><span class="op">-</span>dv, <span class="dt">length.out =</span> nv) </span>
<span id="cb2-53">    t_ &lt;-<span class="st"> </span><span class="kw">seq</span>(<span class="op">-</span>pi, pi, <span class="dt">length.out =</span> npoints)</span>
<span id="cb2-54">    coss_ &lt;-<span class="st"> </span><span class="kw">cos</span>(s_); sins_ &lt;-<span class="st"> </span><span class="kw">sin</span>(s_)</span>
<span id="cb2-55">    cost_ &lt;-<span class="st"> </span><span class="kw">cos</span>(t_); sint_ &lt;-<span class="st"> </span><span class="kw">sin</span>(t_)</span>
<span id="cb2-56">    <span class="cf">for</span>(j <span class="cf">in</span> 1L<span class="op">:</span>nv){</span>
<span id="cb2-57">      x &lt;-<span class="st"> </span>a <span class="op">*</span><span class="st"> </span>coss_ <span class="op">*</span><span class="st"> </span><span class="kw">cos</span>(v_[j])</span>
<span id="cb2-58">      y &lt;-<span class="st"> </span>b <span class="op">*</span><span class="st"> </span>sins_ <span class="op">*</span><span class="st"> </span><span class="kw">cos</span>(v_[j])</span>
<span id="cb2-59">      z &lt;-<span class="st"> </span>c <span class="op">*</span><span class="st"> </span><span class="kw">sin</span>(v_[j])</span>
<span id="cb2-60">      out[[j]] &lt;-<span class="st"> </span><span class="kw">cbind</span>(x, y, z)</span>
<span id="cb2-61">    }</span>
<span id="cb2-62">    <span class="cf">for</span>(i <span class="cf">in</span> 1L<span class="op">:</span>nu){</span>
<span id="cb2-63">      x &lt;-<span class="st"> </span>a <span class="op">*</span><span class="st"> </span><span class="kw">cos</span>(u_[i]) <span class="op">*</span><span class="st"> </span>cost_</span>
<span id="cb2-64">      y &lt;-<span class="st"> </span>b <span class="op">*</span><span class="st"> </span><span class="kw">sin</span>(u_[i]) <span class="op">*</span><span class="st"> </span>cost_</span>
<span id="cb2-65">      z &lt;-<span class="st"> </span>c <span class="op">*</span><span class="st"> </span>sint_</span>
<span id="cb2-66">      out[[nv<span class="op">+</span>i]] &lt;-<span class="st"> </span><span class="kw">cbind</span>(x, y, z)</span>
<span id="cb2-67">    }</span>
<span id="cb2-68">  }</span>
<span id="cb2-69">  out</span>
<span id="cb2-70">}</span></code></pre>
      </div>
      <p>Here is an example:</p>
      <div class="sourceCode" id="cb3">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb3-1">a =<span class="st"> </span><span class="dv">7</span>; b =<span class="st"> </span><span class="dv">5</span>; c =<span class="st"> </span><span class="dv">3</span></span>
<span id="cb3-2">mesh &lt;-<span class="st"> </span><span class="kw">ellipsoidMesh</span>(a, b, c)</span>
<span id="cb3-3">clines &lt;-<span class="st"> </span><span class="kw">curvatureLinesE</span>(a, b, c, <span class="dt">nu =</span> <span class="dv">5</span>, <span class="dt">nv =</span> <span class="dv">5</span>, <span class="dt">du =</span> <span class="fl">0.4</span>, <span class="dt">dv =</span> <span class="dv">1</span>, </span>
<span id="cb3-4">                          <span class="dt">npoints =</span> <span class="dv">300</span>)</span>
<span id="cb3-5"><span class="kw">shade3d</span>(mesh, <span class="dt">col =</span> <span class="st">"springgreen"</span>)</span>
<span id="cb3-6"><span class="kw">invisible</span>(<span class="kw">lapply</span>(clines, <span class="cf">function</span>(l){</span>
<span id="cb3-7">  <span class="kw">shade3d</span>(<span class="kw">cylinder3d</span>(l, <span class="dt">radius =</span> <span class="fl">0.08</span>, <span class="dt">sides =</span> <span class="dv">30</span>))</span>
<span id="cb3-8">}))</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/quadrics_E.png"
        />
      </p>
      <h1 id="one-sheeted-hyperboloid">One-sheeted hyperboloid</h1>
      <p>
        There are three types of one-sheeted hyperboloids, corresponding to
        these equations:
        <span class="math display"
          >\[ \frac{x^2}{a^2} + \frac{y^2}{b^2} - \frac{z^2}{c^2} = 1 \\
          \frac{x^2}{a^2} - \frac{y^2}{b^2} + \frac{z^2}{c^2} = 1 \\
          -\frac{x^2}{a^2} + \frac{y^2}{b^2} + \frac{z^2}{c^2} = 1. \]</span
        >
        The <code>hyperboloidMesh</code> function below generates a mesh of the
        one-sheeted hyperboloid; the <code>signature</code> argument corresponds
        to one of the above equations, it must be <code>"++-"</code>,
        <code>"+-+"</code> or <code>"-++"</code>. The mesh is made of
        quadrilaterals and their number is controlled by the arguments
        <code>nu</code> and <code>nv</code>. The hyperboloid is infinite along
        the direction corresponding to the minus sign, and the argument
        <code>vmin</code> controls the truncation of the hyperboloid in this
        direction.
      </p>
      <div class="sourceCode" id="cb4">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb4-1">hyperboloidMesh &lt;-<span class="st"> </span><span class="cf">function</span>(a, b, c, signature, nu, nv, vmin){</span>
<span id="cb4-2">  <span class="kw">stopifnot</span>(signature <span class="op">%in%</span><span class="st"> </span><span class="kw">c</span>(<span class="st">"++-"</span>, <span class="st">"+-+"</span>, <span class="st">"-++"</span>))</span>
<span id="cb4-3">  <span class="kw">stopifnot</span>(vmin <span class="op">&lt;</span><span class="st"> </span><span class="dv">1</span>, a <span class="op">&gt;</span><span class="st"> </span><span class="dv">0</span>, b <span class="op">&gt;</span><span class="st"> </span><span class="dv">0</span>, c <span class="op">&gt;</span><span class="st"> </span><span class="dv">0</span>)</span>
<span id="cb4-4">  <span class="cf">if</span>(signature <span class="op">==</span><span class="st"> "+-+"</span>){</span>
<span id="cb4-5">    mesh &lt;-<span class="st"> </span><span class="kw">hyperboloidMesh</span>(a, c, b, <span class="st">"++-"</span>, nu, nv, vmin)</span>
<span id="cb4-6">    mesh<span class="op">$</span>vb &lt;-<span class="st"> </span>mesh<span class="op">$</span>vb[<span class="kw">c</span>(1L,3L,2L,4L),]</span>
<span id="cb4-7">    mesh<span class="op">$</span>normals &lt;-<span class="st"> </span>mesh<span class="op">$</span>normals[<span class="kw">c</span>(1L,3L,2L),]</span>
<span id="cb4-8">    mesh<span class="op">$</span>ib &lt;-<span class="st"> </span>mesh<span class="op">$</span>ib[4L<span class="op">:</span>1L,]</span>
<span id="cb4-9">    <span class="kw">return</span>(mesh)</span>
<span id="cb4-10">  }<span class="cf">else</span> <span class="cf">if</span>(signature <span class="op">==</span><span class="st"> "-++"</span>){</span>
<span id="cb4-11">    mesh &lt;-<span class="st"> </span><span class="kw">hyperboloidMesh</span>(c, b, a, <span class="st">"++-"</span>, nu, nv, vmin)</span>
<span id="cb4-12">    mesh<span class="op">$</span>vb &lt;-<span class="st"> </span>mesh<span class="op">$</span>vb[<span class="kw">c</span>(3L,2L,1L,4L),]</span>
<span id="cb4-13">    mesh<span class="op">$</span>normals &lt;-<span class="st"> </span>mesh<span class="op">$</span>normals[<span class="kw">c</span>(3L,2L,1L),]</span>
<span id="cb4-14">    mesh<span class="op">$</span>ib &lt;-<span class="st"> </span>mesh<span class="op">$</span>ib[4L<span class="op">:</span>1L,]</span>
<span id="cb4-15">    <span class="kw">return</span>(mesh)</span>
<span id="cb4-16">  }</span>
<span id="cb4-17">  c0 &lt;-<span class="st"> </span>c</span>
<span id="cb4-18">  <span class="cf">if</span>(b <span class="op">&gt;</span><span class="st"> </span>a){</span>
<span id="cb4-19">    exchange &lt;-<span class="st"> </span><span class="ot">TRUE</span></span>
<span id="cb4-20">    a0 &lt;-<span class="st"> </span>b; b0 &lt;-<span class="st"> </span>a</span>
<span id="cb4-21">  }<span class="cf">else</span>{</span>
<span id="cb4-22">    exchange &lt;-<span class="st"> </span><span class="ot">FALSE</span></span>
<span id="cb4-23">    a0 &lt;-<span class="st"> </span>a; b0 &lt;-<span class="st"> </span>b</span>
<span id="cb4-24">  }</span>
<span id="cb4-25">  Mu2 &lt;-<span class="st"> </span>a0<span class="op">^</span><span class="dv">2</span></span>
<span id="cb4-26">  h2ab &lt;-<span class="st"> </span>Mu2 <span class="op">-</span><span class="st"> </span>b0<span class="op">^</span><span class="dv">2</span>; h2ac &lt;-<span class="st"> </span>c0<span class="op">^</span><span class="dv">2</span> <span class="op">+</span><span class="st"> </span>Mu2</span>
<span id="cb4-27">  c2 &lt;-<span class="st"> </span><span class="dv">1</span>; a2 &lt;-<span class="st"> </span>c2 <span class="op">+</span><span class="st"> </span>h2ac; b2 &lt;-<span class="st"> </span>a2 <span class="op">-</span><span class="st"> </span>h2ab</span>
<span id="cb4-28">  h2bc &lt;-<span class="st"> </span>b2 <span class="op">-</span><span class="st"> </span>c2</span>
<span id="cb4-29">  <span class="co">#</span></span>
<span id="cb4-30">  vertices &lt;-<span class="st"> </span>Normals &lt;-<span class="st"> </span><span class="kw">matrix</span>(<span class="ot">NA_real_</span>, <span class="dt">nrow =</span> 3L, <span class="dt">ncol =</span> nu<span class="op">*</span>nv)</span>
<span id="cb4-31">  indices &lt;-<span class="st"> </span><span class="kw">matrix</span>(<span class="ot">NA_integer_</span>, <span class="dt">nrow =</span> 4L, <span class="dt">ncol =</span> (nu<span class="dv">-1</span>)<span class="op">*</span>(nv<span class="dv">-1</span>))</span>
<span id="cb4-32">  v_ &lt;-<span class="st"> </span><span class="kw">seq</span>(vmin, c2, <span class="dt">length.out =</span> nv)</span>
<span id="cb4-33">  <span class="co">#</span></span>
<span id="cb4-34">  <span class="cf">if</span>(a0 <span class="op">!=</span><span class="st"> </span>b0){</span>
<span id="cb4-35">    u_ &lt;-<span class="st"> </span><span class="kw">seq</span>(b2, a2, <span class="dt">length.out =</span> nu)</span>
<span id="cb4-36">    x &lt;-<span class="st"> </span>a0 <span class="op">/</span><span class="st"> </span><span class="kw">sqrt</span>(h2ac<span class="op">*</span>h2ab) <span class="op">*</span><span class="st"> </span><span class="kw">sqrt</span>(a2<span class="op">-</span>u_)</span>
<span id="cb4-37">    y &lt;-<span class="st"> </span>b0 <span class="op">/</span><span class="st"> </span><span class="kw">sqrt</span>(h2bc<span class="op">*</span>h2ab) <span class="op">*</span><span class="st"> </span><span class="kw">sqrt</span>(u_<span class="op">-</span>b2)</span>
<span id="cb4-38">    z &lt;-<span class="st"> </span>c0 <span class="op">/</span><span class="st"> </span><span class="kw">sqrt</span>(h2bc<span class="op">*</span>h2ac) <span class="op">*</span><span class="st"> </span><span class="kw">sqrt</span>(u_<span class="op">-</span>c2)</span>
<span id="cb4-39">  }<span class="cf">else</span>{</span>
<span id="cb4-40">    u_ &lt;-<span class="st"> </span><span class="kw">seq</span>(<span class="dv">0</span>, <span class="dv">2</span><span class="op">*</span>pi, <span class="dt">length.out =</span> nu<span class="op">+</span><span class="dv">1</span>)[<span class="op">-</span>1L]</span>
<span id="cb4-41">    z &lt;-<span class="st"> </span><span class="kw">rep</span>(c0<span class="op">/</span><span class="kw">sqrt</span>(h2ac), nu)</span>
<span id="cb4-42">    mxy &lt;-<span class="st"> </span>a0 <span class="op">/</span><span class="st"> </span><span class="kw">sqrt</span>(h2ac)</span>
<span id="cb4-43">    x &lt;-<span class="st"> </span>mxy <span class="op">*</span><span class="st"> </span><span class="kw">cos</span>(u_)</span>
<span id="cb4-44">    y &lt;-<span class="st"> </span>mxy <span class="op">*</span><span class="st"> </span><span class="kw">sin</span>(u_)</span>
<span id="cb4-45">  }</span>
<span id="cb4-46">  <span class="cf">for</span>(i <span class="cf">in</span> <span class="dv">1</span><span class="op">:</span>nu){</span>
<span id="cb4-47">    <span class="cf">for</span>(j <span class="cf">in</span> <span class="dv">1</span><span class="op">:</span>nv){</span>
<span id="cb4-48">      P &lt;-<span class="st"> </span>vertices[, (i<span class="dv">-1</span>)<span class="op">*</span>nv<span class="op">+</span>j] &lt;-<span class="st"> </span><span class="kw">c</span>(</span>
<span id="cb4-49">        x[i] <span class="op">*</span><span class="st"> </span><span class="kw">sqrt</span>(a2<span class="op">-</span>v_[j]),</span>
<span id="cb4-50">        y[i] <span class="op">*</span><span class="st"> </span><span class="kw">sqrt</span>(b2<span class="op">-</span>v_[j]),</span>
<span id="cb4-51">        z[i] <span class="op">*</span><span class="st"> </span><span class="kw">sqrt</span>(c2<span class="op">-</span>v_[j])</span>
<span id="cb4-52">      )</span>
<span id="cb4-53">      Normals[, (i<span class="dv">-1</span>)<span class="op">*</span>nv<span class="op">+</span>j] &lt;-<span class="st"> </span><span class="kw">c</span>(P[1L]<span class="op">/</span>a0<span class="op">^</span><span class="dv">2</span>, P[2L]<span class="op">/</span>b0<span class="op">^</span><span class="dv">2</span>, <span class="op">-</span>P[3L]<span class="op">/</span>c0<span class="op">^</span><span class="dv">2</span>)</span>
<span id="cb4-54">    }</span>
<span id="cb4-55">  }</span>
<span id="cb4-56">  <span class="co"># quads</span></span>
<span id="cb4-57">  <span class="cf">for</span>(i <span class="cf">in</span> 1L<span class="op">:</span>(nu<span class="dv">-1</span>)){</span>
<span id="cb4-58">    im1 &lt;-<span class="st"> </span>i<span class="op">-</span>1L</span>
<span id="cb4-59">    <span class="cf">for</span>(j <span class="cf">in</span> 1L<span class="op">:</span>(nv<span class="dv">-1</span>)){</span>
<span id="cb4-60">      jp1 &lt;-<span class="st"> </span>j<span class="op">+</span>1L</span>
<span id="cb4-61">      quad &lt;-<span class="st"> </span><span class="kw">c</span>(im1<span class="op">*</span>nv<span class="op">+</span>j, im1<span class="op">*</span>nv<span class="op">+</span>jp1, i<span class="op">*</span>nv<span class="op">+</span>jp1, i<span class="op">*</span>nv<span class="op">+</span>j)</span>
<span id="cb4-62">      indices[, im1<span class="op">*</span>(nv<span class="dv">-1</span>)<span class="op">+</span>j] &lt;-<span class="st"> </span><span class="cf">if</span>(exchange) <span class="kw">rev</span>(quad) <span class="cf">else</span> quad</span>
<span id="cb4-63">    }</span>
<span id="cb4-64">  }</span>
<span id="cb4-65">  vertices &lt;-<span class="st"> </span><span class="kw">cbind</span>(vertices, <span class="kw">c</span>(<span class="op">-</span><span class="dv">1</span>,<span class="dv">1</span>,<span class="dv">1</span>) <span class="op">*</span><span class="st"> </span>vertices)</span>
<span id="cb4-66">  indices &lt;-<span class="st"> </span><span class="kw">cbind</span>(indices, indices[4L<span class="op">:</span>1L,] <span class="op">+</span><span class="st"> </span>nu<span class="op">*</span>nv)</span>
<span id="cb4-67">  Normals &lt;-<span class="st"> </span><span class="kw">cbind</span>(Normals, <span class="kw">c</span>(<span class="op">-</span><span class="dv">1</span>,<span class="dv">1</span>,<span class="dv">1</span>) <span class="op">*</span><span class="st"> </span>Normals)</span>
<span id="cb4-68">  vertices &lt;-<span class="st"> </span><span class="kw">cbind</span>(vertices, <span class="kw">c</span>(<span class="dv">1</span>,<span class="op">-</span><span class="dv">1</span>,<span class="dv">1</span>) <span class="op">*</span><span class="st"> </span>vertices)</span>
<span id="cb4-69">  indices &lt;-<span class="st"> </span><span class="kw">cbind</span>(indices, indices[4L<span class="op">:</span>1L,] <span class="op">+</span><span class="st"> </span><span class="dv">2</span><span class="op">*</span>nu<span class="op">*</span>nv)</span>
<span id="cb4-70">  Normals &lt;-<span class="st"> </span><span class="kw">cbind</span>(Normals, <span class="kw">c</span>(<span class="dv">1</span>,<span class="op">-</span><span class="dv">1</span>,<span class="dv">1</span>) <span class="op">*</span><span class="st"> </span>Normals)</span>
<span id="cb4-71">  vertices &lt;-<span class="st"> </span><span class="kw">cbind</span>(vertices, <span class="kw">c</span>(<span class="dv">1</span>,<span class="dv">1</span>,<span class="op">-</span><span class="dv">1</span>) <span class="op">*</span><span class="st"> </span>vertices)</span>
<span id="cb4-72">  indices &lt;-<span class="st"> </span><span class="kw">cbind</span>(indices, indices[4L<span class="op">:</span>1L,] <span class="op">+</span><span class="st"> </span><span class="dv">4</span><span class="op">*</span>nu<span class="op">*</span>nv)</span>
<span id="cb4-73">  Normals &lt;-<span class="st"> </span><span class="kw">cbind</span>(Normals, <span class="kw">c</span>(<span class="dv">1</span>,<span class="dv">1</span>,<span class="op">-</span><span class="dv">1</span>) <span class="op">*</span><span class="st"> </span>Normals)</span>
<span id="cb4-74">  mesh &lt;-<span class="st"> </span><span class="kw">qmesh3d</span>(</span>
<span id="cb4-75">    <span class="dt">vertices =</span> <span class="cf">if</span>(exchange) vertices[<span class="kw">c</span>(2L,1L,3L),] <span class="cf">else</span> vertices,</span>
<span id="cb4-76">    <span class="dt">indices =</span> indices,</span>
<span id="cb4-77">    <span class="dt">homogeneous =</span> <span class="ot">FALSE</span>,</span>
<span id="cb4-78">    <span class="dt">normals =</span> <span class="kw">t</span>(<span class="cf">if</span>(exchange) Normals[<span class="kw">c</span>(2L,1L,3L),] <span class="cf">else</span> Normals)</span>
<span id="cb4-79">  )</span>
<span id="cb4-80">  mesh</span>
<span id="cb4-81">}</span></code></pre>
      </div>
      <p>
        The <code>curvatureLinesH1</code> function below generates some
        curvature lines of the one-sheeted hyperboloid. There are two families
        of curvature lines and the desired numbers of lines in them are
        controlled by the arguments <code>nu</code> and <code>nv</code>.
      </p>
      <div class="sourceCode" id="cb5">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb5-1">curvatureLinesH1 &lt;-<span class="st"> </span><span class="cf">function</span>(a, b, c, <span class="dt">signature =</span> <span class="st">"++-"</span>, nu, nv, vmin,  </span>
<span id="cb5-2">                             <span class="dt">npoints =</span> <span class="dv">100</span>){</span>
<span id="cb5-3">  <span class="kw">stopifnot</span>(signature <span class="op">%in%</span><span class="st"> </span><span class="kw">c</span>(<span class="st">"++-"</span>, <span class="st">"+-+"</span>, <span class="st">"-++"</span>))</span>
<span id="cb5-4">  <span class="kw">stopifnot</span>(vmin <span class="op">&lt;</span><span class="st"> </span><span class="dv">1</span>, a <span class="op">&gt;</span><span class="st"> </span><span class="dv">0</span>, b <span class="op">&gt;</span><span class="st"> </span><span class="dv">0</span>, c <span class="op">&gt;</span><span class="st"> </span><span class="dv">0</span>)</span>
<span id="cb5-5">  <span class="cf">if</span>(signature <span class="op">==</span><span class="st"> "+-+"</span>){</span>
<span id="cb5-6">    clines &lt;-<span class="st"> </span><span class="kw">curvatureLinesH1</span>(a, c, b, <span class="st">"++-"</span>, nu, nv, vmin, npoints)</span>
<span id="cb5-7">    <span class="kw">return</span>(<span class="kw">lapply</span>(clines, <span class="cf">function</span>(l) l[,<span class="kw">c</span>(1L,3L,2L)]))</span>
<span id="cb5-8">  }<span class="cf">else</span> <span class="cf">if</span>(signature <span class="op">==</span><span class="st"> "-++"</span>){</span>
<span id="cb5-9">    clines &lt;-<span class="st"> </span><span class="kw">curvatureLinesH1</span>(c, b, a, <span class="st">"++-"</span>, nu, nv, vmin, npoints)</span>
<span id="cb5-10">    <span class="kw">return</span>(<span class="kw">lapply</span>(clines, <span class="cf">function</span>(l) l[,<span class="kw">c</span>(3L,2L,1L)]))</span>
<span id="cb5-11">  }</span>
<span id="cb5-12">  c0 &lt;-<span class="st"> </span>c</span>
<span id="cb5-13">  <span class="cf">if</span>(b <span class="op">&gt;</span><span class="st"> </span>a){</span>
<span id="cb5-14">    exchange &lt;-<span class="st"> </span><span class="ot">TRUE</span></span>
<span id="cb5-15">    a0 &lt;-<span class="st"> </span>b; b0 &lt;-<span class="st"> </span>a</span>
<span id="cb5-16">  }<span class="cf">else</span>{</span>
<span id="cb5-17">    exchange &lt;-<span class="st"> </span><span class="ot">FALSE</span></span>
<span id="cb5-18">    a0 &lt;-<span class="st"> </span>a; b0 &lt;-<span class="st"> </span>b</span>
<span id="cb5-19">  }</span>
<span id="cb5-20">  Mu2 &lt;-<span class="st"> </span>a0<span class="op">^</span><span class="dv">2</span></span>
<span id="cb5-21">  h2ab &lt;-<span class="st"> </span>Mu2 <span class="op">-</span><span class="st"> </span>b0<span class="op">^</span><span class="dv">2</span>; h2ac &lt;-<span class="st"> </span>c0<span class="op">^</span><span class="dv">2</span> <span class="op">+</span><span class="st"> </span>Mu2</span>
<span id="cb5-22">  c2 &lt;-<span class="st"> </span><span class="dv">1</span>; a2 &lt;-<span class="st"> </span>c2 <span class="op">+</span><span class="st"> </span>h2ac; b2 &lt;-<span class="st"> </span>a2 <span class="op">-</span><span class="st"> </span>h2ab</span>
<span id="cb5-23">  h2bc &lt;-<span class="st"> </span>b2 <span class="op">-</span><span class="st"> </span>c2</span>
<span id="cb5-24">  <span class="co">#  </span></span>
<span id="cb5-25">  v_ &lt;-<span class="st"> </span><span class="kw">seq</span>(vmin, c2, <span class="dt">length.out =</span> nv)</span>
<span id="cb5-26">  t_ &lt;-<span class="st"> </span><span class="kw">seq</span>(vmin, c2, <span class="dt">length.out =</span> npoints)</span>
<span id="cb5-27">  <span class="co">#</span></span>
<span id="cb5-28">  <span class="cf">if</span>(a0 <span class="op">!=</span><span class="st"> </span>b0){</span>
<span id="cb5-29">    u_ &lt;-<span class="st"> </span><span class="kw">seq</span>(b2, a2, <span class="dt">length.out =</span> nu)</span>
<span id="cb5-30">    s_ &lt;-<span class="st"> </span><span class="kw">seq</span>(b2, a2, <span class="dt">length.out =</span> npoints)</span>
<span id="cb5-31">    mx &lt;-<span class="st"> </span>a0 <span class="op">/</span><span class="st"> </span><span class="kw">sqrt</span>(h2ac<span class="op">*</span>h2ab)</span>
<span id="cb5-32">    my &lt;-<span class="st"> </span>b0 <span class="op">/</span><span class="st"> </span><span class="kw">sqrt</span>(h2bc<span class="op">*</span>h2ab)</span>
<span id="cb5-33">    mz &lt;-<span class="st"> </span>c0 <span class="op">/</span><span class="st"> </span><span class="kw">sqrt</span>(h2bc<span class="op">*</span>h2ac)</span>
<span id="cb5-34">    out &lt;-<span class="st"> </span><span class="kw">vector</span>(<span class="st">"list"</span>, <span class="dv">2</span><span class="op">*</span>nv <span class="op">+</span><span class="st"> </span><span class="dv">4</span><span class="op">*</span>nu <span class="op">-</span><span class="st"> </span><span class="dv">5</span>)</span>
<span id="cb5-35">    <span class="cf">for</span>(j <span class="cf">in</span> 1L<span class="op">:</span>nv){</span>
<span id="cb5-36">      x &lt;-<span class="st"> </span>mx <span class="op">*</span><span class="st"> </span><span class="kw">sqrt</span>((a2<span class="op">-</span>s_)<span class="op">*</span>(a2<span class="op">-</span>v_[j]))</span>
<span id="cb5-37">      y &lt;-<span class="st"> </span>my <span class="op">*</span><span class="st"> </span><span class="kw">sqrt</span>((s_<span class="op">-</span>b2)<span class="op">*</span>(b2<span class="op">-</span>v_[j]))</span>
<span id="cb5-38">      z &lt;-<span class="st"> </span>mz <span class="op">*</span><span class="st"> </span><span class="kw">sqrt</span>((s_<span class="op">-</span>c2)<span class="op">*</span>(c2<span class="op">-</span>v_[j]))</span>
<span id="cb5-39">      M &lt;-<span class="st"> </span><span class="kw">rbind</span>(<span class="kw">cbind</span>(x, y, z), <span class="kw">cbind</span>(<span class="op">-</span>x, y, z)[(npoints<span class="dv">-1</span>)<span class="op">:</span>1L,])</span>
<span id="cb5-40">      M &lt;-<span class="st"> </span><span class="kw">rbind</span>(M, <span class="kw">cbind</span>(M[,1L], <span class="op">-</span>M[,2L], M[,3L])[(<span class="dv">2</span><span class="op">*</span>npoints<span class="dv">-2</span>)<span class="op">:</span>1L,])</span>
<span id="cb5-41">      out[[j]] &lt;-<span class="st"> </span>M</span>
<span id="cb5-42">      <span class="cf">if</span>(j <span class="op">&lt;</span><span class="st"> </span>nv){</span>
<span id="cb5-43">        out[[nv<span class="op">+</span>j]] &lt;-<span class="st"> </span><span class="kw">cbind</span>(M[,<span class="kw">c</span>(1L,2L)], <span class="op">-</span>M[,3L])</span>
<span id="cb5-44">      }</span>
<span id="cb5-45">    }</span>
<span id="cb5-46">    <span class="cf">for</span>(i <span class="cf">in</span> 1L<span class="op">:</span>nu){</span>
<span id="cb5-47">      x &lt;-<span class="st"> </span>mx <span class="op">*</span><span class="st"> </span><span class="kw">sqrt</span>((a2<span class="op">-</span>u_[i])<span class="op">*</span>(a2<span class="op">-</span>t_))</span>
<span id="cb5-48">      y &lt;-<span class="st"> </span>my <span class="op">*</span><span class="st"> </span><span class="kw">sqrt</span>((u_[i]<span class="op">-</span>b2)<span class="op">*</span>(b2<span class="op">-</span>t_))</span>
<span id="cb5-49">      z &lt;-<span class="st"> </span>mz <span class="op">*</span><span class="st"> </span><span class="kw">sqrt</span>((u_[i]<span class="op">-</span>c2)<span class="op">*</span>(c2<span class="op">-</span>t_))</span>
<span id="cb5-50">      M &lt;-<span class="st"> </span><span class="kw">rbind</span>(<span class="kw">cbind</span>(x, y, z), <span class="kw">cbind</span>(x, y, <span class="op">-</span>z)[(npoints<span class="dv">-1</span>)<span class="op">:</span>1L,])</span>
<span id="cb5-51">      out[[<span class="dv">2</span><span class="op">*</span>nv<span class="dv">-1</span><span class="op">+</span>i]] &lt;-<span class="st"> </span>M</span>
<span id="cb5-52">      <span class="cf">if</span>(i <span class="op">&lt;</span><span class="st"> </span>nu){</span>
<span id="cb5-53">        out[[<span class="dv">2</span><span class="op">*</span>nv<span class="dv">-1</span><span class="op">+</span>nu<span class="op">+</span>i]] &lt;-<span class="st"> </span><span class="kw">cbind</span>(<span class="op">-</span>M[,1L], M[,<span class="kw">c</span>(2L,3L)])</span>
<span id="cb5-54">        <span class="cf">if</span>(i<span class="op">&gt;</span>1L) out[[<span class="dv">2</span><span class="op">*</span>nv<span class="op">+</span><span class="dv">3</span><span class="op">*</span>nu<span class="op">+</span>i<span class="dv">-4</span>]] &lt;-<span class="st"> </span><span class="kw">cbind</span>(<span class="op">-</span>M[,<span class="kw">c</span>(1L,2L)], M[,3L])</span>
<span id="cb5-55">      }</span>
<span id="cb5-56">      <span class="cf">if</span>(i <span class="op">&gt;</span><span class="st"> </span>1L){</span>
<span id="cb5-57">        out[[<span class="dv">2</span><span class="op">*</span>nv<span class="op">+</span><span class="dv">2</span><span class="op">*</span>nu<span class="op">+</span>i<span class="dv">-3</span>]] &lt;-<span class="st"> </span><span class="kw">cbind</span>(M[,1L], <span class="op">-</span>M[,2L], M[,3L])</span>
<span id="cb5-58">      }</span>
<span id="cb5-59">    }</span>
<span id="cb5-60">  }<span class="cf">else</span>{ <span class="co"># a0 = b0</span></span>
<span id="cb5-61">    u_ &lt;-<span class="st"> </span><span class="kw">seq</span>(<span class="dv">0</span>, <span class="dv">2</span><span class="op">*</span>pi, <span class="dt">length.out =</span> nu<span class="op">+</span><span class="dv">1</span>)[<span class="op">-</span>1L]</span>
<span id="cb5-62">    s_ &lt;-<span class="st"> </span><span class="kw">seq</span>(<span class="dv">0</span>, <span class="dv">2</span><span class="op">*</span>pi, <span class="dt">length.out =</span> npoints)</span>
<span id="cb5-63">    coss_ &lt;-<span class="st"> </span><span class="kw">cos</span>(s_); sins_ &lt;-<span class="st"> </span><span class="kw">sin</span>(s_)</span>
<span id="cb5-64">    mxy &lt;-<span class="st"> </span>a0 <span class="op">/</span><span class="st"> </span><span class="kw">sqrt</span>(h2ac)</span>
<span id="cb5-65">    mz &lt;-<span class="st"> </span>c0 <span class="op">/</span><span class="st"> </span><span class="kw">sqrt</span>(h2bc)</span>
<span id="cb5-66">    out &lt;-<span class="st"> </span><span class="kw">vector</span>(<span class="st">"list"</span>, <span class="dv">2</span><span class="op">*</span>nv <span class="op">+</span><span class="st"> </span><span class="dv">4</span><span class="op">*</span>nu <span class="op">-</span><span class="st"> </span><span class="dv">5</span>)</span>
<span id="cb5-67">    <span class="cf">for</span>(j <span class="cf">in</span> 1L<span class="op">:</span>nv){</span>
<span id="cb5-68">      x &lt;-<span class="st"> </span>mxy <span class="op">*</span><span class="st"> </span><span class="kw">sqrt</span>(a2<span class="op">-</span>v_[j]) <span class="op">*</span><span class="st"> </span>coss_</span>
<span id="cb5-69">      y &lt;-<span class="st"> </span>mxy <span class="op">*</span><span class="st"> </span><span class="kw">sqrt</span>(b2<span class="op">-</span>v_[j]) <span class="op">*</span><span class="st"> </span>sins_</span>
<span id="cb5-70">      z &lt;-<span class="st"> </span>mz <span class="op">*</span><span class="st"> </span><span class="kw">sqrt</span>(c2<span class="op">-</span>v_[j]) </span>
<span id="cb5-71">      M &lt;-<span class="st"> </span><span class="kw">cbind</span>(x, y, z)</span>
<span id="cb5-72">      out[[j]] &lt;-<span class="st"> </span>M</span>
<span id="cb5-73">      <span class="cf">if</span>(j <span class="op">&lt;</span><span class="st"> </span>nv){</span>
<span id="cb5-74">        out[[nv<span class="op">+</span>j]] &lt;-<span class="st"> </span><span class="kw">cbind</span>(M[,<span class="kw">c</span>(1L,2L)], <span class="op">-</span>M[,3L])</span>
<span id="cb5-75">      }</span>
<span id="cb5-76">    }</span>
<span id="cb5-77">    r &lt;-<span class="st"> </span>mxy <span class="op">*</span><span class="st"> </span><span class="kw">sqrt</span>(a2<span class="op">-</span>t_)</span>
<span id="cb5-78">    z &lt;-<span class="st"> </span>mz <span class="op">*</span><span class="st"> </span><span class="kw">sqrt</span>(c2<span class="op">-</span>t_)</span>
<span id="cb5-79">    <span class="cf">for</span>(i <span class="cf">in</span> 1L<span class="op">:</span>nu){</span>
<span id="cb5-80">      x &lt;-<span class="st"> </span>r <span class="op">*</span><span class="st"> </span><span class="kw">cos</span>(u_[i])</span>
<span id="cb5-81">      y &lt;-<span class="st"> </span>r <span class="op">*</span><span class="st"> </span><span class="kw">sin</span>(u_[i])</span>
<span id="cb5-82">      M &lt;-<span class="st"> </span><span class="kw">rbind</span>(<span class="kw">cbind</span>(x, y, z), <span class="kw">cbind</span>(x, y, <span class="op">-</span>z)[(npoints<span class="dv">-1</span>)<span class="op">:</span>1L,])</span>
<span id="cb5-83">      out[[<span class="dv">2</span><span class="op">*</span>nv<span class="dv">-1</span><span class="op">+</span>i]] &lt;-<span class="st"> </span>M</span>
<span id="cb5-84">      <span class="cf">if</span>(i <span class="op">&lt;</span><span class="st"> </span>nu){</span>
<span id="cb5-85">        out[[<span class="dv">2</span><span class="op">*</span>nv<span class="dv">-1</span><span class="op">+</span>nu<span class="op">+</span>i]] &lt;-<span class="st"> </span><span class="kw">cbind</span>(<span class="op">-</span>M[,1L], M[,<span class="kw">c</span>(2L,3L)])</span>
<span id="cb5-86">        <span class="cf">if</span>(i<span class="op">&gt;</span>1L) out[[<span class="dv">2</span><span class="op">*</span>nv<span class="op">+</span><span class="dv">3</span><span class="op">*</span>nu<span class="op">+</span>i<span class="dv">-4</span>]] &lt;-<span class="st"> </span><span class="kw">cbind</span>(<span class="op">-</span>M[,<span class="kw">c</span>(1L,2L)], M[,3L])</span>
<span id="cb5-87">      }</span>
<span id="cb5-88">      <span class="cf">if</span>(i <span class="op">&gt;</span><span class="st"> </span>1L){</span>
<span id="cb5-89">        out[[<span class="dv">2</span><span class="op">*</span>nv<span class="op">+</span><span class="dv">2</span><span class="op">*</span>nu<span class="op">+</span>i<span class="dv">-3</span>]] &lt;-<span class="st"> </span><span class="kw">cbind</span>(M[,1L], <span class="op">-</span>M[,2L], M[,3L])</span>
<span id="cb5-90">      }</span>
<span id="cb5-91">    }</span>
<span id="cb5-92">  }</span>
<span id="cb5-93">  <span class="cf">if</span>(exchange){</span>
<span id="cb5-94">    out &lt;-<span class="st"> </span><span class="kw">lapply</span>(out, <span class="cf">function</span>(M){</span>
<span id="cb5-95">      M[, <span class="kw">c</span>(2L,1L,3L)]</span>
<span id="cb5-96">    })</span>
<span id="cb5-97">  }</span>
<span id="cb5-98">  out</span>
<span id="cb5-99">}</span></code></pre>
      </div>
      <p>Here is an example:</p>
      <div class="sourceCode" id="cb6">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb6-1">sgntr =<span class="st"> "++-"</span></span>
<span id="cb6-2">a =<span class="st"> </span><span class="dv">4</span>; b =<span class="st"> </span><span class="dv">6</span>; c =<span class="st"> </span><span class="dv">5</span></span>
<span id="cb6-3">mesh &lt;-<span class="st"> </span><span class="kw">hyperboloidMesh</span>(a, b, c, sgntr, <span class="dt">nu =</span> <span class="dv">100</span>, <span class="dt">nv =</span> <span class="dv">100</span>, <span class="dt">vmin =</span> <span class="dv">-150</span>)</span>
<span id="cb6-4">clines &lt;-<span class="st"> </span><span class="kw">curvatureLinesH1</span>(a, b, c, sgntr, <span class="dt">nu =</span> <span class="dv">5</span>, <span class="dt">nv =</span> <span class="dv">5</span>, <span class="dt">vmin =</span> <span class="dv">-150</span>)</span>
<span id="cb6-5"><span class="kw">shade3d</span>(mesh, <span class="dt">color =</span> <span class="st">"chartreuse4"</span>, <span class="dt">back =</span> <span class="st">"culled"</span>) </span>
<span id="cb6-6"><span class="kw">shade3d</span>(mesh, <span class="dt">color =</span> <span class="st">"yellow"</span>, <span class="dt">front =</span> <span class="st">"culled"</span>) </span>
<span id="cb6-7"><span class="kw">invisible</span>(<span class="kw">lapply</span>(clines, <span class="cf">function</span>(l){</span>
<span id="cb6-8">  <span class="kw">shade3d</span>(<span class="kw">cylinder3d</span>(l, <span class="dt">radius =</span> <span class="fl">0.1</span>, <span class="dt">sides =</span> <span class="dv">30</span>))</span>
<span id="cb6-9">}))</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/quadrics_H1.png"
        />
      </p>
      <h1 id="two-sheeted-hyperboloid">Two-sheeted hyperboloid</h1>
      <p>
        There are three types of two-sheeted hyperboloids, corresponding to
        these equations:
        <span class="math display"
          >\[ \frac{x^2}{a^2} - \frac{y^2}{b^2} - \frac{z^2}{c^2} = 1 \\
          -\frac{x^2}{a^2} - \frac{y^2}{b^2} + \frac{z^2}{c^2} = 1 \\
          -\frac{x^2}{a^2} + \frac{y^2}{b^2} - \frac{z^2}{c^2} = 1. \]</span
        >
        The <code>twoSheetsHyperboloidMesh</code> function below generates a
        mesh of the two-sheeted hyperboloid; the <code>signature</code> argument
        corresponds to one of the above equations, it must be
        <code>"+--"</code>, <code>"--+"</code> or <code>"-+-"</code>. The mesh
        is made of quadrilaterals and their number is controlled by the
        arguments <code>nu</code> and <code>nv</code>. The two-sheeted
        hyperboloid is infinite and the argument <code>vmin</code> is here to
        control its truncation.
      </p>
      <div class="sourceCode" id="cb7">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb7-1">twoSheetsHyperboloidMesh &lt;-<span class="st"> </span><span class="cf">function</span>(a, b, c, signature, nu, nv, vmin){</span>
<span id="cb7-2">  <span class="kw">stopifnot</span>(signature <span class="op">%in%</span><span class="st"> </span><span class="kw">c</span>(<span class="st">"+--"</span>, <span class="st">"--+"</span>, <span class="st">"-+-"</span>))</span>
<span id="cb7-3">  <span class="kw">stopifnot</span>(vmin <span class="op">&lt;</span><span class="st"> </span><span class="dv">1</span>)</span>
<span id="cb7-4">  <span class="cf">if</span>(signature <span class="op">==</span><span class="st"> "--+"</span>){</span>
<span id="cb7-5">    mesh &lt;-<span class="st"> </span><span class="kw">twoSheetsHyperboloidMesh</span>(c, b, a, <span class="st">"+--"</span>, nu, nv, vmin)</span>
<span id="cb7-6">    mesh<span class="op">$</span>vb &lt;-<span class="st"> </span>mesh<span class="op">$</span>vb[<span class="kw">c</span>(3L,2L,1L,4L),]</span>
<span id="cb7-7">    mesh<span class="op">$</span>normals &lt;-<span class="st"> </span>mesh<span class="op">$</span>normals[<span class="kw">c</span>(3L,2L,1L),]</span>
<span id="cb7-8">    mesh<span class="op">$</span>ib &lt;-<span class="st"> </span>mesh<span class="op">$</span>ib[4L<span class="op">:</span>1L,]</span>
<span id="cb7-9">    <span class="kw">return</span>(mesh)</span>
<span id="cb7-10">  }<span class="cf">else</span> <span class="cf">if</span>(signature <span class="op">==</span><span class="st"> "-+-"</span>){</span>
<span id="cb7-11">    mesh &lt;-<span class="st"> </span><span class="kw">twoSheetsHyperboloidMesh</span>(b, a, c, <span class="st">"+--"</span>, nu, nv, vmin)</span>
<span id="cb7-12">    mesh<span class="op">$</span>vb &lt;-<span class="st"> </span>mesh<span class="op">$</span>vb[<span class="kw">c</span>(2L,1L,3L,4L),]</span>
<span id="cb7-13">    mesh<span class="op">$</span>normals &lt;-<span class="st"> </span>mesh<span class="op">$</span>normals[<span class="kw">c</span>(2L,1L,3L),]</span>
<span id="cb7-14">    mesh<span class="op">$</span>ib &lt;-<span class="st"> </span>mesh<span class="op">$</span>ib[4L<span class="op">:</span>1L,]</span>
<span id="cb7-15">    <span class="kw">return</span>(mesh)</span>
<span id="cb7-16">  }</span>
<span id="cb7-17">  a0 &lt;-<span class="st"> </span>a</span>
<span id="cb7-18">  <span class="cf">if</span>(b <span class="op">&gt;</span><span class="st"> </span>c){</span>
<span id="cb7-19">    exchange &lt;-<span class="st"> </span><span class="ot">TRUE</span></span>
<span id="cb7-20">    b0 &lt;-<span class="st"> </span>c; c0 &lt;-<span class="st"> </span>b</span>
<span id="cb7-21">  }<span class="cf">else</span>{</span>
<span id="cb7-22">    exchange &lt;-<span class="st"> </span><span class="ot">FALSE</span></span>
<span id="cb7-23">    b0 &lt;-<span class="st"> </span>b; c0 &lt;-<span class="st"> </span>c</span>
<span id="cb7-24">  }</span>
<span id="cb7-25">  Nu2 &lt;-<span class="st"> </span>a0<span class="op">^</span><span class="dv">2</span></span>
<span id="cb7-26">  h2ab &lt;-<span class="st"> </span>b0<span class="op">^</span><span class="dv">2</span> <span class="op">+</span><span class="st"> </span>Nu2; h2ac &lt;-<span class="st"> </span>c0<span class="op">^</span><span class="dv">2</span> <span class="op">+</span><span class="st"> </span>Nu2</span>
<span id="cb7-27">  c2 &lt;-<span class="st"> </span><span class="dv">1</span>; a2 &lt;-<span class="st"> </span>c2 <span class="op">+</span><span class="st"> </span>h2ac; b2 &lt;-<span class="st"> </span>a2 <span class="op">-</span><span class="st"> </span>h2ab</span>
<span id="cb7-28">  h2bc &lt;-<span class="st"> </span>b2 <span class="op">-</span><span class="st"> </span>c2</span>
<span id="cb7-29">  <span class="co">#</span></span>
<span id="cb7-30">  vertices &lt;-<span class="st"> </span>Normals &lt;-<span class="st"> </span><span class="kw">matrix</span>(<span class="ot">NA_real_</span>, <span class="dt">nrow =</span> 3L, <span class="dt">ncol =</span> nu<span class="op">*</span>nv)</span>
<span id="cb7-31">  indices &lt;-<span class="st"> </span><span class="kw">matrix</span>(<span class="ot">NA_integer_</span>, <span class="dt">nrow =</span> 4L, <span class="dt">ncol =</span> (nu<span class="dv">-1</span>)<span class="op">*</span>(nv<span class="dv">-1</span>))</span>
<span id="cb7-32">  v_ &lt;-<span class="st"> </span><span class="kw">seq</span>(vmin, c2, <span class="dt">length.out =</span> nv)</span>
<span id="cb7-33">  <span class="co">#</span></span>
<span id="cb7-34">  <span class="cf">if</span>(b0 <span class="op">!=</span><span class="st"> </span>c0){</span>
<span id="cb7-35">    u_ &lt;-<span class="st"> </span><span class="kw">seq</span>(c2, b2, <span class="dt">length.out =</span> nu)</span>
<span id="cb7-36">    x &lt;-<span class="st"> </span>a0 <span class="op">/</span><span class="st"> </span><span class="kw">sqrt</span>(h2ac<span class="op">*</span>h2ab) <span class="op">*</span><span class="st"> </span><span class="kw">sqrt</span>(a2<span class="op">-</span>u_)</span>
<span id="cb7-37">    y &lt;-<span class="st"> </span>b0 <span class="op">/</span><span class="st"> </span><span class="kw">sqrt</span>(h2bc<span class="op">*</span>h2ab) <span class="op">*</span><span class="st"> </span><span class="kw">sqrt</span>(b2<span class="op">-</span>u_)</span>
<span id="cb7-38">    z &lt;-<span class="st"> </span>c0 <span class="op">/</span><span class="st"> </span><span class="kw">sqrt</span>(h2bc<span class="op">*</span>h2ac) <span class="op">*</span><span class="st"> </span><span class="kw">sqrt</span>(u_<span class="op">-</span>c2)</span>
<span id="cb7-39">  }<span class="cf">else</span>{</span>
<span id="cb7-40">    u_ &lt;-<span class="st"> </span><span class="kw">seq</span>(<span class="dv">0</span>, <span class="dv">2</span><span class="op">*</span>pi, <span class="dt">length.out =</span> nu<span class="op">+</span><span class="dv">1</span>)[<span class="op">-</span>1L]</span>
<span id="cb7-41">    x &lt;-<span class="st"> </span><span class="kw">rep</span>(a0<span class="op">/</span><span class="kw">sqrt</span>(h2ac), nu)</span>
<span id="cb7-42">    myz &lt;-<span class="st"> </span>b0 <span class="op">/</span><span class="st"> </span><span class="kw">sqrt</span>(h2ab)</span>
<span id="cb7-43">    y &lt;-<span class="st"> </span>myz <span class="op">*</span><span class="st"> </span><span class="kw">cos</span>(u_)</span>
<span id="cb7-44">    z &lt;-<span class="st"> </span>myz <span class="op">*</span><span class="st"> </span><span class="kw">sin</span>(u_)</span>
<span id="cb7-45">  }</span>
<span id="cb7-46">  <span class="cf">for</span>(i <span class="cf">in</span> <span class="dv">1</span><span class="op">:</span>nu){</span>
<span id="cb7-47">    <span class="cf">for</span>(j <span class="cf">in</span> <span class="dv">1</span><span class="op">:</span>nv){</span>
<span id="cb7-48">      P &lt;-<span class="st"> </span>vertices[, (i<span class="dv">-1</span>)<span class="op">*</span>nv<span class="op">+</span>j] &lt;-<span class="st"> </span><span class="kw">c</span>(</span>
<span id="cb7-49">        x[i] <span class="op">*</span><span class="st"> </span><span class="kw">sqrt</span>(a2<span class="op">-</span>v_[j]),</span>
<span id="cb7-50">        y[i] <span class="op">*</span><span class="st"> </span><span class="kw">sqrt</span>(b2<span class="op">-</span>v_[j]),</span>
<span id="cb7-51">        z[i] <span class="op">*</span><span class="st"> </span><span class="kw">sqrt</span>(c2<span class="op">-</span>v_[j])</span>
<span id="cb7-52">      )</span>
<span id="cb7-53">      Normals[, (i<span class="dv">-1</span>)<span class="op">*</span>nv<span class="op">+</span>j] &lt;-<span class="st"> </span><span class="kw">c</span>(P[1L]<span class="op">/</span>a0<span class="op">^</span><span class="dv">2</span>, <span class="op">-</span>P[2L]<span class="op">/</span>b0<span class="op">^</span><span class="dv">2</span>, <span class="op">-</span>P[3L]<span class="op">/</span>c0<span class="op">^</span><span class="dv">2</span>)</span>
<span id="cb7-54">    }</span>
<span id="cb7-55">  }</span>
<span id="cb7-56">  <span class="co"># quads</span></span>
<span id="cb7-57">  <span class="cf">for</span>(i <span class="cf">in</span> 1L<span class="op">:</span>(nu<span class="dv">-1</span>)){</span>
<span id="cb7-58">    im1 &lt;-<span class="st"> </span>i<span class="op">-</span>1L</span>
<span id="cb7-59">    <span class="cf">for</span>(j <span class="cf">in</span> 1L<span class="op">:</span>(nv<span class="dv">-1</span>)){</span>
<span id="cb7-60">      jp1 &lt;-<span class="st"> </span>j<span class="op">+</span>1L</span>
<span id="cb7-61">      quad &lt;-<span class="st"> </span><span class="kw">c</span>(im1<span class="op">*</span>nv<span class="op">+</span>j, im1<span class="op">*</span>nv<span class="op">+</span>jp1, i<span class="op">*</span>nv<span class="op">+</span>jp1, i<span class="op">*</span>nv<span class="op">+</span>j)</span>
<span id="cb7-62">      indices[, im1<span class="op">*</span>(nv<span class="dv">-1</span>)<span class="op">+</span>j] &lt;-<span class="st"> </span><span class="cf">if</span>(exchange) <span class="kw">rev</span>(quad) <span class="cf">else</span> quad</span>
<span id="cb7-63">    }</span>
<span id="cb7-64">  }</span>
<span id="cb7-65">  vertices &lt;-<span class="st"> </span><span class="kw">cbind</span>(vertices, <span class="kw">c</span>(<span class="op">-</span><span class="dv">1</span>,<span class="dv">1</span>,<span class="dv">1</span>) <span class="op">*</span><span class="st"> </span>vertices)</span>
<span id="cb7-66">  indices &lt;-<span class="st"> </span><span class="kw">cbind</span>(indices, indices[4L<span class="op">:</span>1L,] <span class="op">+</span><span class="st"> </span>nu<span class="op">*</span>nv)</span>
<span id="cb7-67">  Normals &lt;-<span class="st"> </span><span class="kw">cbind</span>(Normals, <span class="kw">c</span>(<span class="op">-</span><span class="dv">1</span>,<span class="dv">1</span>,<span class="dv">1</span>) <span class="op">*</span><span class="st"> </span>Normals)</span>
<span id="cb7-68">  vertices &lt;-<span class="st"> </span><span class="kw">cbind</span>(vertices, <span class="kw">c</span>(<span class="dv">1</span>,<span class="op">-</span><span class="dv">1</span>,<span class="dv">1</span>) <span class="op">*</span><span class="st"> </span>vertices)</span>
<span id="cb7-69">  indices &lt;-<span class="st"> </span><span class="kw">cbind</span>(indices, indices[4L<span class="op">:</span>1L,] <span class="op">+</span><span class="st"> </span><span class="dv">2</span><span class="op">*</span>nu<span class="op">*</span>nv)</span>
<span id="cb7-70">  Normals &lt;-<span class="st"> </span><span class="kw">cbind</span>(Normals, <span class="kw">c</span>(<span class="dv">1</span>,<span class="op">-</span><span class="dv">1</span>,<span class="dv">1</span>) <span class="op">*</span><span class="st"> </span>Normals)</span>
<span id="cb7-71">  vertices &lt;-<span class="st"> </span><span class="kw">cbind</span>(vertices, <span class="kw">c</span>(<span class="dv">1</span>,<span class="dv">1</span>,<span class="op">-</span><span class="dv">1</span>) <span class="op">*</span><span class="st"> </span>vertices)</span>
<span id="cb7-72">  indices &lt;-<span class="st"> </span><span class="kw">cbind</span>(indices, indices[4L<span class="op">:</span>1L,] <span class="op">+</span><span class="st"> </span><span class="dv">4</span><span class="op">*</span>nu<span class="op">*</span>nv)</span>
<span id="cb7-73">  Normals &lt;-<span class="st"> </span><span class="kw">cbind</span>(Normals, <span class="kw">c</span>(<span class="dv">1</span>,<span class="dv">1</span>,<span class="op">-</span><span class="dv">1</span>) <span class="op">*</span><span class="st"> </span>Normals)</span>
<span id="cb7-74">  mesh &lt;-<span class="st"> </span><span class="kw">qmesh3d</span>(</span>
<span id="cb7-75">    <span class="dt">vertices =</span> <span class="cf">if</span>(exchange) vertices[<span class="kw">c</span>(1L,3L,2L),] <span class="cf">else</span> vertices,</span>
<span id="cb7-76">    <span class="dt">indices =</span> indices,</span>
<span id="cb7-77">    <span class="dt">homogeneous =</span> <span class="ot">FALSE</span>,</span>
<span id="cb7-78">    <span class="dt">normals =</span> <span class="op">-</span><span class="kw">t</span>(<span class="cf">if</span>(exchange) Normals[<span class="kw">c</span>(1L,3L,2L),] <span class="cf">else</span> Normals)</span>
<span id="cb7-79">  )</span>
<span id="cb7-80">  mesh</span>
<span id="cb7-81">}</span></code></pre>
      </div>
      <p>
        The <code>curvatureLinesH2</code> function below generates some
        curvature lines of the two-sheeted hyperboloid. The role of the
        arguments <code>du</code> and <code>dv</code> is similar to the role of
        the arguments <code>du</code> and <code>dv</code> in
        <code>curvatureLinesE</code>.
      </p>
      <div class="sourceCode" id="cb8">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb8-1">curvatureLinesH2 &lt;-<span class="st"> </span><span class="cf">function</span>(a, b, c, signature, nu, nv, vmin, du, dv, </span>
<span id="cb8-2">                             <span class="dt">npoints =</span> <span class="dv">100</span>){</span>
<span id="cb8-3">  <span class="kw">stopifnot</span>(signature <span class="op">%in%</span><span class="st"> </span><span class="kw">c</span>(<span class="st">"+--"</span>, <span class="st">"--+"</span>, <span class="st">"-+-"</span>))</span>
<span id="cb8-4">  <span class="kw">stopifnot</span>(du <span class="op">&gt;</span><span class="st"> </span><span class="dv">0</span>, dv <span class="op">&gt;</span><span class="st"> </span><span class="dv">0</span>, vmin <span class="op">&lt;</span><span class="st"> </span><span class="dv">1</span>)</span>
<span id="cb8-5">  <span class="cf">if</span>(signature <span class="op">==</span><span class="st"> "--+"</span>){</span>
<span id="cb8-6">    clines &lt;-<span class="st"> </span></span>
<span id="cb8-7"><span class="st">      </span><span class="kw">curvatureLinesH2</span>(c, b, a, <span class="st">"+--"</span>, nu, nv, vmin, du, dv, npoints)</span>
<span id="cb8-8">    <span class="kw">return</span>(<span class="kw">lapply</span>(clines, <span class="cf">function</span>(l) l[, <span class="kw">c</span>(3L,2L,1L)]))</span>
<span id="cb8-9">  }<span class="cf">else</span> <span class="cf">if</span>(signature <span class="op">==</span><span class="st"> "-+-"</span>){</span>
<span id="cb8-10">    clines &lt;-<span class="st"> </span></span>
<span id="cb8-11"><span class="st">      </span><span class="kw">curvatureLinesH2</span>(b, a, c, <span class="st">"+--"</span>, nu, nv, vmin, du, dv, npoints)</span>
<span id="cb8-12">    <span class="kw">return</span>(<span class="kw">lapply</span>(clines, <span class="cf">function</span>(l) l[, <span class="kw">c</span>(2L,1L,3L)]))</span>
<span id="cb8-13">  }</span>
<span id="cb8-14">  a0 &lt;-<span class="st"> </span>a</span>
<span id="cb8-15">  <span class="cf">if</span>(b <span class="op">&gt;</span><span class="st"> </span>c){</span>
<span id="cb8-16">    exchange &lt;-<span class="st"> </span><span class="ot">TRUE</span></span>
<span id="cb8-17">    b0 &lt;-<span class="st"> </span>c; c0 &lt;-<span class="st"> </span>b</span>
<span id="cb8-18">  }<span class="cf">else</span>{</span>
<span id="cb8-19">    exchange &lt;-<span class="st"> </span><span class="ot">FALSE</span></span>
<span id="cb8-20">    b0 &lt;-<span class="st"> </span>b; c0 &lt;-<span class="st"> </span>c</span>
<span id="cb8-21">  }</span>
<span id="cb8-22">  Nu2 &lt;-<span class="st"> </span>a0<span class="op">^</span><span class="dv">2</span></span>
<span id="cb8-23">  h2ab &lt;-<span class="st"> </span>b0<span class="op">^</span><span class="dv">2</span> <span class="op">+</span><span class="st"> </span>Nu2; h2ac &lt;-<span class="st"> </span>c0<span class="op">^</span><span class="dv">2</span> <span class="op">+</span><span class="st"> </span>Nu2</span>
<span id="cb8-24">  c2 &lt;-<span class="st"> </span><span class="dv">1</span>; a2 &lt;-<span class="st"> </span>c2 <span class="op">+</span><span class="st"> </span>h2ac; b2 &lt;-<span class="st"> </span>a2 <span class="op">-</span><span class="st"> </span>h2ab</span>
<span id="cb8-25">  h2bc &lt;-<span class="st"> </span>b2 <span class="op">-</span><span class="st"> </span>c2</span>
<span id="cb8-26">  <span class="co">#</span></span>
<span id="cb8-27">  <span class="cf">if</span>(b0 <span class="op">!=</span><span class="st"> </span>c0 <span class="op">&amp;&amp;</span><span class="st"> </span>c2<span class="op">+</span>du <span class="op">&gt;=</span><span class="st"> </span>b2){</span>
<span id="cb8-28">    <span class="kw">stop</span>(<span class="st">"`du` is too large."</span>)</span>
<span id="cb8-29">  }</span>
<span id="cb8-30">  <span class="cf">if</span>(vmin <span class="op">&gt;=</span><span class="st"> </span>c2<span class="op">-</span>dv){</span>
<span id="cb8-31">    <span class="kw">stop</span>(<span class="st">"`dv` is too large"</span>)</span>
<span id="cb8-32">  }</span>
<span id="cb8-33">  v_ &lt;-<span class="st"> </span><span class="kw">seq</span>(vmin, c2<span class="op">-</span>dv, <span class="dt">length.out =</span> nv)</span>
<span id="cb8-34">  t_ &lt;-<span class="st"> </span><span class="kw">seq</span>(vmin, c2, <span class="dt">length.out =</span> npoints)</span>
<span id="cb8-35">  out &lt;-<span class="st"> </span><span class="kw">vector</span>(<span class="st">"list"</span>, <span class="dv">2</span><span class="op">*</span>nv <span class="op">+</span><span class="st"> </span><span class="dv">4</span><span class="op">*</span>nu <span class="op">-</span><span class="st"> </span><span class="dv">2</span>)</span>
<span id="cb8-36">  <span class="co">#</span></span>
<span id="cb8-37">  <span class="cf">if</span>(b0 <span class="op">!=</span><span class="st"> </span>c0){</span>
<span id="cb8-38">    u_ &lt;-<span class="st"> </span><span class="kw">seq</span>(c2<span class="op">+</span>du, b2, <span class="dt">length.out =</span> nu)</span>
<span id="cb8-39">    s_ &lt;-<span class="st"> </span><span class="kw">seq</span>(c2, b2, <span class="dt">length.out =</span> npoints)</span>
<span id="cb8-40">    mx &lt;-<span class="st"> </span>a0 <span class="op">/</span><span class="st"> </span><span class="kw">sqrt</span>(h2ac<span class="op">*</span>h2ab)</span>
<span id="cb8-41">    my &lt;-<span class="st"> </span>b0 <span class="op">/</span><span class="st"> </span><span class="kw">sqrt</span>(h2bc<span class="op">*</span>h2ab)</span>
<span id="cb8-42">    mz &lt;-<span class="st"> </span>c0 <span class="op">/</span><span class="st"> </span><span class="kw">sqrt</span>(h2bc<span class="op">*</span>h2ac)</span>
<span id="cb8-43">    <span class="cf">for</span>(j <span class="cf">in</span> 1L<span class="op">:</span>nv){</span>
<span id="cb8-44">      x &lt;-<span class="st"> </span>mx <span class="op">*</span><span class="st"> </span><span class="kw">sqrt</span>((a2<span class="op">-</span>s_)<span class="op">*</span>(a2<span class="op">-</span>v_[j]))</span>
<span id="cb8-45">      y &lt;-<span class="st"> </span>my <span class="op">*</span><span class="st"> </span><span class="kw">sqrt</span>((b2<span class="op">-</span>s_)<span class="op">*</span>(b2<span class="op">-</span>v_[j]))</span>
<span id="cb8-46">      z &lt;-<span class="st"> </span>mz <span class="op">*</span><span class="st"> </span><span class="kw">sqrt</span>((s_<span class="op">-</span>c2)<span class="op">*</span>(c2<span class="op">-</span>v_[j]))</span>
<span id="cb8-47">      M1 &lt;-<span class="st"> </span><span class="kw">rbind</span>(<span class="kw">cbind</span>(x, y, z), <span class="kw">cbind</span>(x, <span class="op">-</span>y, z)[(npoints<span class="dv">-1</span>)<span class="op">:</span>1L,])</span>
<span id="cb8-48">      M2 &lt;-<span class="st"> </span><span class="kw">cbind</span>(M1[,<span class="kw">c</span>(1L,2L)], <span class="op">-</span>M1[,3L])</span>
<span id="cb8-49">      M &lt;-<span class="st"> </span><span class="kw">rbind</span>(M1, M2[(<span class="dv">2</span><span class="op">*</span>npoints<span class="dv">-2</span>)<span class="op">:</span>1L,])</span>
<span id="cb8-50">      out[[j]] &lt;-<span class="st"> </span><span class="cf">if</span>(exchange) M[,<span class="kw">c</span>(1L,3L,2L)] <span class="cf">else</span> M</span>
<span id="cb8-51">      out[[nv<span class="op">+</span>j]] &lt;-<span class="st"> </span></span>
<span id="cb8-52"><span class="st">        </span><span class="kw">cbind</span>(<span class="op">-</span>M[,1L], <span class="cf">if</span>(exchange) M[,<span class="kw">c</span>(3L,2L)] <span class="cf">else</span> M[,<span class="kw">c</span>(2L,3L)])</span>
<span id="cb8-53">    }</span>
<span id="cb8-54">    <span class="cf">for</span>(i <span class="cf">in</span> 1L<span class="op">:</span>nu){</span>
<span id="cb8-55">      x &lt;-<span class="st"> </span>mx <span class="op">*</span><span class="st"> </span><span class="kw">sqrt</span>((a2<span class="op">-</span>u_[i])<span class="op">*</span>(a2<span class="op">-</span>t_))</span>
<span id="cb8-56">      y &lt;-<span class="st"> </span>my <span class="op">*</span><span class="st"> </span><span class="kw">sqrt</span>((b2<span class="op">-</span>u_[i])<span class="op">*</span>(b2<span class="op">-</span>t_))</span>
<span id="cb8-57">      z &lt;-<span class="st"> </span>mz <span class="op">*</span><span class="st"> </span><span class="kw">sqrt</span>((u_[i]<span class="op">-</span>c2)<span class="op">*</span>(c2<span class="op">-</span>t_))</span>
<span id="cb8-58">      M &lt;-<span class="st"> </span><span class="kw">rbind</span>(<span class="kw">cbind</span>(x, y, z), <span class="kw">cbind</span>(x, y, <span class="op">-</span>z)[(npoints<span class="dv">-1</span>)<span class="op">:</span>1L,])</span>
<span id="cb8-59">      out[[<span class="dv">2</span><span class="op">*</span>nv<span class="op">+</span>i]] &lt;-<span class="st"> </span><span class="cf">if</span>(exchange) M[,<span class="kw">c</span>(1L,3L,2L)] <span class="cf">else</span> M</span>
<span id="cb8-60">      <span class="cf">if</span>(i <span class="op">&lt;</span><span class="st"> </span>nu){</span>
<span id="cb8-61">        out[[<span class="dv">2</span><span class="op">*</span>nv<span class="op">+</span>nu<span class="op">+</span>i]] &lt;-<span class="st"> </span><span class="cf">if</span>(exchange) </span>
<span id="cb8-62">          <span class="kw">cbind</span>(M[,<span class="kw">c</span>(1L,3L)], <span class="op">-</span>M[,2L]) </span>
<span id="cb8-63">        <span class="cf">else</span> </span>
<span id="cb8-64">          <span class="kw">cbind</span>(M[,1L], <span class="op">-</span>M[,2L], M[,3L])</span>
<span id="cb8-65">      }</span>
<span id="cb8-66">    }</span>
<span id="cb8-67">  }<span class="cf">else</span>{ <span class="co"># b0 = c0</span></span>
<span id="cb8-68">    u_ &lt;-<span class="st"> </span><span class="kw">seq</span>(<span class="dv">0</span>, <span class="dv">2</span><span class="op">*</span>pi, <span class="dt">length.out =</span> nu<span class="op">+</span><span class="dv">1</span>)[<span class="op">-</span>1L] </span>
<span id="cb8-69">    s_ &lt;-<span class="st"> </span><span class="kw">seq</span>(<span class="dv">0</span>, <span class="dv">2</span><span class="op">*</span>pi, <span class="dt">length.out =</span> npoints)</span>
<span id="cb8-70">    mx &lt;-<span class="st"> </span>a0 <span class="op">/</span><span class="st"> </span><span class="kw">sqrt</span>(h2ac)</span>
<span id="cb8-71">    myz &lt;-<span class="st"> </span>b0 <span class="op">/</span><span class="st"> </span><span class="kw">sqrt</span>(h2ab)</span>
<span id="cb8-72">    <span class="cf">for</span>(j <span class="cf">in</span> <span class="dv">1</span><span class="op">:</span>nv){</span>
<span id="cb8-73">      x &lt;-<span class="st"> </span>mx <span class="op">*</span><span class="st"> </span><span class="kw">sqrt</span>(a2<span class="op">-</span>v_[j])</span>
<span id="cb8-74">      y &lt;-<span class="st"> </span>myz <span class="op">*</span><span class="st"> </span><span class="kw">sqrt</span>(b2<span class="op">-</span>v_[j]) <span class="op">*</span><span class="st"> </span><span class="kw">cos</span>(s_)</span>
<span id="cb8-75">      z &lt;-<span class="st"> </span>myz <span class="op">*</span><span class="st"> </span><span class="kw">sqrt</span>(c2<span class="op">-</span>v_[j]) <span class="op">*</span><span class="st"> </span><span class="kw">sin</span>(s_)</span>
<span id="cb8-76">      M &lt;-<span class="st"> </span><span class="kw">cbind</span>(x, y, z)</span>
<span id="cb8-77">      out[[j]] &lt;-<span class="st"> </span><span class="cf">if</span>(exchange) M[,<span class="kw">c</span>(1L,3L,2L)] <span class="cf">else</span> M</span>
<span id="cb8-78">      out[[nv<span class="op">+</span>j]] &lt;-<span class="st"> </span></span>
<span id="cb8-79"><span class="st">        </span><span class="kw">cbind</span>(<span class="op">-</span>M[,1L], <span class="cf">if</span>(exchange) M[,<span class="kw">c</span>(3L,2L)] <span class="cf">else</span> M[,<span class="kw">c</span>(2L,3L)])</span>
<span id="cb8-80">    }</span>
<span id="cb8-81">    <span class="cf">for</span>(i <span class="cf">in</span> <span class="dv">1</span><span class="op">:</span>nu){</span>
<span id="cb8-82">      x &lt;-<span class="st"> </span>mx <span class="op">*</span><span class="st"> </span><span class="kw">sqrt</span>(a2<span class="op">-</span>t_)</span>
<span id="cb8-83">      y &lt;-<span class="st"> </span>myz <span class="op">*</span><span class="st"> </span><span class="kw">sqrt</span>(b2<span class="op">-</span>t_) <span class="op">*</span><span class="st"> </span><span class="kw">cos</span>(u_[i])</span>
<span id="cb8-84">      z &lt;-<span class="st"> </span>myz <span class="op">*</span><span class="st"> </span><span class="kw">sqrt</span>(c2<span class="op">-</span>t_) <span class="op">*</span><span class="st"> </span><span class="kw">sin</span>(u_[i])</span>
<span id="cb8-85">      M &lt;-<span class="st"> </span><span class="kw">rbind</span>(<span class="kw">cbind</span>(x, y, z), <span class="kw">cbind</span>(x, <span class="op">-</span>y, <span class="op">-</span>z)[(npoints<span class="dv">-1</span>)<span class="op">:</span>1L,])</span>
<span id="cb8-86">      out[[<span class="dv">2</span><span class="op">*</span>nv<span class="op">+</span>i]] &lt;-<span class="st"> </span><span class="cf">if</span>(exchange) M[,<span class="kw">c</span>(1L,3L,2L)] <span class="cf">else</span> M</span>
<span id="cb8-87">      <span class="cf">if</span>(i <span class="op">&lt;</span><span class="st"> </span>nu){</span>
<span id="cb8-88">        out[[<span class="dv">2</span><span class="op">*</span>nv<span class="op">+</span>nu<span class="op">+</span>i]] &lt;-<span class="st"> </span><span class="cf">if</span>(exchange) </span>
<span id="cb8-89">          <span class="kw">cbind</span>(M[,<span class="kw">c</span>(1L,3L)], <span class="op">-</span>M[,2L]) </span>
<span id="cb8-90">        <span class="cf">else</span> </span>
<span id="cb8-91">          <span class="kw">cbind</span>(M[,1L], <span class="op">-</span>M[,2L], M[,3L])</span>
<span id="cb8-92">      }</span>
<span id="cb8-93">    }</span>
<span id="cb8-94">  }</span>
<span id="cb8-95">  <span class="co">#</span></span>
<span id="cb8-96">  out[(<span class="dv">2</span><span class="op">*</span>nv<span class="op">+</span><span class="dv">2</span><span class="op">*</span>nu)<span class="op">:</span>(<span class="dv">2</span><span class="op">*</span>nv<span class="op">+</span><span class="dv">4</span><span class="op">*</span>nu<span class="dv">-2</span>)] &lt;-<span class="st"> </span></span>
<span id="cb8-97"><span class="st">    </span><span class="kw">lapply</span>(out[(<span class="dv">2</span><span class="op">*</span>nv<span class="op">+</span><span class="dv">1</span>)<span class="op">:</span>(<span class="dv">2</span><span class="op">*</span>nv<span class="op">+</span><span class="dv">2</span><span class="op">*</span>nu<span class="dv">-1</span>)], <span class="cf">function</span>(M){</span>
<span id="cb8-98">      <span class="kw">cbind</span>(<span class="op">-</span>M[,1L], M[,<span class="kw">c</span>(2L,3L)])</span>
<span id="cb8-99">    })</span>
<span id="cb8-100">  out</span>
<span id="cb8-101">}</span></code></pre>
      </div>
      <p>An example:</p>
      <div class="sourceCode" id="cb9">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb9-1">a =<span class="st"> </span><span class="dv">6</span>; b =<span class="st"> </span><span class="dv">5</span>; c =<span class="st"> </span><span class="dv">3</span></span>
<span id="cb9-2">sgntr =<span class="st"> "-+-"</span></span>
<span id="cb9-3">mesh &lt;-<span class="st"> </span><span class="kw">twoSheetsHyperboloidMesh</span>(a, b, c, sgntr, <span class="dv">100</span>, <span class="dv">100</span>, <span class="dt">vmin =</span> <span class="dv">-500</span>)</span>
<span id="cb9-4">clines &lt;-<span class="st"> </span><span class="kw">curvatureLinesH2</span>(a, b, c, sgntr, <span class="dt">nu =</span> <span class="dv">5</span>, <span class="dt">nv =</span> <span class="dv">5</span>, <span class="dt">vmin =</span> <span class="dv">-500</span>, </span>
<span id="cb9-5">                           <span class="dt">du =</span> <span class="dv">1</span>, <span class="dt">dv =</span> <span class="dv">20</span>, <span class="dt">npoints =</span> <span class="dv">300</span>)</span>
<span id="cb9-6"><span class="kw">shade3d</span>(mesh, <span class="dt">color =</span> <span class="st">"navyblue"</span>, <span class="dt">back =</span> <span class="st">"culled"</span>) </span>
<span id="cb9-7"><span class="kw">shade3d</span>(mesh, <span class="dt">color =</span> <span class="st">"goldenrod"</span>, <span class="dt">front =</span> <span class="st">"culled"</span>)</span>
<span id="cb9-8"><span class="kw">invisible</span>(<span class="kw">lapply</span>(clines, <span class="cf">function</span>(l){</span>
<span id="cb9-9">  <span class="kw">shade3d</span>(<span class="kw">cylinder3d</span>(l, <span class="dt">radius =</span> <span class="fl">0.2</span>, <span class="dt">sides =</span> <span class="dv">30</span>))</span>
<span id="cb9-10">}))</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/quadrics_H2.png"
        />
      </p>
      <h1 id="general-quadric">General quadric</h1>
      <p>
        A general quadric in
        <span class="math inline">\(\mathbb{R}^3\)</span> has equation
        <span class="math display"
          >\[ (x \quad y \quad z)\, A \begin{pmatrix} x \\ y \\ z \end{pmatrix}
          + J' \begin{pmatrix} x \\ y \\ z \end{pmatrix} + K = 0, \]</span
        >
        where <span class="math inline">\(A\)</span> is a symmetric
        <span class="math inline">\((3\times 3)\)</span>-matrix,
        <span class="math inline">\(J \in \mathbb{R}^3\)</span>, and
        <span class="math inline">\(K \in \mathbb{R}\)</span>. Let’s treat an
        example. We follow the strategy given at page 45 of Brannan &amp; al’s
        book <em>Geometry</em> (<a
          href="http://math.haifa.ac.il/ROVENSKI/B2.pdf"
          >pdf</a
        >).
      </p>
      <div class="sourceCode" id="cb10">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb10-1">A =<span class="st"> </span><span class="kw">matrix</span>(<span class="kw">c</span>(</span>
<span id="cb10-2">   <span class="dv">5</span>, <span class="dv">-1</span>, <span class="dv">-1</span>, </span>
<span id="cb10-3">  <span class="dv">-1</span>,  <span class="dv">3</span>,  <span class="dv">1</span>,</span>
<span id="cb10-4">  <span class="dv">-1</span>,  <span class="dv">1</span>, <span class="dv">-3</span></span>
<span id="cb10-5">  ), <span class="dt">nrow =</span> 3L, <span class="dt">ncol =</span> 3L)</span>
<span id="cb10-6">J =<span class="st"> </span><span class="kw">c</span>(<span class="dv">4</span>, <span class="dv">6</span>, <span class="dv">8</span>)</span>
<span id="cb10-7">K =<span class="st"> </span><span class="dv">-10</span></span>
<span id="cb10-8"><span class="co"># computes spectral decomposition of A</span></span>
<span id="cb10-9">eig &lt;-<span class="st"> </span><span class="kw">eigen</span>(A)</span>
<span id="cb10-10">P &lt;-<span class="st"> </span>eig<span class="op">$</span>vectors</span>
<span id="cb10-11">( evalues &lt;-<span class="st"> </span>eig<span class="op">$</span>values )</span>
<span id="cb10-12"><span class="co">## [1]  5.614627  2.632676 -3.247303</span></span></code></pre>
      </div>
      <p>
        There is no eigenvalue equal to <span class="math inline">\(0\)</span>;
        this is the first necessary condition in order for the solution of the
        equation to be a focal quadric.
      </p>
      <p>
        Now we write the equation in the form
        <span class="math display"
          >\[ \lambda_1 {(x'')}^2 + \lambda_2 {(y'')}^2 + \lambda_3 {(z'')}^2 =
          \mathrm{rhs} \]</span
        >
        where <span class="math inline">\(\lambda_1\)</span>,
        <span class="math inline">\(\lambda_2\)</span>,
        <span class="math inline">\(\lambda_3\)</span> are the eigenvalues of
        <span class="math inline">\(A\)</span>, and
        <span class="math inline">\((x'',y'',z'')\)</span> is a new coordinate
        system.
      </p>
      <div class="sourceCode" id="cb11">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb11-1">center &lt;-<span class="st"> </span><span class="kw">c</span>(<span class="kw">t</span>(J) <span class="op">%*%</span><span class="st"> </span>P) <span class="op">/</span><span class="st"> </span>evalues <span class="op">/</span><span class="st"> </span><span class="dv">2</span></span>
<span id="cb11-2">( rhs &lt;-<span class="st"> </span><span class="kw">sum</span>(evalues <span class="op">*</span><span class="st"> </span>center<span class="op">^</span><span class="dv">2</span>) <span class="op">-</span><span class="st"> </span>K )</span>
<span id="cb11-3"><span class="co">## [1] 11.5</span></span></code></pre>
      </div>
      <div class="sourceCode" id="cb12">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb12-1">( sgntr &lt;-<span class="st"> </span><span class="kw">paste0</span>(<span class="kw">ifelse</span>(rhs<span class="op">*</span>evalues <span class="op">&gt;</span><span class="st"> </span><span class="dv">0</span>, <span class="st">"+"</span>, <span class="st">"-"</span>), <span class="dt">collapse =</span> <span class="st">""</span>) )</span>
<span id="cb12-2"><span class="co">## [1] "++-"</span></span></code></pre>
      </div>
      <p>
        We find <span class="math inline">\(\mathrm{rhs} \neq 0\)</span>, so the
        solution of the equation is a focal quadric. If
        <span class="math inline">\(\mathrm{rhs} = 0\)</span>, the solution is a
        cone.
      </p>
      <p>
        The signature is <span class="math inline">\(++-\)</span>, so the
        solution of the equation is a one-sheeted hyperboloid. By dividing both
        members of the previous equality by
        <span class="math inline">\(\mathrm{rhs}\)</span>, we get its equation
        in standard form.
      </p>
      <div class="sourceCode" id="cb13">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb13-1">abc &lt;-<span class="st"> </span><span class="kw">sqrt</span>(<span class="kw">abs</span>(rhs<span class="op">/</span>evalues))</span>
<span id="cb13-2">a &lt;-<span class="st"> </span>abc[<span class="dv">1</span>]; b &lt;-<span class="st"> </span>abc[<span class="dv">2</span>]; c &lt;-<span class="st"> </span>abc[<span class="dv">3</span>]</span>
<span id="cb13-3">mesh0 &lt;-<span class="st"> </span><span class="kw">hyperboloidMesh</span>(a, b, c, sgntr, <span class="dv">100</span>, <span class="dv">100</span>, <span class="dv">-5</span>)</span>
<span id="cb13-4"><span class="co"># final quadric mesh:</span></span>
<span id="cb13-5">mesh &lt;-<span class="st"> </span><span class="kw">rotate3d</span>(</span>
<span id="cb13-6">  <span class="kw">translate3d</span>(mesh0, <span class="op">-</span>center[<span class="dv">1</span>], <span class="op">-</span>center[<span class="dv">2</span>], <span class="op">-</span>center[<span class="dv">3</span>]), </span>
<span id="cb13-7">  <span class="dt">matrix =</span> <span class="kw">t</span>(P)</span>
<span id="cb13-8">)</span></code></pre>
      </div>
      <p>
        We can check that the equation is fulfilled for some vertices of the
        final mesh:
      </p>
      <div class="sourceCode" id="cb14">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb14-1"><span class="kw">apply</span>(mesh<span class="op">$</span>vb[<span class="op">-</span><span class="dv">4</span>, <span class="dv">1</span><span class="op">:</span><span class="dv">5</span>], 2L, <span class="cf">function</span>(x){</span>
<span id="cb14-2">  <span class="kw">c</span>(<span class="kw">t</span>(x) <span class="op">%*%</span><span class="st"> </span>A <span class="op">%*%</span><span class="st"> </span>x <span class="op">+</span><span class="st"> </span><span class="kw">t</span>(J) <span class="op">%*%</span><span class="st"> </span>x) <span class="op">+</span><span class="st"> </span>K</span>
<span id="cb14-3">})</span>
<span id="cb14-4"><span class="co">## [1] 5.684342e-14 7.105427e-14 4.973799e-14 4.973799e-14 4.263256e-14</span></span></code></pre>
      </div>
      <p>
        Up to small numerical errors, we indeed get
        <span class="math inline">\(0\)</span> for each of the five vertices.
      </p>
    </div>
  </div>
</div>
]]></description>
      <pubDate>Sun, 03 May 2020 00:00:00 UT</pubDate>
      <guid>https://laustep.github.io/stlahblog/posts/focalQuadrics.html</guid>
      <dc:creator>Stéphane Laurent</dc:creator>
      <category>R</category>
    </item>
    <item>
      <title>Drawing slices of a hypersurface with R</title>
      <link>https://laustep.github.io/stlahblog/posts/slicedHypersurface.html</link>
      <description><![CDATA[<div class="container-fluid">
  <div class="main col-sm-12">
    <div class="content">
      <p>
        Let
        <span class="math inline"
          >\(s \colon I \times J \times K \to \mathbb{R}^4\)</span
        >
        be a parameterization of a hypersurface
        <span class="math inline">\(\mathcal{S}\)</span>, where
        <span class="math inline">\(I,J,K \subset \mathbb{R}\)</span> are some
        intervals. I’m going to show how to draw the cross-section of
        <span class="math inline">\(\mathcal{S}\)</span> by a hyperplane with R.
      </p>
      <p>
        For the illustration, we consider the
        <a href="http://hi.gher.space/wiki/Tiger"><em>tiger</em></a
        >:
      </p>
      <div class="sourceCode" id="cb1">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb1-1">R1 =<span class="st"> </span><span class="dv">2</span>; R2 =<span class="st"> </span><span class="dv">2</span>; r =<span class="st"> </span><span class="fl">0.5</span></span>
<span id="cb1-2">s &lt;-<span class="st"> </span><span class="cf">function</span>(u, v, w){</span>
<span id="cb1-3">  <span class="kw">rbind</span>(</span>
<span id="cb1-4">    <span class="kw">cos</span>(u) <span class="op">*</span><span class="st"> </span>(R1 <span class="op">+</span><span class="st"> </span>r<span class="op">*</span><span class="kw">cos</span>(w)),</span>
<span id="cb1-5">    <span class="kw">sin</span>(u) <span class="op">*</span><span class="st"> </span>(R1 <span class="op">+</span><span class="st"> </span>r<span class="op">*</span><span class="kw">cos</span>(w)),</span>
<span id="cb1-6">    <span class="kw">cos</span>(v) <span class="op">*</span><span class="st"> </span>(R2 <span class="op">+</span><span class="st"> </span>r<span class="op">*</span><span class="kw">sin</span>(w)),</span>
<span id="cb1-7">    <span class="kw">sin</span>(v) <span class="op">*</span><span class="st"> </span>(R2 <span class="op">+</span><span class="st"> </span>r<span class="op">*</span><span class="kw">sin</span>(w))</span>
<span id="cb1-8">  )</span>
<span id="cb1-9">}</span></code></pre>
      </div>
      <p>
        Take a hyperplane:
        <span class="math display"
          >\[ \mathcal{P}\colon \quad \langle \mathbf{a}, \mathbf{x} \rangle =
          b, \]</span
        >
        let
        <span class="math inline"
          >\(\vec{\mathbf{n}} = \frac{\mathbf{a}}{\Vert\mathbf{a}\Vert}\)</span
        >
        be a unit normal vector of
        <span class="math inline">\(\mathcal{P}\)</span>, and
        <span class="math inline">\(\mathbf{x}_0\)</span> be an arbitrary point
        in <span class="math inline">\(\mathcal{P}\)</span>.
      </p>
      <div class="sourceCode" id="cb2">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb2-1">a =<span class="st"> </span><span class="kw">c</span>(<span class="dv">1</span>, <span class="dv">1</span>, <span class="dv">1</span>, <span class="dv">1</span>); b =<span class="st"> </span><span class="dv">2</span>        <span class="co"># plane x+y+z+w = 2</span></span>
<span id="cb2-2">x0 =<span class="st"> </span><span class="kw">c</span>(b, b, b, b)<span class="op">/</span><span class="dv">4</span>            <span class="co"># a point in this plane</span></span>
<span id="cb2-3">nrml &lt;-<span class="st"> </span>a<span class="op">/</span><span class="kw">sqrt</span>(<span class="kw">c</span>(<span class="kw">crossprod</span>(a))) <span class="co"># unit normal</span></span></code></pre>
      </div>
      <p>
        Compute a mesh <span class="math inline">\(\mathcal{M}_0\)</span> of the
        isosurface
        <span class="math display"
          >\[ \bigl(s(u,v,w) - \mathbf{x}_0\bigr) \cdot \vec{\mathbf{n}} = 0.
          \]</span
        >
      </p>
      <div class="sourceCode" id="cb3">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb3-1"><span class="kw">library</span>(misc3d)</span>
<span id="cb3-2">f &lt;-<span class="st"> </span><span class="cf">function</span>(u, v, w){</span>
<span id="cb3-3">  <span class="kw">c</span>(<span class="kw">crossprod</span>(<span class="kw">s</span>(u, v, w), nrml))</span>
<span id="cb3-4">}</span>
<span id="cb3-5">u_ &lt;-<span class="st"> </span>v_ &lt;-<span class="st"> </span>w_ &lt;-<span class="st"> </span><span class="kw">seq</span>(<span class="dv">0</span>, <span class="dv">2</span><span class="op">*</span>pi, <span class="dt">length.out =</span> 100L)</span>
<span id="cb3-6">g &lt;-<span class="st"> </span><span class="kw">expand.grid</span>(<span class="dt">u =</span> u_, <span class="dt">v =</span> v_, <span class="dt">w =</span> w_)</span>
<span id="cb3-7">voxel &lt;-<span class="st"> </span><span class="kw">array</span>(<span class="kw">with</span>(g, <span class="kw">f</span>(u,v,w)), <span class="dt">dim =</span> <span class="kw">c</span>(100L,100L,100L))</span>
<span id="cb3-8">surf &lt;-<span class="st"> </span><span class="kw">computeContour3d</span>(voxel, <span class="dt">level =</span> <span class="kw">sum</span>(x0<span class="op">*</span>nrml), </span>
<span id="cb3-9">                         <span class="dt">x =</span> u_, <span class="dt">y =</span> v_, <span class="dt">z =</span> w_)</span>
<span id="cb3-10">trgls &lt;-<span class="st"> </span><span class="kw">makeTriangles</span>(surf)</span>
<span id="cb3-11">mesh0 &lt;-<span class="st"> </span>misc3d<span class="op">:::</span><span class="kw">t2ve</span>(trgls)</span></code></pre>
      </div>
      <p>
        Denote by
        <span class="math inline"
          >\(\mathcal{V}\mathcal{S}_0 \subset I \times J \times K\)</span
        >
        the set of vertices of
        <span class="math inline">\(\mathcal{M}_0\)</span>, and set
        <span class="math inline"
          >\(\mathcal{V}\mathcal{S} = s(\mathcal{V}\mathcal{S}_0) \subset
          \mathbb{R}^4\)</span
        >.
      </p>
      <div class="sourceCode" id="cb4">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb4-1">VS0 &lt;-<span class="st"> </span>mesh0<span class="op">$</span>vb</span>
<span id="cb4-2">VS &lt;-<span class="st"> </span><span class="kw">s</span>(VS0[1L,], VS0[2L,], VS0[3L,]) </span></code></pre>
      </div>
      <p>
        Let <span class="math inline">\(R\)</span> be a rotation in
        <span class="math inline">\(\mathbb{R}^4\)</span> which sends
        <span class="math inline"
          >\(\vec{\mathbf{n}} =: \vec{\mathbf{v}}_1\)</span
        >
        to the vector
        <span class="math inline">\((0,0,0,1) =: \vec{\mathbf{v}}_2\)</span>.
        One can take <span class="math inline">\(R\)</span> corresponding to the
        matrix
        <span class="math display"
          >\[ \frac{2}{{(\vec{\mathbf{v}}_1+\vec{\mathbf{v}}_2)}'
          (\vec{\mathbf{v}}_1+\vec{\mathbf{v}}_2)}
          (\vec{\mathbf{v}}_1+\vec{\mathbf{v}}_2)
          {(\vec{\mathbf{v}}_1+\vec{\mathbf{v}}_2)}' - I_4. \]</span
        >
      </p>
      <div class="sourceCode" id="cb5">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb5-1">rotationMatrix4D &lt;-<span class="st"> </span><span class="cf">function</span>(v1, v2){</span>
<span id="cb5-2">  v1 &lt;-<span class="st"> </span>v1 <span class="op">/</span><span class="st"> </span><span class="kw">sqrt</span>(<span class="kw">c</span>(<span class="kw">crossprod</span>(v1)))</span>
<span id="cb5-3">  v2 &lt;-<span class="st"> </span>v2 <span class="op">/</span><span class="st"> </span><span class="kw">sqrt</span>(<span class="kw">c</span>(<span class="kw">crossprod</span>(v2)))</span>
<span id="cb5-4">  <span class="dv">2</span><span class="op">*</span><span class="kw">tcrossprod</span>(v1<span class="op">+</span>v2)<span class="op">/</span><span class="kw">c</span>(<span class="kw">crossprod</span>(v1<span class="op">+</span>v2)) <span class="op">-</span><span class="st"> </span><span class="kw">diag</span>(4L)</span>
<span id="cb5-5">}</span>
<span id="cb5-6">Rot &lt;-<span class="st"> </span><span class="kw">rotationMatrix4D</span>(nrml, <span class="kw">c</span>(<span class="dv">0</span>,<span class="dv">0</span>,<span class="dv">0</span>,<span class="dv">1</span>))</span></code></pre>
      </div>
      <p>
        Now define
        <span class="math inline"
          >\(\mathcal{V}\mathcal{S}' = R(\mathcal{V}\mathcal{S}) \subset
          \mathbb{R}^4\)</span
        >. Then all points in
        <span class="math inline">\(\mathcal{V}\mathcal{S}'\)</span> are equal
        on their fourth coordinate (up to numerical errors in R):
      </p>
      <div class="sourceCode" id="cb6">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb6-1">VSprime &lt;-<span class="st"> </span>Rot <span class="op">%*%</span><span class="st"> </span>VS</span>
<span id="cb6-2"><span class="kw">head</span>(<span class="kw">t</span>(VSprime))</span>
<span id="cb6-3"><span class="co">##           [,1]      [,2]      [,3]      [,4]</span></span>
<span id="cb6-4"><span class="co">## [1,]  2.203740 -1.329658 -1.620365 0.9999785</span></span>
<span id="cb6-5"><span class="co">## [2,] -1.324840  2.206491 -1.657871 1.0002417</span></span>
<span id="cb6-6"><span class="co">## [3,] -1.320131  2.212244 -1.636339 0.9999972</span></span>
<span id="cb6-7"><span class="co">## [4,] -1.417790  2.116178 -1.698381 0.9999926</span></span>
<span id="cb6-8"><span class="co">## [5,]  2.219859 -1.310784 -1.651340 0.9999841</span></span>
<span id="cb6-9"><span class="co">## [6,]  2.253515 -1.275147 -1.633245 1.0005005</span></span></code></pre>
      </div>
      <p>
        Finally, define
        <span class="math inline"
          >\(\mathcal{V}\mathcal{S}'' \subset \mathbb{R}^3\)</span
        >
        as the set obtained by removing the fourth coordinates of the elements
        of <span class="math inline">\(\mathcal{V}\mathcal{S}'\)</span>, and
        define the mesh <span class="math inline">\(\mathcal{M}\)</span> whose
        set of vertices is
        <span class="math inline">\(\mathcal{V}\mathcal{S}''\)</span> and with
        the same edges as <span class="math inline">\(\mathcal{M}_0\)</span>:
      </p>
      <div class="sourceCode" id="cb7">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb7-1"><span class="kw">library</span>(rgl)</span>
<span id="cb7-2">mesh &lt;-<span class="st"> </span><span class="kw">tmesh3d</span>(</span>
<span id="cb7-3">  <span class="dt">vertices =</span> VSprime[<span class="op">-</span>4L,],</span>
<span id="cb7-4">  <span class="dt">indices =</span> mesh0<span class="op">$</span>ib,</span>
<span id="cb7-5">  <span class="dt">homogeneous =</span> <span class="ot">FALSE</span>,</span>
<span id="cb7-6">  <span class="dt">normals =</span> ?</span>
<span id="cb7-7">)</span></code></pre>
      </div>
      <p>
        What about the normals? If you have an implicit equation defining
        <span class="math inline">\(\mathcal{S}\)</span>, that is,
        <span class="math inline">\(\mathcal{S} = \iota^{-1}(0)\)</span> with
        <span class="math inline"
          >\(\iota\colon \mathbb{R}^4 \to \mathbb{R}\)</span
        >, then a normal to <span class="math inline">\(\mathcal{S}\)</span> at
        a point
        <span class="math inline">\(\mathbf{x} \in \mathbb{R}^4\)</span> is
        given by the gradient of <span class="math inline">\(\iota\)</span> at
        <span class="math inline">\(\mathbf{x}\)</span>. For the tiger, we know
        an implicit equation, and it is not difficult to get the gradient:
      </p>
      <div class="sourceCode" id="cb8">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb8-1">sNormal &lt;-<span class="st"> </span><span class="cf">function</span>(XYZT){</span>
<span id="cb8-2">  x &lt;-<span class="st"> </span>XYZT[1L,]; y &lt;-<span class="st"> </span>XYZT[2L,]; z &lt;-<span class="st"> </span>XYZT[3L,]; t &lt;-<span class="st"> </span>XYZT[4L,]</span>
<span id="cb8-3">  <span class="kw">rbind</span>(</span>
<span id="cb8-4">    x <span class="op">*</span><span class="st"> </span>(<span class="dv">1</span> <span class="op">-</span><span class="st"> </span>R1<span class="op">/</span><span class="kw">sqrt</span>(x<span class="op">^</span><span class="dv">2</span><span class="op">+</span>y<span class="op">^</span><span class="dv">2</span>)),</span>
<span id="cb8-5">    y <span class="op">*</span><span class="st"> </span>(<span class="dv">1</span> <span class="op">-</span><span class="st"> </span>R1<span class="op">/</span><span class="kw">sqrt</span>(x<span class="op">^</span><span class="dv">2</span><span class="op">+</span>y<span class="op">^</span><span class="dv">2</span>)),</span>
<span id="cb8-6">    z <span class="op">*</span><span class="st"> </span>(<span class="dv">1</span> <span class="op">-</span><span class="st"> </span>R2<span class="op">/</span><span class="kw">sqrt</span>(z<span class="op">^</span><span class="dv">2</span><span class="op">+</span>t<span class="op">^</span><span class="dv">2</span>)),</span>
<span id="cb8-7">    t <span class="op">*</span><span class="st"> </span>(<span class="dv">1</span> <span class="op">-</span><span class="st"> </span>R2<span class="op">/</span><span class="kw">sqrt</span>(z<span class="op">^</span><span class="dv">2</span><span class="op">+</span>t<span class="op">^</span><span class="dv">2</span>))</span>
<span id="cb8-8">  )</span>
<span id="cb8-9">}</span>
<span id="cb8-10">Normals &lt;-<span class="st"> </span><span class="kw">sNormal</span>(VS)</span></code></pre>
      </div>
      <p>Once you get the normals:</p>
      <ul>
        <li>
          <p>
            project them to the hyperplane
            <span class="math inline">\(\mathcal{P}\)</span>;
          </p>
        </li>
        <li>
          <p>
            apply the rotation <span class="math inline">\(R\)</span> to the
            projected normals;
          </p>
        </li>
        <li><p>remove the fourth coordinates (all equal);</p></li>
        <li><p>if necessary, negate the normals.</p></li>
      </ul>
      <p>
        The projection of
        <span class="math inline">\(\mathbf{x} \in \mathbb{R}^4\)</span> to the
        hyperplane <span class="math inline">\(\mathcal{P}\)</span> is given by
        <span class="math display"
          >\[ \mathbf{x} - \frac{\langle \mathbf{a}, \mathbf{x} \rangle -
          b}{\Vert \mathbf{a} \Vert^2} \mathbf{a}. \]</span
        >
      </p>
      <div class="sourceCode" id="cb9">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb9-1"><span class="co"># projection onto hyperplane &lt;a,x&gt; = b</span></span>
<span id="cb9-2">projection &lt;-<span class="st"> </span><span class="cf">function</span>(a, b, X){</span>
<span id="cb9-3">  X <span class="op">-</span><span class="st"> </span><span class="kw">tcrossprod</span>(a<span class="op">/</span><span class="kw">c</span>(<span class="kw">crossprod</span>(a)), <span class="kw">colSums</span>(a<span class="op">*</span>X)<span class="op">-</span>b)</span>
<span id="cb9-4">}</span>
<span id="cb9-5">mesh &lt;-<span class="st"> </span><span class="kw">tmesh3d</span>(</span>
<span id="cb9-6">  <span class="dt">vertices =</span> VSprime[<span class="op">-</span>4L,], </span>
<span id="cb9-7">  <span class="dt">indices =</span> mesh0<span class="op">$</span>ib, </span>
<span id="cb9-8">  <span class="dt">homogeneous =</span> <span class="ot">FALSE</span>,</span>
<span id="cb9-9">  <span class="dt">normals =</span> <span class="op">-</span><span class="kw">t</span>((Rot <span class="op">%*%</span><span class="st"> </span><span class="kw">projection</span>(a, b, Normals))[<span class="op">-</span>4L,])</span>
<span id="cb9-10">)</span></code></pre>
      </div>
      <p>This works:</p>
      <div class="sourceCode" id="cb10">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb10-1"><span class="kw">shade3d</span>(mesh, <span class="dt">color =</span> <span class="st">"darkmagenta"</span>)</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/tiger1.png"
        />
      </p>
      <p>
        Here is another way to get the normals. The normal at the point
        <span class="math inline">\(s(u,v,w)\)</span> is
        <span class="math display"
          >\[ \frac{\partial s}{\partial u}(u,v,w) \times \frac{\partial
          s}{\partial v}(u,v,w) \times \frac{\partial s}{\partial w}(u,v,w)
          \]</span
        >
        where
        <span class="math inline">\(\cdot \times \cdot \times \cdot\)</span> is
        the <em>ternary cross-product</em> in
        <span class="math inline">\(\mathbb{R}^4\)</span>, defined by
        <span class="math display"
          >\[ \vec v_1 \times \vec v_2 \times \vec v_3 =
          \left\vert\begin{matrix} \vec i &amp; \vec j &amp; \vec k &amp; \vec l
          \\ v_{1x} &amp; v_{1y} &amp; v_{1z} &amp; v_{1t} \\ v_{2x} &amp;
          v_{2y} &amp; v_{2z} &amp; v_{2t} \\ v_{3x} &amp; v_{3y} &amp; v_{3z}
          &amp; v_{3t} \end{matrix}\right\vert. \]</span
        >
      </p>
      <div class="sourceCode" id="cb11">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb11-1">crossProd4D &lt;-<span class="st"> </span><span class="cf">function</span>(v1, v2, v3){</span>
<span id="cb11-2">  M &lt;-<span class="st"> </span><span class="kw">rbind</span>(v1, v2, v3)</span>
<span id="cb11-3">  <span class="kw">c</span>(<span class="kw">det</span>(M[,<span class="op">-</span>1L]), <span class="op">-</span><span class="kw">det</span>(M[,<span class="op">-</span>2L]), <span class="kw">det</span>(M[,<span class="op">-</span>3L]), <span class="op">-</span><span class="kw">det</span>(M[,<span class="op">-</span>4L]))</span>
<span id="cb11-4">}</span>
<span id="cb11-5">sNormal &lt;-<span class="st"> </span><span class="cf">function</span>(uvw){</span>
<span id="cb11-6">  u &lt;-<span class="st"> </span>uvw[1L]; v &lt;-<span class="st"> </span>uvw[2L]; w &lt;-<span class="st"> </span>uvw[3L]</span>
<span id="cb11-7">  Du &lt;-<span class="st"> </span><span class="kw">c</span>((R1 <span class="op">+</span><span class="st"> </span>r<span class="op">*</span><span class="kw">cos</span>(w))<span class="op">*</span><span class="kw">c</span>(<span class="op">-</span><span class="kw">sin</span>(u),<span class="kw">cos</span>(u)), <span class="dv">0</span>, <span class="dv">0</span>)</span>
<span id="cb11-8">  Dv &lt;-<span class="st"> </span><span class="kw">c</span>(<span class="dv">0</span>, <span class="dv">0</span>, (R2 <span class="op">+</span><span class="st"> </span>r<span class="op">*</span><span class="kw">sin</span>(w))<span class="op">*</span><span class="kw">c</span>(<span class="op">-</span><span class="kw">sin</span>(v),<span class="kw">cos</span>(v)))</span>
<span id="cb11-9">  Dw &lt;-<span class="st"> </span>r <span class="op">*</span><span class="st"> </span><span class="kw">c</span>(<span class="op">-</span><span class="kw">sin</span>(w)<span class="op">*</span><span class="kw">c</span>(<span class="kw">cos</span>(u),<span class="kw">sin</span>(u)), <span class="kw">cos</span>(w)<span class="op">*</span><span class="kw">c</span>(<span class="kw">cos</span>(v),<span class="kw">sin</span>(v)))</span>
<span id="cb11-10">  <span class="kw">crossProd4D</span>(Du, Dv, Dw)</span>
<span id="cb11-11">}</span>
<span id="cb11-12">Normals &lt;-<span class="st"> </span><span class="kw">apply</span>(VS0, 2L, sNormal)</span></code></pre>
      </div>
      <p>
        Then you can calculate the normals in this way and proceed as before:
      </p>
      <div class="sourceCode" id="cb12">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb12-1">mesh &lt;-<span class="st"> </span><span class="kw">tmesh3d</span>(</span>
<span id="cb12-2">  <span class="dt">vertices =</span> VSprime[<span class="op">-</span>4L,], </span>
<span id="cb12-3">  <span class="dt">indices =</span> mesh0<span class="op">$</span>ib, </span>
<span id="cb12-4">  <span class="dt">homogeneous =</span> <span class="ot">FALSE</span>,</span>
<span id="cb12-5">  <span class="dt">normals =</span> <span class="kw">t</span>((Rot <span class="op">%*%</span><span class="st"> </span><span class="kw">projection</span>(a, b, Normals))[<span class="op">-</span>4L,])</span>
<span id="cb12-6">)</span></code></pre>
      </div>
      <p>Here is how to do an animation:</p>
      <div class="sourceCode" id="cb13">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb13-1">b_ &lt;-<span class="st"> </span><span class="kw">seq</span>(<span class="op">-</span><span class="fl">11.5</span>, <span class="fl">11.5</span>, <span class="dt">length.out =</span> 60L)</span>
<span id="cb13-2"><span class="kw">open3d</span>(<span class="dt">windowRect =</span> <span class="kw">c</span>(<span class="dv">100</span>, <span class="dv">100</span>, <span class="dv">612</span>, <span class="dv">612</span>), <span class="dt">zoom =</span> <span class="fl">0.8</span>)</span>
<span id="cb13-3"><span class="kw">bg3d</span>(<span class="kw">rgb</span>(<span class="dv">54</span>, <span class="dv">57</span>, <span class="dv">64</span>, <span class="dt">maxColorValue =</span> <span class="dv">255</span>))</span>
<span id="cb13-4"><span class="kw">view3d</span>(<span class="dv">45</span>, <span class="dv">40</span>)</span>
<span id="cb13-5"><span class="cf">for</span>(i <span class="cf">in</span> 1L<span class="op">:</span><span class="kw">length</span>(b_)){</span>
<span id="cb13-6">  x0 &lt;-<span class="st"> </span><span class="kw">rep</span>(b_[i]<span class="op">/</span><span class="dv">4</span>, 4L) </span>
<span id="cb13-7">  surf &lt;-<span class="st"> </span><span class="kw">computeContour3d</span>(voxel, <span class="dt">level =</span> <span class="kw">sum</span>(x0<span class="op">*</span>nrml), </span>
<span id="cb13-8">                           <span class="dt">x =</span> u_, <span class="dt">y =</span> v_, <span class="dt">z =</span> w_)</span>
<span id="cb13-9">  trgls &lt;-<span class="st"> </span><span class="kw">makeTriangles</span>(surf)</span>
<span id="cb13-10">  mesh0 &lt;-<span class="st"> </span>misc3d<span class="op">:::</span><span class="kw">t2ve</span>(trgls)</span>
<span id="cb13-11">  VS0 &lt;-<span class="st"> </span>mesh0<span class="op">$</span>vb</span>
<span id="cb13-12">  VS &lt;-<span class="st"> </span><span class="kw">s</span>(VS0[1L,], VS0[2L,], VS0[3L,])</span>
<span id="cb13-13">  Normals &lt;-<span class="st"> </span><span class="kw">sNormal</span>(VS)</span>
<span id="cb13-14">  mesh &lt;-<span class="st"> </span><span class="kw">tmesh3d</span>(</span>
<span id="cb13-15">    <span class="dt">vertices =</span> (Rot <span class="op">%*%</span><span class="st"> </span>VS)[<span class="op">-</span>4L,], </span>
<span id="cb13-16">    <span class="dt">indices =</span> mesh0<span class="op">$</span>ib, </span>
<span id="cb13-17">    <span class="dt">homogeneous =</span> <span class="ot">FALSE</span>,</span>
<span id="cb13-18">    <span class="dt">normals =</span> <span class="op">-</span><span class="kw">t</span>((Rot <span class="op">%*%</span><span class="st"> </span><span class="kw">projection</span>(a, b_[i], Normals))[<span class="op">-</span>4L,])</span>
<span id="cb13-19">  )</span>
<span id="cb13-20">  <span class="kw">shade3d</span>(mesh, <span class="dt">color =</span> <span class="st">"firebrick3"</span>)</span>
<span id="cb13-21">  <span class="kw">snapshot3d</span>(<span class="kw">sprintf</span>(<span class="st">"pic%03d.png"</span>, i))</span>
<span id="cb13-22">  <span class="kw">clear3d</span>()</span>
<span id="cb13-23">}</span>
<span id="cb13-24"><span class="cf">for</span>(i <span class="cf">in</span> 1L<span class="op">:</span>59L){</span>
<span id="cb13-25">  <span class="kw">file.copy</span>(<span class="kw">sprintf</span>(<span class="st">"pic%03d.png"</span>, <span class="dv">60</span><span class="op">-</span>i), <span class="kw">sprintf</span>(<span class="st">"pic%03d.png"</span>, <span class="dv">60</span><span class="op">+</span>i))</span>
<span id="cb13-26">}</span>
<span id="cb13-27"><span class="co"># run gifski</span></span>
<span id="cb13-28">command &lt;-<span class="st"> "gifski --fps 12 pic*.png -o slicedTiger.gif"</span></span>
<span id="cb13-29"><span class="kw">system</span>(command)</span>
<span id="cb13-30"><span class="co"># cleaning</span></span>
<span id="cb13-31">pngfiles &lt;-<span class="st"> </span><span class="kw">list.files</span>(<span class="dt">pattern =</span> <span class="st">"^pic.*png$"</span>)</span>
<span id="cb13-32"><span class="kw">file.remove</span>(pngfiles)</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/tiger2.gif"
        />
      </p>
      <h2 id="toroidal-hyperboloid">Toroidal hyperboloid</h2>
      <p>
        Let’s give another example, a <em>toroidal hyperboloid</em>. This is a
        quadric with implicit equation
        <span class="math display"
          >\[ \frac{x^2}{a^2} + \frac{y^2}{b^2} - \frac{z^2}{c^2} -
          \frac{t^2}{d^2} = 1, \]</span
        >
        and a parameterization of this quadric is
        <span class="math display"
          >\[ \begin{array}{ccc} s \colon &amp; (0,2\pi) \times (0,2\pi) \times
          (0, +\infty[ &amp; \longrightarrow &amp; \mathbb{R}^4 \\ &amp; (u,v,w)
          &amp; \longmapsto &amp; \begin{pmatrix} a \cos u \cosh w \\ b \sin u
          \cosh w \\ c \cos v \sinh w \\ d \sin v \sinh w \end{pmatrix}
          \end{array}. \]</span
        >
      </p>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/toroidalHyperboloid.gif"
        />
      </p>
    </div>
  </div>
</div>
]]></description>
      <pubDate>Fri, 01 May 2020 00:00:00 UT</pubDate>
      <guid>https://laustep.github.io/stlahblog/posts/slicedHypersurface.html</guid>
      <dc:creator>Stéphane Laurent</dc:creator>
      <category>R</category>
    </item>
    <item>
      <title>An orbit of the modular tessellation</title>
      <link>https://laustep.github.io/stlahblog/posts/ModularTessellationOrbit.html</link>
      <description><![CDATA[<div class="container-fluid">
  <div class="main col-sm-12">
    <div class="content">
      <p>
        I came across this
        <a
          href="https://www3.risc.jku.at/publications/download/risc_5011/DiplomaThesisPonweiser.pdf"
          >interesting paper</a
        >
        entitled <em>Complex Variables Visualized</em> and written by Thomas
        Ponweiser.
      </p>
      <p>
        In particular, I was intrigued by the <em>generalized powers</em> of a
        Möbius transformation (of a matrix, actually), and their actions on the
        modular tessellation.
      </p>
      <p>
        So I firstly implemented the generalized powers in my package
        <code>PlaneGeometry</code>. Then I wrote the script below to visualize
        the orbit of the modular tessellation under the action of
        <span class="math inline">\(R^t\)</span>,
        <span class="math inline">\(0 \leqslant t &lt; 3\)</span>, with the
        notations of the paper. The command <code>fplot(u)</code> generates the
        modular tessellation under the action of
        <span class="math inline">\(R^t\)</span> when <code>u</code> is the
        value of <span class="math inline">\(t\)</span>. Then I use the
        <code>gifski</code> package to create the animation.
      </p>
      <p>
        To get the modular transformations
        <span class="math inline">\(z \mapsto \frac{az+b}{cz+d}\)</span>, I use
        the <code>unimodular</code> function of the
        <code>elliptic</code> package. It generates the quadruples
        <span class="math inline">\((a,b,c,d)\)</span> of
        <em>positive</em> integers such that
        <span class="math inline">\(ad-bc=1\)</span>. Then we can get all such
        quadruples
        <span class="math inline">\((a,b,c,d) \in \mathbb{Z}^4\)</span> by
        inverting these modular transformations, swapping
        <span class="math inline">\(a\)</span> and
        <span class="math inline">\(d\)</span> and changing their signs.
      </p>
      <div class="sourceCode" id="cb1">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb1-1"><span class="kw">library</span>(PlaneGeometry)</span>
<span id="cb1-2"><span class="kw">library</span>(elliptic) <span class="co"># for the 'unimodular' function</span></span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="co"># Möbius transformations</span></span>
<span id="cb1-5">T &lt;-<span class="st"> </span>Mobius<span class="op">$</span><span class="kw">new</span>(<span class="kw">rbind</span>(<span class="kw">c</span>(<span class="dv">0</span>,<span class="op">-</span><span class="dv">1</span>), <span class="kw">c</span>(<span class="dv">1</span>,<span class="dv">0</span>)))</span>
<span id="cb1-6">U &lt;-<span class="st"> </span>Mobius<span class="op">$</span><span class="kw">new</span>(<span class="kw">rbind</span>(<span class="kw">c</span>(<span class="dv">1</span>,<span class="dv">1</span>), <span class="kw">c</span>(<span class="dv">0</span>,<span class="dv">1</span>)))</span>
<span id="cb1-7">R &lt;-<span class="st"> </span>U<span class="op">$</span><span class="kw">compose</span>(T)</span>
<span id="cb1-8"><span class="co"># R^t, generalized power</span></span>
<span id="cb1-9">Rt &lt;-<span class="st"> </span><span class="cf">function</span>(t) R<span class="op">$</span><span class="kw">gpower</span>(t)</span>
<span id="cb1-10"></span>
<span id="cb1-11"><span class="co"># starting circles</span></span>
<span id="cb1-12">I &lt;-<span class="st"> </span>Circle<span class="op">$</span><span class="kw">new</span>(<span class="kw">c</span>(<span class="dv">0</span>,<span class="fl">1.5</span>), <span class="fl">0.5</span>)</span>
<span id="cb1-13">TI &lt;-<span class="st"> </span>T<span class="op">$</span><span class="kw">transformCircle</span>(I)</span>
<span id="cb1-14"></span>
<span id="cb1-15"><span class="co"># modified Cayley transformation</span></span>
<span id="cb1-16">Phi &lt;-<span class="st"> </span>Mobius<span class="op">$</span><span class="kw">new</span>(<span class="kw">rbind</span>(<span class="kw">c</span>(1i,<span class="dv">1</span>), <span class="kw">c</span>(<span class="dv">1</span>,1i)))</span>
<span id="cb1-17"></span>
<span id="cb1-18"><span class="co"># plotting function ####</span></span>
<span id="cb1-19">n &lt;-<span class="st"> </span>8L</span>
<span id="cb1-20">transfos &lt;-<span class="st"> </span><span class="kw">unimodular</span>(n)</span>
<span id="cb1-21">fplot &lt;-<span class="st"> </span><span class="cf">function</span>(u){</span>
<span id="cb1-22">  opar &lt;-<span class="st"> </span><span class="kw">par</span>(<span class="dt">mar =</span> <span class="kw">c</span>(<span class="dv">0</span>,<span class="dv">0</span>,<span class="dv">0</span>,<span class="dv">0</span>), <span class="dt">bg =</span> <span class="st">"black"</span>)</span>
<span id="cb1-23">  <span class="kw">plot</span>(<span class="ot">NULL</span>, <span class="dt">asp =</span> <span class="dv">1</span>, <span class="dt">xlim =</span> <span class="kw">c</span>(<span class="op">-</span><span class="fl">1.1</span>,<span class="fl">1.1</span>), <span class="dt">ylim =</span> <span class="kw">c</span>(<span class="op">-</span><span class="fl">1.1</span>,<span class="fl">1.1</span>),</span>
<span id="cb1-24">       <span class="dt">xlab =</span> <span class="ot">NA</span>, <span class="dt">ylab =</span> <span class="ot">NA</span>, <span class="dt">axes =</span> <span class="ot">FALSE</span>)</span>
<span id="cb1-25">  <span class="kw">draw</span>(unitCircle, <span class="dt">col =</span> <span class="st">"black"</span>)</span>
<span id="cb1-26">  <span class="cf">for</span>(i <span class="cf">in</span> 1L<span class="op">:</span><span class="kw">dim</span>(transfos)[3L]){</span>
<span id="cb1-27">    transfo &lt;-<span class="st"> </span>transfos[,,i]</span>
<span id="cb1-28">    <span class="co">#</span></span>
<span id="cb1-29">    M &lt;-<span class="st"> </span>Mobius<span class="op">$</span><span class="kw">new</span>(transfo)</span>
<span id="cb1-30">    <span class="kw">draw</span>(M<span class="op">$</span><span class="kw">compose</span>(<span class="kw">Rt</span>(u))<span class="op">$</span><span class="kw">compose</span>(Phi)<span class="op">$</span><span class="kw">transformCircle</span>(I),</span>
<span id="cb1-31">         <span class="dt">border =</span> <span class="st">"black"</span>, <span class="dt">col =</span> <span class="st">"magenta"</span>)</span>
<span id="cb1-32">    <span class="kw">draw</span>(M<span class="op">$</span><span class="kw">compose</span>(<span class="kw">Rt</span>(u))<span class="op">$</span><span class="kw">compose</span>(Phi)<span class="op">$</span><span class="kw">transformCircle</span>(TI),</span>
<span id="cb1-33">         <span class="dt">border =</span> <span class="st">"black"</span>, <span class="dt">col =</span> <span class="st">"magenta"</span>)</span>
<span id="cb1-34">    M &lt;-<span class="st"> </span>M<span class="op">$</span><span class="kw">inverse</span>()</span>
<span id="cb1-35">    <span class="kw">draw</span>(M<span class="op">$</span><span class="kw">compose</span>(<span class="kw">Rt</span>(u))<span class="op">$</span><span class="kw">compose</span>(Phi)<span class="op">$</span><span class="kw">transformCircle</span>(I),</span>
<span id="cb1-36">         <span class="dt">border =</span> <span class="st">"black"</span>, <span class="dt">col =</span> <span class="st">"magenta"</span>)</span>
<span id="cb1-37">    <span class="kw">draw</span>(M<span class="op">$</span><span class="kw">compose</span>(<span class="kw">Rt</span>(u))<span class="op">$</span><span class="kw">compose</span>(Phi)<span class="op">$</span><span class="kw">transformCircle</span>(TI),</span>
<span id="cb1-38">         <span class="dt">border =</span> <span class="st">"black"</span>, <span class="dt">col =</span> <span class="st">"magenta"</span>)</span>
<span id="cb1-39">    <span class="co">#</span></span>
<span id="cb1-40">    <span class="kw">diag</span>(transfo) &lt;-<span class="st"> </span><span class="op">-</span><span class="kw">diag</span>(transfo)</span>
<span id="cb1-41">    M &lt;-<span class="st"> </span>Mobius<span class="op">$</span><span class="kw">new</span>(transfo)</span>
<span id="cb1-42">    <span class="kw">draw</span>(M<span class="op">$</span><span class="kw">compose</span>(<span class="kw">Rt</span>(u))<span class="op">$</span><span class="kw">compose</span>(Phi)<span class="op">$</span><span class="kw">transformCircle</span>(I),</span>
<span id="cb1-43">         <span class="dt">border =</span> <span class="st">"black"</span>, <span class="dt">col =</span> <span class="st">"magenta"</span>)</span>
<span id="cb1-44">    <span class="kw">draw</span>(M<span class="op">$</span><span class="kw">compose</span>(<span class="kw">Rt</span>(u))<span class="op">$</span><span class="kw">compose</span>(Phi)<span class="op">$</span><span class="kw">transformCircle</span>(TI),</span>
<span id="cb1-45">         <span class="dt">border =</span> <span class="st">"black"</span>, <span class="dt">col =</span> <span class="st">"magenta"</span>)</span>
<span id="cb1-46">    M &lt;-<span class="st"> </span>M<span class="op">$</span><span class="kw">inverse</span>()</span>
<span id="cb1-47">    <span class="kw">draw</span>(M<span class="op">$</span><span class="kw">compose</span>(<span class="kw">Rt</span>(u))<span class="op">$</span><span class="kw">compose</span>(Phi)<span class="op">$</span><span class="kw">transformCircle</span>(I),</span>
<span id="cb1-48">         <span class="dt">border =</span> <span class="st">"black"</span>, <span class="dt">col =</span> <span class="st">"magenta"</span>)</span>
<span id="cb1-49">    <span class="kw">draw</span>(M<span class="op">$</span><span class="kw">compose</span>(<span class="kw">Rt</span>(u))<span class="op">$</span><span class="kw">compose</span>(Phi)<span class="op">$</span><span class="kw">transformCircle</span>(TI),</span>
<span id="cb1-50">         <span class="dt">border =</span> <span class="st">"black"</span>, <span class="dt">col =</span> <span class="st">"magenta"</span>)</span>
<span id="cb1-51">    <span class="co">#</span></span>
<span id="cb1-52">    d &lt;-<span class="st"> </span><span class="kw">diag</span>(transfo)</span>
<span id="cb1-53">    <span class="cf">if</span>(d[1L] <span class="op">!=</span><span class="st"> </span>d[2L]){</span>
<span id="cb1-54">      <span class="kw">diag</span>(transfo) &lt;-<span class="st"> </span><span class="kw">rev</span>(d)</span>
<span id="cb1-55">      M &lt;-<span class="st"> </span>Mobius<span class="op">$</span><span class="kw">new</span>(transfo)</span>
<span id="cb1-56">      <span class="kw">draw</span>(M<span class="op">$</span><span class="kw">compose</span>(<span class="kw">Rt</span>(u))<span class="op">$</span><span class="kw">compose</span>(Phi)<span class="op">$</span><span class="kw">transformCircle</span>(I),</span>
<span id="cb1-57">           <span class="dt">border =</span> <span class="st">"black"</span>, <span class="dt">col =</span> <span class="st">"magenta"</span>)</span>
<span id="cb1-58">      <span class="kw">draw</span>(M<span class="op">$</span><span class="kw">compose</span>(<span class="kw">Rt</span>(u))<span class="op">$</span><span class="kw">compose</span>(Phi)<span class="op">$</span><span class="kw">transformCircle</span>(TI),</span>
<span id="cb1-59">           <span class="dt">border =</span> <span class="st">"black"</span>, <span class="dt">col =</span> <span class="st">"magenta"</span>)</span>
<span id="cb1-60">      M &lt;-<span class="st"> </span>M<span class="op">$</span><span class="kw">inverse</span>()</span>
<span id="cb1-61">      <span class="kw">draw</span>(M<span class="op">$</span><span class="kw">compose</span>(<span class="kw">Rt</span>(u))<span class="op">$</span><span class="kw">compose</span>(Phi)<span class="op">$</span><span class="kw">transformCircle</span>(I),</span>
<span id="cb1-62">           <span class="dt">border =</span> <span class="st">"black"</span>, <span class="dt">col =</span> <span class="st">"magenta"</span>)</span>
<span id="cb1-63">      <span class="kw">draw</span>(M<span class="op">$</span><span class="kw">compose</span>(<span class="kw">Rt</span>(u))<span class="op">$</span><span class="kw">compose</span>(Phi)<span class="op">$</span><span class="kw">transformCircle</span>(TI),</span>
<span id="cb1-64">           <span class="dt">border =</span> <span class="st">"black"</span>, <span class="dt">col =</span> <span class="st">"magenta"</span>)</span>
<span id="cb1-65">    }</span>
<span id="cb1-66">  }</span>
<span id="cb1-67">  <span class="cf">for</span>(i <span class="cf">in</span> 1L<span class="op">:</span><span class="kw">dim</span>(transfos)[3L]){</span>
<span id="cb1-68">    transfo &lt;-<span class="st"> </span>transfos[,,i]</span>
<span id="cb1-69">    <span class="co">#</span></span>
<span id="cb1-70">    M &lt;-<span class="st"> </span>Mobius<span class="op">$</span><span class="kw">new</span>(transfo)<span class="op">$</span><span class="kw">compose</span>(T)</span>
<span id="cb1-71">    <span class="kw">draw</span>(M<span class="op">$</span><span class="kw">compose</span>(<span class="kw">Rt</span>(u))<span class="op">$</span><span class="kw">compose</span>(Phi)<span class="op">$</span><span class="kw">transformCircle</span>(I),</span>
<span id="cb1-72">         <span class="dt">border =</span> <span class="st">"black"</span>, <span class="dt">col =</span> <span class="st">"magenta"</span>)</span>
<span id="cb1-73">    <span class="kw">draw</span>(M<span class="op">$</span><span class="kw">compose</span>(<span class="kw">Rt</span>(u))<span class="op">$</span><span class="kw">compose</span>(Phi)<span class="op">$</span><span class="kw">transformCircle</span>(TI),</span>
<span id="cb1-74">         <span class="dt">border =</span> <span class="st">"black"</span>, <span class="dt">col =</span> <span class="st">"magenta"</span>)</span>
<span id="cb1-75">    M &lt;-<span class="st"> </span>M<span class="op">$</span><span class="kw">inverse</span>()</span>
<span id="cb1-76">    <span class="kw">draw</span>(M<span class="op">$</span><span class="kw">compose</span>(<span class="kw">Rt</span>(u))<span class="op">$</span><span class="kw">compose</span>(Phi)<span class="op">$</span><span class="kw">transformCircle</span>(I),</span>
<span id="cb1-77">         <span class="dt">border =</span> <span class="st">"black"</span>, <span class="dt">col =</span> <span class="st">"magenta"</span>)</span>
<span id="cb1-78">    <span class="kw">draw</span>(M<span class="op">$</span><span class="kw">compose</span>(<span class="kw">Rt</span>(u))<span class="op">$</span><span class="kw">compose</span>(Phi)<span class="op">$</span><span class="kw">transformCircle</span>(TI),</span>
<span id="cb1-79">         <span class="dt">border =</span> <span class="st">"black"</span>, <span class="dt">col =</span> <span class="st">"magenta"</span>)</span>
<span id="cb1-80">    <span class="co">#</span></span>
<span id="cb1-81">    <span class="kw">diag</span>(transfo) &lt;-<span class="st"> </span><span class="op">-</span><span class="kw">diag</span>(transfo)</span>
<span id="cb1-82">    M &lt;-<span class="st"> </span>Mobius<span class="op">$</span><span class="kw">new</span>(transfo)<span class="op">$</span><span class="kw">compose</span>(T)</span>
<span id="cb1-83">    <span class="kw">draw</span>(M<span class="op">$</span><span class="kw">compose</span>(<span class="kw">Rt</span>(u))<span class="op">$</span><span class="kw">compose</span>(Phi)<span class="op">$</span><span class="kw">transformCircle</span>(I),</span>
<span id="cb1-84">         <span class="dt">border =</span> <span class="st">"black"</span>, <span class="dt">col =</span> <span class="st">"magenta"</span>)</span>
<span id="cb1-85">    <span class="kw">draw</span>(M<span class="op">$</span><span class="kw">compose</span>(<span class="kw">Rt</span>(u))<span class="op">$</span><span class="kw">compose</span>(Phi)<span class="op">$</span><span class="kw">transformCircle</span>(TI),</span>
<span id="cb1-86">         <span class="dt">border =</span> <span class="st">"black"</span>, <span class="dt">col =</span> <span class="st">"magenta"</span>)</span>
<span id="cb1-87">    M &lt;-<span class="st"> </span>M<span class="op">$</span><span class="kw">inverse</span>()</span>
<span id="cb1-88">    <span class="kw">draw</span>(M<span class="op">$</span><span class="kw">compose</span>(<span class="kw">Rt</span>(u))<span class="op">$</span><span class="kw">compose</span>(Phi)<span class="op">$</span><span class="kw">transformCircle</span>(I),</span>
<span id="cb1-89">         <span class="dt">border =</span> <span class="st">"black"</span>, <span class="dt">col =</span> <span class="st">"magenta"</span>)</span>
<span id="cb1-90">    <span class="kw">draw</span>(M<span class="op">$</span><span class="kw">compose</span>(<span class="kw">Rt</span>(u))<span class="op">$</span><span class="kw">compose</span>(Phi)<span class="op">$</span><span class="kw">transformCircle</span>(TI),</span>
<span id="cb1-91">         <span class="dt">border =</span> <span class="st">"black"</span>, <span class="dt">col =</span> <span class="st">"magenta"</span>)</span>
<span id="cb1-92">    <span class="co">#</span></span>
<span id="cb1-93">    d &lt;-<span class="st"> </span><span class="kw">diag</span>(transfo)</span>
<span id="cb1-94">    <span class="cf">if</span>(d[1L] <span class="op">!=</span><span class="st"> </span>d[2L]){</span>
<span id="cb1-95">      <span class="kw">diag</span>(transfo) &lt;-<span class="st"> </span><span class="kw">rev</span>(d)</span>
<span id="cb1-96">      M &lt;-<span class="st"> </span>Mobius<span class="op">$</span><span class="kw">new</span>(transfo)<span class="op">$</span><span class="kw">compose</span>(T)</span>
<span id="cb1-97">      <span class="kw">draw</span>(M<span class="op">$</span><span class="kw">compose</span>(<span class="kw">Rt</span>(u))<span class="op">$</span><span class="kw">compose</span>(Phi)<span class="op">$</span><span class="kw">transformCircle</span>(I),</span>
<span id="cb1-98">           <span class="dt">border =</span> <span class="st">"black"</span>, <span class="dt">col =</span> <span class="st">"magenta"</span>)</span>
<span id="cb1-99">      <span class="kw">draw</span>(M<span class="op">$</span><span class="kw">compose</span>(<span class="kw">Rt</span>(u))<span class="op">$</span><span class="kw">compose</span>(Phi)<span class="op">$</span><span class="kw">transformCircle</span>(TI),</span>
<span id="cb1-100">           <span class="dt">border =</span> <span class="st">"black"</span>, <span class="dt">col =</span> <span class="st">"magenta"</span>)</span>
<span id="cb1-101">      M &lt;-<span class="st"> </span>M<span class="op">$</span><span class="kw">inverse</span>()</span>
<span id="cb1-102">      <span class="kw">draw</span>(M<span class="op">$</span><span class="kw">compose</span>(<span class="kw">Rt</span>(u))<span class="op">$</span><span class="kw">compose</span>(Phi)<span class="op">$</span><span class="kw">transformCircle</span>(I),</span>
<span id="cb1-103">           <span class="dt">border =</span> <span class="st">"black"</span>, <span class="dt">col =</span> <span class="st">"magenta"</span>)</span>
<span id="cb1-104">      <span class="kw">draw</span>(M<span class="op">$</span><span class="kw">compose</span>(<span class="kw">Rt</span>(u))<span class="op">$</span><span class="kw">compose</span>(Phi)<span class="op">$</span><span class="kw">transformCircle</span>(TI),</span>
<span id="cb1-105">           <span class="dt">border =</span> <span class="st">"black"</span>, <span class="dt">col =</span> <span class="st">"magenta"</span>)</span>
<span id="cb1-106">    }</span>
<span id="cb1-107">  }</span>
<span id="cb1-108">}</span>
<span id="cb1-109"></span>
<span id="cb1-110"><span class="co"># animation ####</span></span>
<span id="cb1-111"><span class="kw">library</span>(gifski)</span>
<span id="cb1-112">u_ &lt;-<span class="st"> </span><span class="kw">seq</span>(<span class="dv">0</span>, <span class="dv">3</span>, <span class="dt">length.out =</span> 181L)[<span class="op">-</span>1L]</span>
<span id="cb1-113"><span class="kw">save_gif</span>({</span>
<span id="cb1-114">  <span class="cf">for</span>(u <span class="cf">in</span> u_){</span>
<span id="cb1-115">    <span class="kw">fplot</span>(u)</span>
<span id="cb1-116">  }</span>
<span id="cb1-117">}, <span class="st">"ModularTessellation.gif"</span>, <span class="dv">512</span>, <span class="dv">512</span>, <span class="dt">delay =</span> <span class="dv">1</span><span class="op">/</span><span class="dv">12</span>, <span class="dt">res =</span> <span class="dv">144</span>)</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/ModularTessellationOrbit.gif"
        />
      </p>
    </div>
  </div>
</div>
]]></description>
      <pubDate>Wed, 19 Feb 2020 00:00:00 UT</pubDate>
      <guid>https://laustep.github.io/stlahblog/posts/ModularTessellationOrbit.html</guid>
      <dc:creator>Stéphane Laurent</dc:creator>
      <category>R</category>
    </item>
    <item>
      <title>Tooltips for the headers of a datatable in Shiny</title>
      <link>https://laustep.github.io/stlahblog/posts/DTqTips.html</link>
      <description><![CDATA[<div class="container-fluid">
  <div class="main col-sm-12">
    <div class="content">
      <p>
        In this post, I show how to use the
        <a href="http://qtip2.com/">qTip2</a> JavaScript library to create some
        tooltips on the headers of a <code>DT</code> datatable in Shiny,
        displaying some information about the columns, such as summary
        statistics.
      </p>
      <p>
        Firstly, we write a function returning some JavaScript code that creates
        some hidden <code>div</code> elements which will contain the contents of
        the tooltips. This function takes two arguments: <code>n</code>, the
        number of <code>div</code> elements to create (this will be the number
        of columns of the table), and <code>prefixID</code>; the i-th
        <code>div</code> will have the identifier <code>{prefixID}-{i}</code>.
        We also set a class to each <code>div</code>, namely
        <code>qtip-big</code>.
      </p>
      <div class="sourceCode" id="cb1">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb1-1">createDiv &lt;-<span class="st"> </span><span class="cf">function</span>(n, prefixID){</span>
<span id="cb1-2">  <span class="kw">sprintf</span>(<span class="kw">paste</span>(</span>
<span id="cb1-3">    <span class="st">"for(var i = 1; i &lt;= %d; i++){"</span>,</span>
<span id="cb1-4">    <span class="st">"  var div;"</span>,</span>
<span id="cb1-5">    <span class="kw">sprintf</span>(<span class="st">"  var id = '%s-' + i.toString();"</span>, prefixID),</span>
<span id="cb1-6">    <span class="st">"  if(document.getElementById(id) === null){"</span>,</span>
<span id="cb1-7">    <span class="st">"    div = document.createElement('div');"</span>,</span>
<span id="cb1-8">    <span class="st">"    div.setAttribute('id', id);"</span>,</span>
<span id="cb1-9">    <span class="st">"    div.setAttribute('class', 'qtip-big');"</span>,</span>
<span id="cb1-10">    <span class="st">"    div.style.display = 'none';"</span>,</span>
<span id="cb1-11">    <span class="st">"    document.body.appendChild(div);"</span>,</span>
<span id="cb1-12">    <span class="st">"  }"</span>,</span>
<span id="cb1-13">    <span class="st">"}"</span>,</span>
<span id="cb1-14">    <span class="dt">sep =</span> <span class="st">"</span><span class="ch">\n</span><span class="st">"</span></span>
<span id="cb1-15">  ), n)</span>
<span id="cb1-16">}</span></code></pre>
      </div>
      <div class="sourceCode" id="cb2">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb2-1"><span class="kw">cat</span>(<span class="kw">createDiv</span>(<span class="dv">3</span>, <span class="st">"TOOLTIP"</span>))</span>
<span id="cb2-2"><span class="co">## for(var i = 1; i &lt;= 3; i++){</span></span>
<span id="cb2-3"><span class="co">##   var div;</span></span>
<span id="cb2-4"><span class="co">##   var id = 'TOOLTIP-' + i.toString();</span></span>
<span id="cb2-5"><span class="co">##   if(document.getElementById(id) === null){</span></span>
<span id="cb2-6"><span class="co">##     div = document.createElement('div');</span></span>
<span id="cb2-7"><span class="co">##     div.setAttribute('id', id);</span></span>
<span id="cb2-8"><span class="co">##     div.setAttribute('class', 'qtip-big');</span></span>
<span id="cb2-9"><span class="co">##     div.style.display = 'none';</span></span>
<span id="cb2-10"><span class="co">##     document.body.appendChild(div);</span></span>
<span id="cb2-11"><span class="co">##   }</span></span>
<span id="cb2-12"><span class="co">## }</span></span></code></pre>
      </div>
      <p>
        Now we write a function returning some JavaScript code that writes the
        contents of the <code>div</code> elements. It takes as arguments
        <code>dat</code>, the dataframe for the table, <code>i</code>, the index
        of a column of <code>dat</code>, and <code>prefixID</code> as in the
        function <code>createDiv</code>. If the <code>i</code>-th column is
        numeric, we fill the <code>div</code> element with some summary
        statistics of this column, otherwise the information we provide in the
        <code>div</code> element is the number of levels of the contents of the
        column, an enumeration of the levels (at most three), and the number of
        missing values.
      </p>
      <div class="sourceCode" id="cb3">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb3-1">fillDiv &lt;-<span class="st"> </span><span class="cf">function</span>(dat, i, prefixID){</span>
<span id="cb3-2">  x &lt;-<span class="st"> </span>dat[[i]]</span>
<span id="cb3-3">  <span class="cf">if</span>(<span class="kw">is.numeric</span>(x)){</span>
<span id="cb3-4">    <span class="kw">sprintf</span>(<span class="kw">paste</span>(</span>
<span id="cb3-5">      <span class="st">"var div = document.getElementById('%s-%d');"</span>,</span>
<span id="cb3-6">      <span class="st">"var html = '&lt;b&gt; Min: &lt;/b&gt; %s&lt;/br&gt;';"</span>,</span>
<span id="cb3-7">      <span class="st">"html = html + '&lt;b&gt; Max: &lt;/b&gt; %s&lt;/br&gt;';"</span>,</span>
<span id="cb3-8">      <span class="st">"html = html + '&lt;b&gt; Mean: &lt;/b&gt; %s&lt;/br&gt;';"</span>,</span>
<span id="cb3-9">      <span class="st">"html = html + '&lt;b&gt; Std. dev.: &lt;/b&gt; %s&lt;/br&gt;';"</span>,</span>
<span id="cb3-10">      <span class="st">"html = html + '&lt;b&gt; Missing values: &lt;/b&gt; %d';"</span>,</span>
<span id="cb3-11">      <span class="st">"div.innerHTML = html;"</span>,</span>
<span id="cb3-12">      <span class="dt">sep =</span> <span class="st">"</span><span class="ch">\n</span><span class="st">"</span></span>
<span id="cb3-13">    ), </span>
<span id="cb3-14">    prefixID,</span>
<span id="cb3-15">    i, </span>
<span id="cb3-16">    <span class="kw">formatC</span>(<span class="kw">min</span>(x, <span class="dt">na.rm=</span><span class="ot">TRUE</span>)),</span>
<span id="cb3-17">    <span class="kw">formatC</span>(<span class="kw">max</span>(x, <span class="dt">na.rm=</span><span class="ot">TRUE</span>)),</span>
<span id="cb3-18">    <span class="kw">formatC</span>(<span class="kw">mean</span>(x, <span class="dt">na.rm=</span><span class="ot">TRUE</span>)),</span>
<span id="cb3-19">    <span class="kw">formatC</span>(<span class="kw">sd</span>(x, <span class="dt">na.rm=</span><span class="ot">TRUE</span>)),</span>
<span id="cb3-20">    <span class="kw">sum</span>(<span class="kw">is.na</span>(x)))</span>
<span id="cb3-21">  }<span class="cf">else</span>{</span>
<span id="cb3-22">    <span class="cf">if</span>(<span class="kw">is.factor</span>(x)) x &lt;-<span class="st"> </span><span class="kw">as.character</span>(x)</span>
<span id="cb3-23">    levels0 &lt;-<span class="st"> </span><span class="kw">sort</span>(<span class="kw">unique</span>(<span class="kw">na.omit</span>(x)))</span>
<span id="cb3-24">    nlevels &lt;-<span class="st"> </span><span class="kw">length</span>(levels0)</span>
<span id="cb3-25">    levels &lt;-<span class="st"> </span></span>
<span id="cb3-26"><span class="st">      </span><span class="cf">if</span>(nlevels<span class="op">&gt;</span><span class="dv">3</span>) <span class="kw">c</span>(levels0[<span class="dv">1</span><span class="op">:</span><span class="dv">2</span>], levels0[nlevels]) <span class="cf">else</span> levels0</span>
<span id="cb3-27">    ncharMax &lt;-<span class="st"> </span><span class="dv">25</span></span>
<span id="cb3-28">    nchars &lt;-<span class="st"> </span><span class="kw">nchar</span>(levels)</span>
<span id="cb3-29">    <span class="cf">if</span>(<span class="dv">7</span><span class="op">+</span><span class="kw">sum</span>(nchars) <span class="op">&gt;</span><span class="st"> </span>ncharMax){</span>
<span id="cb3-30">      levels[<span class="dv">1</span>] &lt;-<span class="st"> </span><span class="kw">paste0</span>(<span class="st">"&lt;br/&gt;"</span>, levels[<span class="dv">1</span>])</span>
<span id="cb3-31">      <span class="cf">if</span>(nlevels <span class="op">&gt;=</span><span class="st"> </span><span class="dv">2</span> <span class="op">&amp;&amp;</span><span class="st"> </span><span class="kw">sum</span>(nchars) <span class="op">&gt;</span><span class="st"> </span>ncharMax){</span>
<span id="cb3-32">        levels[<span class="dv">2</span>] &lt;-<span class="st"> </span><span class="kw">paste0</span>(<span class="st">"&lt;br/&gt;"</span>, levels[<span class="dv">2</span>])</span>
<span id="cb3-33">        <span class="cf">if</span>(nlevels <span class="op">&gt;=</span><span class="st"> </span><span class="dv">3</span> <span class="op">&amp;&amp;</span><span class="st"> </span><span class="kw">sum</span>(nchars[<span class="dv">2</span><span class="op">:</span><span class="dv">3</span>]) <span class="op">&gt;</span><span class="st"> </span>ncharMax){</span>
<span id="cb3-34">          levels[<span class="dv">3</span>] &lt;-<span class="st"> </span><span class="kw">paste0</span>(<span class="st">"&lt;br/&gt;"</span>, levels[<span class="dv">3</span>])</span>
<span id="cb3-35">        }</span>
<span id="cb3-36">      }</span>
<span id="cb3-37">    }</span>
<span id="cb3-38">    levelsSummary &lt;-<span class="st"> </span><span class="kw">ifelse</span>(nlevels <span class="op">&gt;</span><span class="st"> </span><span class="dv">3</span>,</span>
<span id="cb3-39">                            <span class="kw">paste0</span>(<span class="kw">c</span>(levels[<span class="dv">1</span>],</span>
<span id="cb3-40">                                     <span class="kw">paste0</span>(levels[<span class="dv">2</span>], <span class="st">", ..."</span>),</span>
<span id="cb3-41">                                     levels[<span class="dv">3</span>]),</span>
<span id="cb3-42">                                   <span class="dt">collapse =</span> <span class="st">", "</span>),</span>
<span id="cb3-43">                            <span class="kw">paste0</span>(levels, <span class="dt">collapse =</span> <span class="st">", "</span>))</span>
<span id="cb3-44">    <span class="kw">sprintf</span>(<span class="kw">paste</span>(</span>
<span id="cb3-45">      <span class="st">"var div = document.getElementById('%s-%d');"</span>,</span>
<span id="cb3-46">      <span class="st">"var html = '&lt;b&gt; Number of levels: &lt;/b&gt; %d&lt;/br&gt;';"</span>,</span>
<span id="cb3-47">      <span class="kw">sprintf</span>(<span class="st">"html = html + '&lt;b&gt; Level%s: &lt;/b&gt; %%s&lt;/br&gt;'"</span>, </span>
<span id="cb3-48">              <span class="kw">ifelse</span>(nlevels<span class="op">==</span><span class="dv">1</span>, <span class="st">""</span>, <span class="st">"s"</span>)),</span>
<span id="cb3-49">      <span class="st">"html = html + '&lt;b&gt; Missing values: &lt;/b&gt; %d'"</span>,</span>
<span id="cb3-50">      <span class="st">"div.innerHTML = html;"</span>,</span>
<span id="cb3-51">      <span class="dt">sep =</span> <span class="st">"</span><span class="ch">\n</span><span class="st">"</span></span>
<span id="cb3-52">    ),</span>
<span id="cb3-53">    prefixID,</span>
<span id="cb3-54">    i, </span>
<span id="cb3-55">    nlevels,</span>
<span id="cb3-56">    levelsSummary,</span>
<span id="cb3-57">    <span class="kw">sum</span>(<span class="kw">is.na</span>(x)))</span>
<span id="cb3-58">  }</span>
<span id="cb3-59">}</span></code></pre>
      </div>
      <div class="sourceCode" id="cb4">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb4-1"><span class="kw">cat</span>(<span class="kw">fillDiv</span>(iris, <span class="dv">1</span>, <span class="st">"TOOLTIP"</span>))</span>
<span id="cb4-2"><span class="co">## var div = document.getElementById('TOOLTIP-1');</span></span>
<span id="cb4-3"><span class="co">## var html = '&lt;b&gt; Min: &lt;/b&gt; 4.3&lt;/br&gt;';</span></span>
<span id="cb4-4"><span class="co">## html = html + '&lt;b&gt; Max: &lt;/b&gt; 7.9&lt;/br&gt;';</span></span>
<span id="cb4-5"><span class="co">## html = html + '&lt;b&gt; Mean: &lt;/b&gt; 5.843&lt;/br&gt;';</span></span>
<span id="cb4-6"><span class="co">## html = html + '&lt;b&gt; Std. dev.: &lt;/b&gt; 0.8281&lt;/br&gt;';</span></span>
<span id="cb4-7"><span class="co">## html = html + '&lt;b&gt; Missing values: &lt;/b&gt; 0';</span></span>
<span id="cb4-8"><span class="co">## div.innerHTML = html;</span></span>
<span id="cb4-9"><span class="kw">cat</span>(<span class="kw">fillDiv</span>(iris, <span class="dv">5</span>, <span class="st">"TOOLTIP"</span>))</span>
<span id="cb4-10"><span class="co">## var div = document.getElementById('TOOLTIP-5');</span></span>
<span id="cb4-11"><span class="co">## var html = '&lt;b&gt; Number of levels: &lt;/b&gt; 3&lt;/br&gt;';</span></span>
<span id="cb4-12"><span class="co">## html = html + '&lt;b&gt; Levels: &lt;/b&gt; &lt;br/&gt;setosa, versicolor, virginica&lt;/br&gt;'</span></span>
<span id="cb4-13"><span class="co">## html = html + '&lt;b&gt; Missing values: &lt;/b&gt; 0'</span></span>
<span id="cb4-14"><span class="co">## div.innerHTML = html;</span></span></code></pre>
      </div>
      <p>
        Finally we write a function returning the JavaScript code of the
        <code>qTip</code> tooltips. Its arguments are <code>n</code>, the number
        of columns of the table, and <code>prefixID</code> as before.
      </p>
      <div class="sourceCode" id="cb5">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb5-1">tooltips &lt;-<span class="st"> </span><span class="cf">function</span>(n, prefixID){</span>
<span id="cb5-2">  settings &lt;-<span class="st"> </span><span class="kw">sprintf</span>(<span class="kw">paste</span>(</span>
<span id="cb5-3">    <span class="st">"{"</span>,</span>
<span id="cb5-4">    <span class="st">"  overwrite: true,"</span>,</span>
<span id="cb5-5">    <span class="st">"  content: {"</span>,</span>
<span id="cb5-6">    <span class="kw">sprintf</span>(<span class="st">"    text: $('#%s-%%s').clone()"</span>, prefixID),</span>
<span id="cb5-7">    <span class="st">"  },"</span>,</span>
<span id="cb5-8">    <span class="st">"  show: {"</span>,</span>
<span id="cb5-9">    <span class="st">"    ready: false"</span>,</span>
<span id="cb5-10">    <span class="st">"  },"</span>,</span>
<span id="cb5-11">    <span class="st">"  position: {"</span>,</span>
<span id="cb5-12">    <span class="st">"    my: 'bottom %%s',"</span>,</span>
<span id="cb5-13">    <span class="st">"    at: 'top center'"</span>,</span>
<span id="cb5-14">    <span class="st">"  },"</span>,</span>
<span id="cb5-15">    <span class="st">"  style: {"</span>,</span>
<span id="cb5-16">    <span class="st">"    classes: 'qtip-youtube'"</span>,</span>
<span id="cb5-17">    <span class="st">"  }"</span>,</span>
<span id="cb5-18">    <span class="st">"}"</span>,</span>
<span id="cb5-19">    <span class="dt">sep =</span> <span class="st">"</span><span class="ch">\n</span><span class="st">"</span></span>
<span id="cb5-20">  ), <span class="dv">1</span><span class="op">:</span>n)</span>
<span id="cb5-21">  settings &lt;-<span class="st"> </span><span class="kw">sprintf</span>(settings, <span class="kw">ifelse</span>(<span class="dv">1</span><span class="op">:</span>n <span class="op">&gt;</span><span class="st"> </span>n<span class="op">/</span><span class="dv">2</span>, <span class="st">"right"</span>, <span class="st">"left"</span>))</span>
<span id="cb5-22">  <span class="kw">sprintf</span>(<span class="st">"var tooltips = [%s];"</span>, <span class="kw">paste0</span>(settings, <span class="dt">collapse=</span><span class="st">","</span>))</span>
<span id="cb5-23">}</span></code></pre>
      </div>
      <div class="sourceCode" id="cb6">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb6-1"><span class="kw">cat</span>(<span class="kw">tooltips</span>(<span class="dv">2</span>, <span class="st">"TOOLTIP"</span>))</span>
<span id="cb6-2"><span class="co">## var tooltips = [{</span></span>
<span id="cb6-3"><span class="co">##   overwrite: true,</span></span>
<span id="cb6-4"><span class="co">##   content: {</span></span>
<span id="cb6-5"><span class="co">##     text: $('#TOOLTIP-1').clone()</span></span>
<span id="cb6-6"><span class="co">##   },</span></span>
<span id="cb6-7"><span class="co">##   show: {</span></span>
<span id="cb6-8"><span class="co">##     ready: false</span></span>
<span id="cb6-9"><span class="co">##   },</span></span>
<span id="cb6-10"><span class="co">##   position: {</span></span>
<span id="cb6-11"><span class="co">##     my: 'bottom left',</span></span>
<span id="cb6-12"><span class="co">##     at: 'top center'</span></span>
<span id="cb6-13"><span class="co">##   },</span></span>
<span id="cb6-14"><span class="co">##   style: {</span></span>
<span id="cb6-15"><span class="co">##     classes: 'qtip-youtube'</span></span>
<span id="cb6-16"><span class="co">##   }</span></span>
<span id="cb6-17"><span class="co">## },{</span></span>
<span id="cb6-18"><span class="co">##   overwrite: true,</span></span>
<span id="cb6-19"><span class="co">##   content: {</span></span>
<span id="cb6-20"><span class="co">##     text: $('#TOOLTIP-2').clone()</span></span>
<span id="cb6-21"><span class="co">##   },</span></span>
<span id="cb6-22"><span class="co">##   show: {</span></span>
<span id="cb6-23"><span class="co">##     ready: false</span></span>
<span id="cb6-24"><span class="co">##   },</span></span>
<span id="cb6-25"><span class="co">##   position: {</span></span>
<span id="cb6-26"><span class="co">##     my: 'bottom right',</span></span>
<span id="cb6-27"><span class="co">##     at: 'top center'</span></span>
<span id="cb6-28"><span class="co">##   },</span></span>
<span id="cb6-29"><span class="co">##   style: {</span></span>
<span id="cb6-30"><span class="co">##     classes: 'qtip-youtube'</span></span>
<span id="cb6-31"><span class="co">##   }</span></span>
<span id="cb6-32"><span class="co">## }];</span></span></code></pre>
      </div>
      <p>
        Now we are ready to write the Shiny app. Put the files
        <strong>jquery.qtip.min.css</strong> and
        <strong>jquery.qtip.min.js</strong> in the
        <strong>www</strong> subfolder. We use the <code>shinyjs</code> package
        to run the JavaScript code with the function <code>runjs</code>.
      </p>
      <div class="sourceCode" id="cb7">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb7-1"><span class="kw">library</span>(shiny)</span>
<span id="cb7-2"><span class="kw">library</span>(shinyjs)</span>
<span id="cb7-3"><span class="kw">library</span>(DT)</span>
<span id="cb7-4"></span>
<span id="cb7-5">CSS &lt;-<span class="st"> "</span></span>
<span id="cb7-6"><span class="st">.qtip-big { </span></span>
<span id="cb7-7"><span class="st">  font-size: 15px;</span></span>
<span id="cb7-8"><span class="st">  line-height: 18px;</span></span>
<span id="cb7-9"><span class="st">  white-space: nowrap;</span></span>
<span id="cb7-10"><span class="st">  word-spacing: 1px;</span></span>
<span id="cb7-11"><span class="st">}</span></span>
<span id="cb7-12"><span class="st">"</span></span>
<span id="cb7-13"></span>
<span id="cb7-14">ui &lt;-<span class="st"> </span><span class="kw">fluidPage</span>(</span>
<span id="cb7-15">  tags<span class="op">$</span><span class="kw">head</span>(</span>
<span id="cb7-16">    tags<span class="op">$</span><span class="kw">link</span>(<span class="dt">rel =</span> <span class="st">"stylesheet"</span>, <span class="dt">href =</span> <span class="st">"jquery.qtip.min.css"</span>),</span>
<span id="cb7-17">    tags<span class="op">$</span><span class="kw">script</span>(<span class="dt">src =</span> <span class="st">"jquery.qtip.min.js"</span>),</span>
<span id="cb7-18">    tags<span class="op">$</span><span class="kw">style</span>(CSS)</span>
<span id="cb7-19">  ),</span>
<span id="cb7-20">  <span class="kw">useShinyjs</span>(),</span>
<span id="cb7-21">  <span class="kw">br</span>(), <span class="kw">br</span>(), <span class="kw">br</span>(), <span class="kw">br</span>(), <span class="kw">br</span>(), </span>
<span id="cb7-22">  <span class="kw">DTOutput</span>(<span class="st">"dtable"</span>)</span>
<span id="cb7-23">)</span>
<span id="cb7-24"></span>
<span id="cb7-25">server &lt;-<span class="st"> </span><span class="cf">function</span>(input, output, session){</span>
<span id="cb7-26">  </span>
<span id="cb7-27">  output[[<span class="st">"dtable"</span>]] &lt;-<span class="st"> </span><span class="kw">renderDT</span>({</span>
<span id="cb7-28">    </span>
<span id="cb7-29">    dat &lt;-<span class="st"> </span>iris</span>
<span id="cb7-30">    </span>
<span id="cb7-31">    <span class="cf">for</span>(i <span class="cf">in</span> <span class="dv">1</span><span class="op">:</span><span class="kw">ncol</span>(dat)){</span>
<span id="cb7-32">      <span class="kw">runjs</span>(<span class="kw">createDiv</span>(i, <span class="st">"TOOLTIP"</span>))</span>
<span id="cb7-33">      <span class="kw">runjs</span>(<span class="kw">fillDiv</span>(dat, i, <span class="st">"TOOLTIP"</span>))</span>
<span id="cb7-34">    }</span>
<span id="cb7-35">    </span>
<span id="cb7-36">    headerCallback &lt;-<span class="st"> </span><span class="kw">c</span>(</span>
<span id="cb7-37">      <span class="st">"function(thead, data, start, end, display){"</span>,</span>
<span id="cb7-38">      <span class="st">"  var ncols = data[0].length;"</span>,</span>
<span id="cb7-39">      <span class="kw">tooltips</span>(<span class="kw">ncol</span>(dat), <span class="st">"TOOLTIP"</span>),</span>
<span id="cb7-40">      <span class="st">"  for(var i = 1; i &lt; ncols; i++){"</span>,</span>
<span id="cb7-41">      <span class="st">"    $('th:eq(' + i + ')', thead).qtip(tooltips[i-1]);"</span>, </span>
<span id="cb7-42">      <span class="st">"  }"</span>,</span>
<span id="cb7-43">      <span class="st">"}"</span></span>
<span id="cb7-44">    )</span>
<span id="cb7-45">    </span>
<span id="cb7-46">    <span class="kw">datatable</span>(</span>
<span id="cb7-47">      dat, </span>
<span id="cb7-48">      <span class="dt">options =</span> <span class="kw">list</span>(</span>
<span id="cb7-49">        <span class="dt">headerCallback =</span> <span class="kw">JS</span>(headerCallback),</span>
<span id="cb7-50">        <span class="dt">columnDefs =</span> <span class="kw">list</span>(</span>
<span id="cb7-51">          <span class="kw">list</span>(<span class="dt">className =</span> <span class="st">"dt-center"</span>, <span class="dt">targets =</span> <span class="st">"_all"</span>)</span>
<span id="cb7-52">        )</span>
<span id="cb7-53">      )</span>
<span id="cb7-54">    )</span>
<span id="cb7-55">  })</span>
<span id="cb7-56">  </span>
<span id="cb7-57">}</span>
<span id="cb7-58"></span>
<span id="cb7-59"><span class="kw">shinyApp</span>(ui, server)</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/DTqTip.gif"
        />
      </p>
    </div>
  </div>
</div>
]]></description>
      <pubDate>Sun, 16 Feb 2020 00:00:00 UT</pubDate>
      <guid>https://laustep.github.io/stlahblog/posts/DTqTips.html</guid>
      <dc:creator>Stéphane Laurent</dc:creator>
      <category>R</category>
    </item>
    <item>
      <title>A shinytest script in testthat</title>
      <link>https://laustep.github.io/stlahblog/posts/shinytestthat.html</link>
      <description><![CDATA[<div class="container-fluid">
  <div class="main col-sm-12">
    <div class="content">
      <h2 id="the-shiny-app">The shiny app</h2>
      <p>Here is a simple shiny app:</p>
      <div class="sourceCode" id="cb1">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb1-1"><span class="kw">library</span>(shiny)</span>
<span id="cb1-2"><span class="kw">library</span>(ggplot2)</span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="co"># UI ####</span></span>
<span id="cb1-5">ui &lt;-<span class="st"> </span><span class="kw">fluidPage</span>(</span>
<span id="cb1-6">  </span>
<span id="cb1-7">  <span class="kw">titlePanel</span>(<span class="st">"Set axis breaks"</span>),</span>
<span id="cb1-8">  </span>
<span id="cb1-9">  <span class="kw">sidebarLayout</span>(</span>
<span id="cb1-10">    <span class="co"># sidebar ####</span></span>
<span id="cb1-11">    <span class="kw">sidebarPanel</span>(</span>
<span id="cb1-12">      <span class="kw">fluidRow</span>(</span>
<span id="cb1-13">        <span class="kw">column</span>(</span>
<span id="cb1-14">          <span class="dt">width =</span> <span class="dv">4</span>,</span>
<span id="cb1-15">          <span class="kw">numericInput</span>(<span class="st">"from"</span>, <span class="st">"From:"</span>, <span class="dt">value =</span> <span class="ot">NULL</span>)</span>
<span id="cb1-16">        ),</span>
<span id="cb1-17">        <span class="kw">column</span>(</span>
<span id="cb1-18">          <span class="dt">width =</span> <span class="dv">4</span>,</span>
<span id="cb1-19">          <span class="kw">numericInput</span>(<span class="st">"to"</span>, <span class="st">"To:"</span>, <span class="dt">value =</span> <span class="ot">NULL</span>)</span>
<span id="cb1-20">        ),</span>
<span id="cb1-21">        <span class="kw">column</span>(</span>
<span id="cb1-22">          <span class="dt">width =</span> <span class="dv">4</span>,</span>
<span id="cb1-23">          <span class="kw">numericInput</span>(<span class="st">"by"</span>, <span class="st">"By:"</span>, <span class="dt">value =</span> <span class="ot">NULL</span>)</span>
<span id="cb1-24">        )</span>
<span id="cb1-25">      )</span>
<span id="cb1-26">    ),</span>
<span id="cb1-27">    </span>
<span id="cb1-28">    <span class="co"># main panel ####</span></span>
<span id="cb1-29">    <span class="kw">mainPanel</span>(</span>
<span id="cb1-30">      <span class="kw">plotOutput</span>(<span class="st">"ggplot"</span>)</span>
<span id="cb1-31">    )</span>
<span id="cb1-32">  )</span>
<span id="cb1-33">)</span>
<span id="cb1-34"></span>
<span id="cb1-35"><span class="co"># SERVER ####</span></span>
<span id="cb1-36">server &lt;-<span class="st"> </span><span class="cf">function</span>(input, output) {</span>
<span id="cb1-37">  </span>
<span id="cb1-38">  FromToBy &lt;-<span class="st"> </span><span class="kw">reactiveVal</span>()</span>
<span id="cb1-39">  </span>
<span id="cb1-40">  <span class="kw">observe</span>({</span>
<span id="cb1-41">    breaks &lt;-<span class="st"> </span><span class="kw">tryCatch</span>({</span>
<span id="cb1-42">      <span class="kw">seq</span>(input[[<span class="st">"from"</span>]], input[[<span class="st">"to"</span>]], input[[<span class="st">"by"</span>]])</span>
<span id="cb1-43">    }, <span class="dt">error =</span> <span class="cf">function</span>(e) <span class="ot">NULL</span>)</span>
<span id="cb1-44">    <span class="kw">FromToBy</span>(breaks)</span>
<span id="cb1-45">  })</span>
<span id="cb1-46">  </span>
<span id="cb1-47">  scatterplot &lt;-<span class="st"> </span><span class="kw">reactive</span>({</span>
<span id="cb1-48">    gg &lt;-<span class="st"> </span><span class="kw">ggplot</span>(iris, <span class="kw">aes</span>(Sepal.Length, Petal.Length)) <span class="op">+</span><span class="st"> </span><span class="kw">geom_point</span>()</span>
<span id="cb1-49">    <span class="cf">if</span>(<span class="op">!</span><span class="kw">is.null</span>(<span class="kw">FromToBy</span>())){</span>
<span id="cb1-50">      gg &lt;-<span class="st"> </span>gg <span class="op">+</span><span class="st"> </span><span class="kw">scale_y_continuous</span>(<span class="dt">breaks =</span> <span class="kw">FromToBy</span>())</span>
<span id="cb1-51">    }</span>
<span id="cb1-52">    gg <span class="op">+</span><span class="st"> </span><span class="kw">theme</span>(</span>
<span id="cb1-53">      <span class="dt">axis.text =</span> <span class="kw">element_text</span>(<span class="dt">size =</span> <span class="dv">20</span>),</span>
<span id="cb1-54">      <span class="dt">axis.title =</span> <span class="kw">element_text</span>(<span class="dt">size =</span> <span class="dv">18</span>)</span>
<span id="cb1-55">    )</span>
<span id="cb1-56">  })</span>
<span id="cb1-57">  </span>
<span id="cb1-58">  output[[<span class="st">"ggplot"</span>]] &lt;-<span class="st"> </span><span class="kw">renderPlot</span>({</span>
<span id="cb1-59">    <span class="kw">scatterplot</span>()</span>
<span id="cb1-60">  })</span>
<span id="cb1-61">  </span>
<span id="cb1-62">  <span class="kw">observe</span>({ <span class="co"># this is for shinytest - see later ####</span></span>
<span id="cb1-63">    <span class="kw">req</span>(<span class="kw">scatterplot</span>())</span>
<span id="cb1-64">    ggg &lt;-<span class="st"> </span><span class="kw">ggplot_build</span>(<span class="kw">scatterplot</span>())</span>
<span id="cb1-65">    <span class="kw">exportTestValues</span>(<span class="dt">panelParams =</span> ggg<span class="op">$</span>layout<span class="op">$</span>panel_params[[1L]])</span>
<span id="cb1-66">  })</span>
<span id="cb1-67">  </span>
<span id="cb1-68">}</span>
<span id="cb1-69"></span>
<span id="cb1-70"><span class="co"># Run the application ####</span></span>
<span id="cb1-71"><span class="kw">shinyApp</span>(<span class="dt">ui =</span> ui, <span class="dt">server =</span> server)</span></code></pre>
      </div>
      <p>It allows to set the breaks of the y-axis of the graph:</p>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/shinyFromToBy.gif"
          width="650"
        />
      </p>
      <h2 id="unit-test">Unit test</h2>
      <p>Say we want to test whether the app correctly sets the axis breaks.</p>
      <p>
        When you have a <code>ggplot</code>, you can get the y-axis breaks as
        follows:
      </p>
      <div class="sourceCode" id="cb2">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb2-1"><span class="kw">library</span>(ggplot2)</span>
<span id="cb2-2">gg &lt;-<span class="st"> </span><span class="kw">ggplot</span>(iris, <span class="kw">aes</span>(Sepal.Length, Petal.Length)) <span class="op">+</span><span class="st"> </span><span class="kw">geom_point</span>()</span>
<span id="cb2-3">ggg &lt;-<span class="st"> </span><span class="kw">ggplot_build</span>(gg)</span>
<span id="cb2-4">ggg<span class="op">$</span>layout<span class="op">$</span>panel_params[[1L]][[<span class="st">"y.major_source"</span>]]</span>
<span id="cb2-5"><span class="co">## [1] 2 4 6</span></span></code></pre>
      </div>
      <p>With this piece of code of the app:</p>
      <div class="sourceCode" id="cb3">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb3-1"><span class="kw">observe</span>({ <span class="co"># this is for shinytest - see later ####</span></span>
<span id="cb3-2">  <span class="kw">req</span>(<span class="kw">scatterplot</span>())</span>
<span id="cb3-3">  ggg &lt;-<span class="st"> </span><span class="kw">ggplot_build</span>(<span class="kw">scatterplot</span>())</span>
<span id="cb3-4">  <span class="kw">exportTestValues</span>(<span class="dt">panelParams =</span> ggg<span class="op">$</span>layout<span class="op">$</span>panel_params[[1L]])</span>
<span id="cb3-5">})</span></code></pre>
      </div>
      <p>we export <code>ggg$layout$panel_params[[1L]]</code>.</p>
      <p>
        Assume our package is named <code>shinyFromToBy</code> and the shiny app
        is saved in file <code>app.R</code> in the
        <code>inst/shinyApp</code> folder. Then, here is our unit test (to put
        in the <code>tests/testthat</code> folder):
      </p>
      <div class="sourceCode" id="cb4">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb4-1"><span class="kw">context</span>(<span class="st">"y-axis breaks"</span>)</span>
<span id="cb4-2"></span>
<span id="cb4-3"><span class="kw">test_that</span>(<span class="st">"y-breaks are correct"</span>, {</span>
<span id="cb4-4"></span>
<span id="cb4-5">  <span class="kw">skip_if_not_installed</span>(<span class="st">"shinytest"</span>)</span>
<span id="cb4-6">  <span class="kw">library</span>(shinytest)</span>
<span id="cb4-7"></span>
<span id="cb4-8">  app &lt;-<span class="st"> </span>ShinyDriver<span class="op">$</span><span class="kw">new</span>(</span>
<span id="cb4-9">    <span class="kw">system.file</span>(<span class="st">"shinyApp"</span>, <span class="dt">package =</span> <span class="st">"shinyFromToBy"</span>),</span>
<span id="cb4-10">    <span class="dt">loadTimeout =</span> <span class="fl">1e+05</span>,</span>
<span id="cb4-11">    <span class="dt">shinyOptions =</span> <span class="kw">list</span>(<span class="dt">test.mode =</span> <span class="ot">TRUE</span>)</span>
<span id="cb4-12">  )</span>
<span id="cb4-13">  app<span class="op">$</span><span class="kw">setInputs</span>(<span class="dt">from =</span> <span class="dv">1</span>)</span>
<span id="cb4-14">  app<span class="op">$</span><span class="kw">setInputs</span>(<span class="dt">to =</span> <span class="dv">7</span>)</span>
<span id="cb4-15">  app<span class="op">$</span><span class="kw">setInputs</span>(<span class="dt">by =</span> <span class="fl">0.5</span>)</span>
<span id="cb4-16">  panelParams &lt;-<span class="st"> </span>app<span class="op">$</span><span class="kw">getAllValues</span>()<span class="op">$</span>export[[<span class="st">"panelParams"</span>]]</span>
<span id="cb4-17"></span>
<span id="cb4-18">  <span class="kw">expect_identical</span>(</span>
<span id="cb4-19">    panelParams[[<span class="st">"y.major_source"</span>]],</span>
<span id="cb4-20">    <span class="kw">seq</span>(<span class="dv">1</span>, <span class="dv">7</span>, <span class="dt">by =</span> <span class="fl">0.5</span>)</span>
<span id="cb4-21">  )</span>
<span id="cb4-22"></span>
<span id="cb4-23">  app<span class="op">$</span><span class="kw">stop</span>()</span>
<span id="cb4-24"></span>
<span id="cb4-25">})</span></code></pre>
      </div>
    </div>
  </div>
</div>
]]></description>
      <pubDate>Sat, 23 Nov 2019 00:00:00 UT</pubDate>
      <guid>https://laustep.github.io/stlahblog/posts/shinytestthat.html</guid>
      <dc:creator>Stéphane Laurent</dc:creator>
      <category>R</category>
    </item>
    <item>
      <title>Useful callbacks for DT (in Shiny)</title>
      <link>https://laustep.github.io/stlahblog/posts/DTcallbacks.html</link>
      <description><![CDATA[<div class="container-fluid">
  <div class="main col-sm-12">
    <div class="content">
      <ul>
        <li>
          <a href="#edit-cells-on-pressing-tab-and-arrow-keys"
            >Edit cells on pressing Tab and arrow keys</a
          >
        </li>
        <li>
          <a href="#select-rows-on-click-and-drag"
            >Select rows on click and drag</a
          >
          <ul>
            <li>
              <a href="#getting-the-selected-rows">Getting the selected rows</a>
            </li>
          </ul>
        </li>
        <li><a href="#edit-columns-headers">Edit columns headers</a></li>
        <li><a href="#child-tables">Child tables</a></li>
        <li>
          <a href="#change-row-css-properties-on-clicking-an-icon"
            >Change row CSS properties on clicking an icon</a
          >
        </li>
        <li>
          <a href="#capturing-the-autofilled-cells"
            >Capturing the autofilled cells</a
          >
        </li>
        <li>
          <a href="#select-page-with-a-numeric-input"
            >Select page with a numeric input</a
          >
        </li>
      </ul>
      <h1 id="edit-cells-on-pressing-tab-and-arrow-keys">
        Edit cells on pressing Tab and arrow keys
      </h1>
      <p>This callback allows a more friendly way to edit the cells:</p>
      <ul>
        <li><p>navigate in the table, press ‘Enter’ to edit;</p></li>
        <li>
          <p>
            press ‘Enter’ to validate the edit and stay at the same position;
          </p>
        </li>
        <li>
          <p>
            if you are editing a cell, then pressing ‘Tab’ or an arrow key will
            trigger the edit of the new cell.
          </p>
        </li>
      </ul>
      <p>This is done with the help of the <code>KeyTable</code> extension.</p>
      <div class="sourceCode" id="cb1">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb1-1"><span class="kw">library</span>(shiny)</span>
<span id="cb1-2"><span class="kw">library</span>(DT)</span>
<span id="cb1-3"></span>
<span id="cb1-4">js &lt;-<span class="st"> </span><span class="kw">c</span>(</span>
<span id="cb1-5">  <span class="st">"table.on('key', function(e, datatable, key, cell, originalEvent){"</span>,</span>
<span id="cb1-6">  <span class="st">"  var targetName = originalEvent.target.localName;"</span>,</span>
<span id="cb1-7">  <span class="st">"  if(key == 13 &amp;&amp; targetName == 'body'){"</span>,</span>
<span id="cb1-8">  <span class="st">"    $(cell.node()).trigger('dblclick.dt');"</span>,</span>
<span id="cb1-9">  <span class="st">"  }"</span>,</span>
<span id="cb1-10">  <span class="st">"});"</span>,</span>
<span id="cb1-11">  <span class="st">"table.on('keydown', function(e){"</span>,</span>
<span id="cb1-12">  <span class="st">"  var keys = [9,13,37,38,39,40];"</span>,</span>
<span id="cb1-13">  <span class="st">"  if(e.target.localName == 'input' &amp;&amp; keys.indexOf(e.keyCode) &gt; -1){"</span>,</span>
<span id="cb1-14">  <span class="st">"    $(e.target).trigger('blur');"</span>,</span>
<span id="cb1-15">  <span class="st">"  }"</span>,</span>
<span id="cb1-16">  <span class="st">"});"</span>,</span>
<span id="cb1-17">  <span class="st">"table.on('key-focus', function(e, datatable, cell, originalEvent){"</span>,</span>
<span id="cb1-18">  <span class="st">"  var targetName = originalEvent.target.localName;"</span>,</span>
<span id="cb1-19">  <span class="st">"  var type = originalEvent.type;"</span>,</span>
<span id="cb1-20">  <span class="st">"  if(type == 'keydown' &amp;&amp; targetName == 'input'){"</span>,</span>
<span id="cb1-21">  <span class="st">"    if([9,37,38,39,40].indexOf(originalEvent.keyCode) &gt; -1){"</span>,</span>
<span id="cb1-22">  <span class="st">"      $(cell.node()).trigger('dblclick.dt');"</span>,</span>
<span id="cb1-23">  <span class="st">"    }"</span>,</span>
<span id="cb1-24">  <span class="st">"  }"</span>,</span>
<span id="cb1-25">  <span class="st">"});"</span></span>
<span id="cb1-26">)</span>
<span id="cb1-27"></span>
<span id="cb1-28">ui &lt;-<span class="st"> </span><span class="kw">fluidPage</span>(</span>
<span id="cb1-29">  <span class="kw">DTOutput</span>(<span class="st">"table"</span>)</span>
<span id="cb1-30">)</span>
<span id="cb1-31"></span>
<span id="cb1-32">server &lt;-<span class="st"> </span><span class="cf">function</span>(input, output, session){</span>
<span id="cb1-33">  output[[<span class="st">"table"</span>]] &lt;-<span class="st"> </span><span class="kw">renderDT</span>({</span>
<span id="cb1-34">    <span class="kw">datatable</span>(</span>
<span id="cb1-35">      iris,</span>
<span id="cb1-36">      <span class="dt">selection =</span> <span class="st">"none"</span>,</span>
<span id="cb1-37">      <span class="dt">editable =</span> <span class="ot">TRUE</span>, </span>
<span id="cb1-38">      <span class="dt">callback =</span> <span class="kw">JS</span>(js),</span>
<span id="cb1-39">      <span class="dt">extensions =</span> <span class="st">"KeyTable"</span>,</span>
<span id="cb1-40">      <span class="dt">options =</span> <span class="kw">list</span>(</span>
<span id="cb1-41">        <span class="dt">keys =</span> <span class="ot">TRUE</span></span>
<span id="cb1-42">      )</span>
<span id="cb1-43">    )</span>
<span id="cb1-44">  })</span>
<span id="cb1-45">}</span>
<span id="cb1-46"></span>
<span id="cb1-47"><span class="kw">shinyApp</span>(ui, server)</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/DTcallback_editOnTab.gif"
        />
      </p>
      <h1 id="select-rows-on-click-and-drag">Select rows on click and drag</h1>
      <p>
        With this callback, which resorts to <code>jquery-ui</code>, you can
        select some rows on click and drag. You can also deselect all selected
        rows by double-clicking on the table.
      </p>
      <div class="sourceCode" id="cb2">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb2-1"><span class="kw">library</span>(shiny)</span>
<span id="cb2-2"><span class="kw">library</span>(DT)</span>
<span id="cb2-3"></span>
<span id="cb2-4">callback &lt;-<span class="st"> </span><span class="kw">c</span>(</span>
<span id="cb2-5">  <span class="st">"var dt = table.table().node();"</span>,</span>
<span id="cb2-6">  <span class="st">"$(dt).selectable({"</span>,</span>
<span id="cb2-7">  <span class="st">"  distance : 10,"</span>,</span>
<span id="cb2-8">  <span class="st">"  selecting: function(evt, ui){"</span>,</span>
<span id="cb2-9">  <span class="st">"    $(this).find('tbody tr').each(function(i){"</span>,</span>
<span id="cb2-10">  <span class="st">"      if($(this).hasClass('ui-selecting')){"</span>,</span>
<span id="cb2-11">  <span class="st">"        table.row(i).select();"</span>,</span>
<span id="cb2-12">  <span class="st">"      }"</span>,</span>
<span id="cb2-13">  <span class="st">"    });"</span>,</span>
<span id="cb2-14">  <span class="st">"  }"</span>,</span>
<span id="cb2-15">  <span class="st">"}).on('dblclick', function(){table.rows().deselect();});"</span></span>
<span id="cb2-16">)</span>
<span id="cb2-17"></span>
<span id="cb2-18">ui &lt;-<span class="st"> </span><span class="kw">fluidPage</span>(</span>
<span id="cb2-19">  <span class="kw">DTOutput</span>(<span class="st">"dt"</span>)</span>
<span id="cb2-20">)</span>
<span id="cb2-21"></span>
<span id="cb2-22">server &lt;-<span class="st"> </span><span class="cf">function</span>(input, output){</span>
<span id="cb2-23">  output[[<span class="st">"dt"</span>]] &lt;-<span class="st"> </span><span class="kw">renderDT</span>({</span>
<span id="cb2-24">    dtable &lt;-<span class="st"> </span><span class="kw">datatable</span>(</span>
<span id="cb2-25">      iris, <span class="dt">extensions =</span> <span class="st">"Select"</span>, </span>
<span id="cb2-26">      <span class="dt">callback =</span> <span class="kw">JS</span>(callback), <span class="dt">selection =</span> <span class="st">"multiple"</span></span>
<span id="cb2-27">    )</span>
<span id="cb2-28">    dep &lt;-<span class="st"> </span>htmltools<span class="op">::</span><span class="kw">htmlDependency</span>(<span class="st">"jqueryui"</span>, <span class="st">"1.12.1"</span>,</span>
<span id="cb2-29">                                     <span class="st">"www/shared/jqueryui"</span>,</span>
<span id="cb2-30">                                     <span class="dt">script =</span> <span class="st">"jquery-ui.min.js"</span>,</span>
<span id="cb2-31">                                     <span class="dt">package =</span> <span class="st">"shiny"</span>)</span>
<span id="cb2-32">    dtable<span class="op">$</span>dependencies &lt;-<span class="st"> </span><span class="kw">c</span>(dtable<span class="op">$</span>dependencies, <span class="kw">list</span>(dep))</span>
<span id="cb2-33">    dtable</span>
<span id="cb2-34">  })</span>
<span id="cb2-35">}</span>
<span id="cb2-36"></span>
<span id="cb2-37"><span class="kw">shinyApp</span>(ui, server)</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/DTcallback_selectOnDrag.gif"
        />
      </p>
      <p>
        Unfortunately there is an issue: when you sort a column, the selected
        rows are lost. Below is another code which overcomes this issue; it uses
        a slightly different callback and the option
        <code>server = FALSE</code>.
      </p>
      <div class="sourceCode" id="cb3">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb3-1"><span class="kw">library</span>(shiny)</span>
<span id="cb3-2"><span class="kw">library</span>(DT)</span>
<span id="cb3-3"></span>
<span id="cb3-4">callback &lt;-<span class="st"> </span><span class="kw">c</span>(</span>
<span id="cb3-5">  <span class="st">"var dt = table.table().node();"</span>,</span>
<span id="cb3-6">  <span class="st">"$(dt).selectable({"</span>,</span>
<span id="cb3-7">  <span class="st">"  distance : 10,"</span>,</span>
<span id="cb3-8">  <span class="st">"  selecting: function(evt, ui){"</span>,</span>
<span id="cb3-9">  <span class="st">"    $(this).find('tbody tr').each(function(i){"</span>,</span>
<span id="cb3-10">  <span class="st">"      if($(this).hasClass('ui-selecting')){"</span>,</span>
<span id="cb3-11">  <span class="st">"        table.row(':eq(' + i + ')').select();"</span>,</span>
<span id="cb3-12">  <span class="st">"      }"</span>,</span>
<span id="cb3-13">  <span class="st">"    });"</span>,</span>
<span id="cb3-14">  <span class="st">"  }"</span>,</span>
<span id="cb3-15">  <span class="st">"}).on('dblclick', function(){table.rows().deselect();});"</span></span>
<span id="cb3-16">)</span>
<span id="cb3-17"></span>
<span id="cb3-18">ui &lt;-<span class="st"> </span><span class="kw">fluidPage</span>(</span>
<span id="cb3-19">  <span class="kw">DTOutput</span>(<span class="st">"dt"</span>)</span>
<span id="cb3-20">)</span>
<span id="cb3-21"></span>
<span id="cb3-22">server &lt;-<span class="st"> </span><span class="cf">function</span>(input, output){</span>
<span id="cb3-23">  output[[<span class="st">"dt"</span>]] &lt;-<span class="st"> </span><span class="kw">renderDT</span>({</span>
<span id="cb3-24">    dtable &lt;-<span class="st"> </span><span class="kw">datatable</span>(</span>
<span id="cb3-25">      iris, <span class="dt">extensions =</span> <span class="st">"Select"</span>, </span>
<span id="cb3-26">      <span class="dt">callback =</span> <span class="kw">JS</span>(callback), <span class="dt">selection =</span> <span class="st">"multiple"</span></span>
<span id="cb3-27">    )</span>
<span id="cb3-28">    dep &lt;-<span class="st"> </span>htmltools<span class="op">::</span><span class="kw">htmlDependency</span>(<span class="st">"jqueryui"</span>, <span class="st">"1.12.1"</span>,</span>
<span id="cb3-29">                                     <span class="st">"www/shared/jqueryui"</span>,</span>
<span id="cb3-30">                                     <span class="dt">script =</span> <span class="st">"jquery-ui.min.js"</span>,</span>
<span id="cb3-31">                                     <span class="dt">package =</span> <span class="st">"shiny"</span>)</span>
<span id="cb3-32">    dtable<span class="op">$</span>dependencies &lt;-<span class="st"> </span><span class="kw">c</span>(dtable<span class="op">$</span>dependencies, <span class="kw">list</span>(dep))</span>
<span id="cb3-33">    dtable</span>
<span id="cb3-34">  }, <span class="dt">server =</span> <span class="ot">FALSE</span>)</span>
<span id="cb3-35">}</span>
<span id="cb3-36"></span>
<span id="cb3-37"><span class="kw">shinyApp</span>(ui, server)</span></code></pre>
      </div>
      <h3 id="getting-the-selected-rows">Getting the selected rows</h3>
      <p>
        With the above code, <code>input[["dt_selected_rows"]]</code> provides
        only the rows selected by clicking, not the ones selected by dragging.
        Here is a code allowing to get both. The rows selected by clicking are
        given in <code>input[["dt_selected_rows"]]</code>, while the ones
        selected by dragging are given in
        <code>input[["dt_selected_rows2"]]</code>. There are some duplicates so
        we have to use <code>unique</code>.
      </p>
      <div class="sourceCode" id="cb4">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb4-1"><span class="kw">library</span>(shiny)</span>
<span id="cb4-2"><span class="kw">library</span>(DT)</span>
<span id="cb4-3"></span>
<span id="cb4-4">callback &lt;-<span class="st"> </span><span class="kw">c</span>(</span>
<span id="cb4-5">  <span class="st">"function distinct(value, index, self){ </span></span>
<span id="cb4-6"><span class="st">    return self.indexOf(value) === index;</span></span>
<span id="cb4-7"><span class="st">  }"</span>,</span>
<span id="cb4-8">  <span class="st">"var dt = table.table().node();"</span>,</span>
<span id="cb4-9">  <span class="st">"var tblID = $(dt).closest('.datatables').attr('id');"</span>,</span>
<span id="cb4-10">  <span class="st">"var inputName = tblID + '_rows_selected2'"</span>,</span>
<span id="cb4-11">  <span class="st">"var selected = [];"</span>,</span>
<span id="cb4-12">  <span class="st">"$(dt).selectable({"</span>,</span>
<span id="cb4-13">  <span class="st">"  distance : 10,"</span>,</span>
<span id="cb4-14">  <span class="st">"  selecting: function(evt, ui){"</span>,</span>
<span id="cb4-15">  <span class="st">"    $(this).find('tbody tr').each(function(i){"</span>,</span>
<span id="cb4-16">  <span class="st">"      if($(this).hasClass('ui-selecting')){"</span>,</span>
<span id="cb4-17">  <span class="st">"        var row = table.row(':eq(' + i + ')')"</span>,</span>
<span id="cb4-18">  <span class="st">"        row.select();"</span>,</span>
<span id="cb4-19">  <span class="st">"        var rowIndex = parseInt(row.id().split('-')[1]);"</span>,</span>
<span id="cb4-20">  <span class="st">"        selected.push(rowIndex);"</span>,</span>
<span id="cb4-21">  <span class="st">"        selected = selected.filter(distinct);"</span>,</span>
<span id="cb4-22">  <span class="st">"        Shiny.setInputValue(inputName, selected);"</span>,</span>
<span id="cb4-23">  <span class="st">"      }"</span>,</span>
<span id="cb4-24">  <span class="st">"    });"</span>,</span>
<span id="cb4-25">  <span class="st">"  }"</span>,</span>
<span id="cb4-26">  <span class="st">"}).on('dblclick', function(){table.rows().deselect();});"</span>,</span>
<span id="cb4-27">  <span class="st">"table.on('click', 'tr', function(){"</span>,</span>
<span id="cb4-28">  <span class="st">"  var row = table.row(this);"</span>,</span>
<span id="cb4-29">  <span class="st">"  if(!$(this).hasClass('selected')){"</span>,</span>
<span id="cb4-30">  <span class="st">"    var rowIndex = parseInt(row.id().split('-')[1]);"</span>,</span>
<span id="cb4-31">  <span class="st">"    var index = selected.indexOf(rowIndex);"</span>,</span>
<span id="cb4-32">  <span class="st">"    if(index &gt; -1){"</span>,</span>
<span id="cb4-33">  <span class="st">"       selected.splice(index, 1);"</span>,</span>
<span id="cb4-34">  <span class="st">"    }"</span>,</span>
<span id="cb4-35">  <span class="st">"  }"</span>,</span>
<span id="cb4-36">  <span class="st">"  Shiny.setInputValue(inputName, selected);"</span>,</span>
<span id="cb4-37">  <span class="st">"});"</span></span>
<span id="cb4-38">)</span>
<span id="cb4-39"></span>
<span id="cb4-40">ui &lt;-<span class="st"> </span><span class="kw">fluidPage</span>(</span>
<span id="cb4-41">  <span class="kw">DTOutput</span>(<span class="st">"dt"</span>),</span>
<span id="cb4-42">  <span class="kw">br</span>(),</span>
<span id="cb4-43">  <span class="kw">verbatimTextOutput</span>(<span class="st">"selectedRows"</span>)</span>
<span id="cb4-44">)</span>
<span id="cb4-45"></span>
<span id="cb4-46">dat &lt;-<span class="st"> </span>iris</span>
<span id="cb4-47">dat<span class="op">$</span>ROWID &lt;-<span class="st"> </span><span class="kw">paste0</span>(<span class="st">"row-"</span>, <span class="dv">1</span><span class="op">:</span><span class="kw">nrow</span>(dat))</span>
<span id="cb4-48"></span>
<span id="cb4-49">rowNames &lt;-<span class="st"> </span><span class="ot">TRUE</span> <span class="co"># whether to show row names in the table</span></span>
<span id="cb4-50">colIndex &lt;-<span class="st"> </span><span class="kw">as.integer</span>(rowNames)</span>
<span id="cb4-51"></span>
<span id="cb4-52">server &lt;-<span class="st"> </span><span class="cf">function</span>(input, output){</span>
<span id="cb4-53">  output[[<span class="st">"dt"</span>]] &lt;-<span class="st"> </span><span class="kw">renderDT</span>({</span>
<span id="cb4-54">    dtable &lt;-<span class="st"> </span><span class="kw">datatable</span>(</span>
<span id="cb4-55">      dat, <span class="dt">rownames =</span> rowNames,  </span>
<span id="cb4-56">      <span class="dt">extensions =</span> <span class="st">"Select"</span>, </span>
<span id="cb4-57">      <span class="dt">callback =</span> <span class="kw">JS</span>(callback),</span>
<span id="cb4-58">      <span class="dt">selection =</span> <span class="st">"multiple"</span>, </span>
<span id="cb4-59">      <span class="dt">options =</span> <span class="kw">list</span>(</span>
<span id="cb4-60">        <span class="dt">rowId =</span> <span class="kw">JS</span>(<span class="kw">sprintf</span>(<span class="st">"function(data){return data[%d];}"</span>, </span>
<span id="cb4-61">                           <span class="kw">ncol</span>(dat)<span class="op">-</span>1L<span class="op">+</span>colIndex)),</span>
<span id="cb4-62">        <span class="dt">columnDefs =</span> <span class="kw">list</span>( <span class="co"># hide the ROWID column</span></span>
<span id="cb4-63">          <span class="kw">list</span>(<span class="dt">visible =</span> <span class="ot">FALSE</span>, <span class="dt">targets =</span> <span class="kw">ncol</span>(dat)<span class="op">-</span>1L<span class="op">+</span>colIndex)</span>
<span id="cb4-64">        )</span>
<span id="cb4-65">      )</span>
<span id="cb4-66">    )</span>
<span id="cb4-67">    dep &lt;-<span class="st"> </span>htmltools<span class="op">::</span><span class="kw">htmlDependency</span>(<span class="st">"jqueryui"</span>, <span class="st">"1.12.1"</span>,</span>
<span id="cb4-68">                                     <span class="st">"www/shared/jqueryui"</span>,</span>
<span id="cb4-69">                                     <span class="dt">script =</span> <span class="st">"jquery-ui.min.js"</span>,</span>
<span id="cb4-70">                                     <span class="dt">package =</span> <span class="st">"shiny"</span>)</span>
<span id="cb4-71">    dtable<span class="op">$</span>dependencies &lt;-<span class="st"> </span><span class="kw">c</span>(dtable<span class="op">$</span>dependencies, <span class="kw">list</span>(dep))</span>
<span id="cb4-72">    dtable</span>
<span id="cb4-73">  }, <span class="dt">server =</span> <span class="ot">FALSE</span>)</span>
<span id="cb4-74">  </span>
<span id="cb4-75">  selectedRows &lt;-<span class="st"> </span><span class="kw">reactive</span>({</span>
<span id="cb4-76">    <span class="kw">unique</span>(</span>
<span id="cb4-77">      <span class="kw">c</span>(input[[<span class="st">"dt_rows_selected"</span>]], input[[<span class="st">"dt_rows_selected2"</span>]])</span>
<span id="cb4-78">    )</span>
<span id="cb4-79">  })</span>
<span id="cb4-80">  </span>
<span id="cb4-81">  output[[<span class="st">"selectedRows"</span>]] &lt;-<span class="st"> </span><span class="kw">renderText</span>({</span>
<span id="cb4-82">    <span class="kw">selectedRows</span>()</span>
<span id="cb4-83">  })</span>
<span id="cb4-84">}</span>
<span id="cb4-85"></span>
<span id="cb4-86"><span class="kw">shinyApp</span>(ui, server)</span></code></pre>
      </div>
      <h1 id="edit-columns-headers">Edit columns headers</h1>
      <p>
        This callback uses the <code>jQuery contextMenu</code> library. It
        allows to edit a column header by right-clicking on it. When done, press
        ‘Escape’ or move the mouse.
      </p>
      <div class="sourceCode" id="cb5">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb5-1"><span class="kw">library</span>(shiny)</span>
<span id="cb5-2"><span class="kw">library</span>(DT)</span>
<span id="cb5-3"></span>
<span id="cb5-4">callback &lt;-<span class="st"> </span><span class="kw">c</span>(</span>
<span id="cb5-5">  <span class="st">"$.contextMenu({"</span>,</span>
<span id="cb5-6">  <span class="st">"  selector: '#table th',"</span>, </span>
<span id="cb5-7">  <span class="st">"  trigger: 'right',"</span>,</span>
<span id="cb5-8">  <span class="st">"  autoHide: true,"</span>,</span>
<span id="cb5-9">  <span class="st">"  items: {"</span>,</span>
<span id="cb5-10">  <span class="st">"    text: {"</span>,</span>
<span id="cb5-11">  <span class="st">"      name: 'Enter column header:',"</span>, </span>
<span id="cb5-12">  <span class="st">"      type: 'text',"</span>, </span>
<span id="cb5-13">  <span class="st">"      value: ''"</span>, </span>
<span id="cb5-14">  <span class="st">"    }"</span>,</span>
<span id="cb5-15">  <span class="st">"  },"</span>,</span>
<span id="cb5-16">  <span class="st">"  events: {"</span>,</span>
<span id="cb5-17">  <span class="st">"    show: function(opts){"</span>,</span>
<span id="cb5-18">  <span class="st">"      $.contextMenu.setInputValues(opts, {text: opts.$trigger.text()});"</span>,</span>
<span id="cb5-19">  <span class="st">"    },"</span>,</span>
<span id="cb5-20">  <span class="st">"    hide: function(opts){"</span>,</span>
<span id="cb5-21">  <span class="st">"      var $this = this;"</span>,</span>
<span id="cb5-22">  <span class="st">"      var data = $.contextMenu.getInputValues(opts, $this.data());"</span>,</span>
<span id="cb5-23">  <span class="st">"      var $th = opts.$trigger;"</span>,</span>
<span id="cb5-24">  <span class="st">"      $th.text(data.text);"</span>,</span>
<span id="cb5-25">  <span class="st">"    }"</span>,</span>
<span id="cb5-26">  <span class="st">"  }"</span>,</span>
<span id="cb5-27">  <span class="st">"});"</span> </span>
<span id="cb5-28">)</span>
<span id="cb5-29"></span>
<span id="cb5-30">ui &lt;-<span class="st"> </span><span class="kw">fluidPage</span>(</span>
<span id="cb5-31">  tags<span class="op">$</span><span class="kw">head</span>(</span>
<span id="cb5-32">    tags<span class="op">$</span><span class="kw">link</span>(</span>
<span id="cb5-33">      <span class="dt">rel =</span> <span class="st">"stylesheet"</span>, </span>
<span id="cb5-34">      <span class="dt">href =</span> <span class="st">"https://cdnjs.cloudflare.com/ajax/libs/jquery-contextmenu/2.8.0/jquery.contextMenu.min.css"</span></span>
<span id="cb5-35">    ),</span>
<span id="cb5-36">    tags<span class="op">$</span><span class="kw">script</span>(</span>
<span id="cb5-37">      <span class="dt">src =</span> <span class="st">"https://cdnjs.cloudflare.com/ajax/libs/jquery-contextmenu/2.8.0/jquery.contextMenu.min.js"</span></span>
<span id="cb5-38">    )</span>
<span id="cb5-39">  ),</span>
<span id="cb5-40">  <span class="kw">DTOutput</span>(<span class="st">"table"</span>)</span>
<span id="cb5-41">)</span>
<span id="cb5-42"></span>
<span id="cb5-43">server &lt;-<span class="st"> </span><span class="cf">function</span>(input, output){</span>
<span id="cb5-44">  output[[<span class="st">"table"</span>]] &lt;-<span class="st"> </span><span class="kw">renderDT</span>({</span>
<span id="cb5-45">    <span class="kw">datatable</span>(iris, <span class="dt">callback =</span> <span class="kw">JS</span>(callback))</span>
<span id="cb5-46">  }, <span class="dt">server =</span> <span class="ot">FALSE</span>)  </span>
<span id="cb5-47">}</span>
<span id="cb5-48"></span>
<span id="cb5-49"><span class="kw">shinyApp</span>(ui, server)</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/DTcallback_editHeaders.png"
        />
      </p>
      <h1 id="child-tables">Child tables</h1>
      <p>
        This callback allows to display child tables in the table. The indices
        of the selected rows of the child tables are sent to the Shiny server.
      </p>
      <div class="sourceCode" id="cb6">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb6-1"><span class="kw">library</span>(shiny)</span>
<span id="cb6-2"><span class="kw">library</span>(DT)</span>
<span id="cb6-3"><span class="kw">library</span>(jsonlite)</span>
<span id="cb6-4"></span>
<span id="cb6-5"><span class="co">## data ####</span></span>
<span id="cb6-6">dat &lt;-<span class="st"> </span><span class="kw">data.frame</span>(</span>
<span id="cb6-7">  <span class="dt">Sr =</span> <span class="kw">c</span>(<span class="fl">1.5</span>, <span class="fl">2.3</span>),</span>
<span id="cb6-8">  <span class="dt">Description =</span> <span class="kw">c</span>(<span class="st">"A - B"</span>, <span class="st">"X - Y"</span>)</span>
<span id="cb6-9">)</span>
<span id="cb6-10"><span class="co">## details of row 1</span></span>
<span id="cb6-11">subdat1 &lt;-<span class="st"> </span><span class="kw">data.frame</span>(</span>
<span id="cb6-12">  <span class="dt">Chromosome =</span> <span class="st">"chr18"</span>, </span>
<span id="cb6-13">  <span class="dt">SNP =</span> <span class="st">"rs2"</span>,</span>
<span id="cb6-14">  <span class="dt">stringsAsFactors =</span> <span class="ot">FALSE</span></span>
<span id="cb6-15">)</span>
<span id="cb6-16"><span class="co">## details of row 2</span></span>
<span id="cb6-17">subdat2 &lt;-<span class="st"> </span><span class="kw">data.frame</span>(</span>
<span id="cb6-18">  <span class="dt">Chromosome =</span> <span class="kw">c</span>(<span class="st">"chr19"</span>,<span class="st">"chr20"</span>), </span>
<span id="cb6-19">  <span class="dt">SNP =</span> <span class="kw">c</span>(<span class="st">"rs3"</span>,<span class="st">"rs4"</span>), </span>
<span id="cb6-20">  <span class="dt">stringsAsFactors =</span> <span class="ot">FALSE</span></span>
<span id="cb6-21">)</span>
<span id="cb6-22"><span class="co">## merge the row details</span></span>
<span id="cb6-23">subdats &lt;-<span class="st"> </span><span class="kw">lapply</span>(<span class="kw">list</span>(subdat1, subdat2), purrr<span class="op">::</span>transpose)</span>
<span id="cb6-24"><span class="co">## dataframe for the datatable</span></span>
<span id="cb6-25">Dat &lt;-<span class="st"> </span><span class="kw">cbind</span>(<span class="st">" "</span> =<span class="st"> "expand"</span>, dat, <span class="dt">details =</span> <span class="kw">I</span>(subdats))</span>
<span id="cb6-26"></span>
<span id="cb6-27"><span class="co">## the callback ####</span></span>
<span id="cb6-28"><span class="kw">registerInputHandler</span>(<span class="st">"x.child"</span>, <span class="cf">function</span>(x, ...) {</span>
<span id="cb6-29">  <span class="kw">fromJSON</span>(<span class="kw">toJSON</span>(x, <span class="dt">auto_unbox =</span> <span class="ot">TRUE</span>, <span class="dt">null =</span> <span class="st">"null"</span>), </span>
<span id="cb6-30">           <span class="dt">simplifyDataFrame =</span> <span class="ot">FALSE</span>)</span>
<span id="cb6-31">}, <span class="dt">force =</span> <span class="ot">TRUE</span>)</span>
<span id="cb6-32"></span>
<span id="cb6-33">callback =<span class="st"> </span><span class="kw">JS</span>(</span>
<span id="cb6-34">  <span class="st">"var expandColumn = table.column(0).data()[0] === 'plus-sign' ? 0 : 1;"</span>,</span>
<span id="cb6-35">  <span class="st">"table.column(expandColumn).nodes().to$().css({cursor: 'pointer'});"</span>,</span>
<span id="cb6-36">  <span class="st">""</span>,</span>
<span id="cb6-37">  <span class="st">"// send selected columns of the main table to Shiny"</span>,</span>
<span id="cb6-38">  <span class="st">"var tbl = table.table().node();"</span>,</span>
<span id="cb6-39">  <span class="st">"var tblId = $(tbl).closest('.datatables').attr('id');"</span>,</span>
<span id="cb6-40">  <span class="st">"var selector = 'td:not(:nth-child(' + (expandColumn+1) + '))';"</span>,</span>
<span id="cb6-41">  <span class="st">"table.on('click', selector, function(){"</span>,</span>
<span id="cb6-42">  <span class="st">"  setTimeout(function(){"</span>,</span>
<span id="cb6-43">  <span class="st">"    var indexes = table.rows({selected:true}).indexes();"</span>,</span>
<span id="cb6-44">  <span class="st">"    var indices = Array(indexes.length);"</span>,</span>
<span id="cb6-45">  <span class="st">"    for(var i = 0; i &lt; indices.length; ++i){"</span>,</span>
<span id="cb6-46">  <span class="st">"      indices[i] = indexes[i];"</span>,</span>
<span id="cb6-47">  <span class="st">"    }"</span>,</span>
<span id="cb6-48">  <span class="st">"    Shiny.setInputValue(tblId + '_rows_selected', indices);"</span>,</span>
<span id="cb6-49">  <span class="st">"  },0);"</span>,</span>
<span id="cb6-50">  <span class="st">"});"</span>,</span>
<span id="cb6-51">  <span class="st">""</span>,</span>
<span id="cb6-52">  <span class="st">"// make the table header of the nested table"</span>,</span>
<span id="cb6-53">  <span class="st">"var format = function(d, childId){"</span>,</span>
<span id="cb6-54">  <span class="st">"  if(d != null){"</span>,</span>
<span id="cb6-55">  <span class="st">"    var html = '&lt;table class=</span><span class="ch">\"</span><span class="st">compact hover</span><span class="ch">\"</span><span class="st"> id=</span><span class="ch">\"</span><span class="st">' + "</span>, </span>
<span id="cb6-56">  <span class="st">"                childId + '</span><span class="ch">\"</span><span class="st">&gt;&lt;thead&gt;&lt;tr&gt;';"</span>,</span>
<span id="cb6-57">  <span class="st">"    for(var key in d[d.length-1][0]){"</span>,</span>
<span id="cb6-58">  <span class="st">"      html += '&lt;th&gt;' + key + '&lt;/th&gt;';"</span>,</span>
<span id="cb6-59">  <span class="st">"    }"</span>,</span>
<span id="cb6-60">  <span class="st">"    html += '&lt;/tr&gt;&lt;/thead&gt;&lt;/table&gt;'"</span>,</span>
<span id="cb6-61">  <span class="st">"    return html;"</span>,</span>
<span id="cb6-62">  <span class="st">"  } else {"</span>,</span>
<span id="cb6-63">  <span class="st">"    return '';"</span>,</span>
<span id="cb6-64">  <span class="st">"  }"</span>,</span>
<span id="cb6-65">  <span class="st">"};"</span>,</span>
<span id="cb6-66">  <span class="st">""</span>,</span>
<span id="cb6-67">  <span class="st">"// row callback to style the rows background colors of the child tables"</span>,</span>
<span id="cb6-68">  <span class="st">"var rowCallback = function(row, dat, displayNum, index){"</span>,</span>
<span id="cb6-69">  <span class="st">"  if($(row).hasClass('odd')){"</span>,</span>
<span id="cb6-70">  <span class="st">"    $(row).css('background-color', 'papayawhip');"</span>,</span>
<span id="cb6-71">  <span class="st">"    $(row).hover(function(){"</span>,</span>
<span id="cb6-72">  <span class="st">"      $(this).css('background-color', '#E6FF99');"</span>,</span>
<span id="cb6-73">  <span class="st">"    }, function() {"</span>,</span>
<span id="cb6-74">  <span class="st">"      $(this).css('background-color', 'papayawhip');"</span>,</span>
<span id="cb6-75">  <span class="st">"    });"</span>,</span>
<span id="cb6-76">  <span class="st">"  } else {"</span>,</span>
<span id="cb6-77">  <span class="st">"    $(row).css('background-color', 'lemonchiffon');"</span>,</span>
<span id="cb6-78">  <span class="st">"    $(row).hover(function(){"</span>,</span>
<span id="cb6-79">  <span class="st">"      $(this).css('background-color', '#DDFF75');"</span>,</span>
<span id="cb6-80">  <span class="st">"    }, function() {"</span>,</span>
<span id="cb6-81">  <span class="st">"      $(this).css('background-color', 'lemonchiffon');"</span>,</span>
<span id="cb6-82">  <span class="st">"    });"</span>,</span>
<span id="cb6-83">  <span class="st">"  }"</span>,</span>
<span id="cb6-84">  <span class="st">"};"</span>,</span>
<span id="cb6-85">  <span class="st">""</span>,</span>
<span id="cb6-86">  <span class="st">"// header callback to style the header of the child tables"</span>,</span>
<span id="cb6-87">  <span class="st">"var headerCallback = function(thead, data, start, end, display){"</span>,</span>
<span id="cb6-88">  <span class="st">"  $('th', thead).css({"</span>,</span>
<span id="cb6-89">  <span class="st">"    'border-top': '3px solid indigo',"</span>, </span>
<span id="cb6-90">  <span class="st">"    'color': 'indigo',"</span>,</span>
<span id="cb6-91">  <span class="st">"    'background-color': '#fadadd'"</span>,</span>
<span id="cb6-92">  <span class="st">"  });"</span>,</span>
<span id="cb6-93">  <span class="st">"};"</span>,</span>
<span id="cb6-94">  <span class="st">""</span>,</span>
<span id="cb6-95">  <span class="st">"// make the child table"</span>,</span>
<span id="cb6-96">  <span class="st">"var format_datatable = function(d, childId){"</span>,</span>
<span id="cb6-97">  <span class="st">"  var dataset = [];"</span>,</span>
<span id="cb6-98">  <span class="st">"  var n = d.length - 1;"</span>,</span>
<span id="cb6-99">  <span class="st">"  for(var i = 0; i &lt; d[n].length; i++){"</span>,</span>
<span id="cb6-100">  <span class="st">"    var datarow = $.map(d[n][i], function(value, index){"</span>,</span>
<span id="cb6-101">  <span class="st">"      return [value];"</span>,</span>
<span id="cb6-102">  <span class="st">"    });"</span>,</span>
<span id="cb6-103">  <span class="st">"    dataset.push(datarow);"</span>,</span>
<span id="cb6-104">  <span class="st">"  }"</span>,</span>
<span id="cb6-105">  <span class="st">"  var id = 'table#' + childId;"</span>,</span>
<span id="cb6-106">  <span class="st">"  var subtable = $(id).DataTable({"</span>,</span>
<span id="cb6-107">  <span class="st">"             'data': dataset,"</span>,</span>
<span id="cb6-108">  <span class="st">"             'autoWidth': true,"</span>,</span>
<span id="cb6-109">  <span class="st">"             'deferRender': true,"</span>,</span>
<span id="cb6-110">  <span class="st">"             'info': false,"</span>,</span>
<span id="cb6-111">  <span class="st">"             'lengthChange': false,"</span>,</span>
<span id="cb6-112">  <span class="st">"             'ordering': d[n].length &gt; 1,"</span>,</span>
<span id="cb6-113">  <span class="st">"             'order': [],"</span>,</span>
<span id="cb6-114">  <span class="st">"             'paging': false,"</span>,</span>
<span id="cb6-115">  <span class="st">"             'scrollX': false,"</span>,</span>
<span id="cb6-116">  <span class="st">"             'scrollY': false,"</span>,</span>
<span id="cb6-117">  <span class="st">"             'searching': false,"</span>,</span>
<span id="cb6-118">  <span class="st">"             'sortClasses': false,"</span>,</span>
<span id="cb6-119">  <span class="st">"             'rowCallback': rowCallback,"</span>,</span>
<span id="cb6-120">  <span class="st">"             'headerCallback': headerCallback,"</span>,</span>
<span id="cb6-121">  <span class="st">"             'select': {style: 'multi'},"</span>,</span>
<span id="cb6-122">  <span class="st">"             'columnDefs': [{targets: '_all', className: 'dt-center'}]"</span>,</span>
<span id="cb6-123">  <span class="st">"           });"</span>,</span>
<span id="cb6-124">  <span class="st">"};"</span>,</span>
<span id="cb6-125">  <span class="st">""</span>,</span>
<span id="cb6-126">  <span class="st">"// send selected rows of the children tables to shiny server"</span>,</span>
<span id="cb6-127">  <span class="st">"var nrows = table.rows().count();"</span>,</span>
<span id="cb6-128">  <span class="st">"var nullinfo = Array(nrows);"</span>,</span>
<span id="cb6-129">  <span class="st">"for(var i = 0; i &lt; nrows; ++i){"</span>,</span>
<span id="cb6-130">  <span class="st">"  nullinfo[i] = {row: i, selected: null};"</span>,</span>
<span id="cb6-131">  <span class="st">"}"</span>,</span>
<span id="cb6-132">  <span class="st">"Shiny.setInputValue(tblId + '_children:x.child', nullinfo);"</span>,</span>
<span id="cb6-133">  <span class="st">"var sendToR = function(){"</span>,</span>
<span id="cb6-134">  <span class="st">"  var info = [];"</span>,</span>
<span id="cb6-135">  <span class="st">"  setTimeout(function(){"</span>,</span>
<span id="cb6-136">  <span class="st">"    for(var i = 0; i &lt; nrows; ++i){"</span>,</span>
<span id="cb6-137">  <span class="st">"      var childId = 'child-' + i;"</span>,</span>
<span id="cb6-138">  <span class="st">"      var childtbl = $('#'+childId).DataTable();"</span>,</span>
<span id="cb6-139">  <span class="st">"      var indexes = childtbl.rows({selected:true}).indexes();"</span>,</span>
<span id="cb6-140">  <span class="st">"      var indices;"</span>,</span>
<span id="cb6-141">  <span class="st">"      if(indexes.length &gt; 0){"</span>,</span>
<span id="cb6-142">  <span class="st">"        indices = Array(indexes.length);"</span>,</span>
<span id="cb6-143">  <span class="st">"        for(var j = 0; j &lt; indices.length; ++j){"</span>,</span>
<span id="cb6-144">  <span class="st">"          indices[j] = indexes[j];"</span>,</span>
<span id="cb6-145">  <span class="st">"        }"</span>,</span>
<span id="cb6-146">  <span class="st">"      } else {"</span>,</span>
<span id="cb6-147">  <span class="st">"        indices = null;"</span>,</span>
<span id="cb6-148">  <span class="st">"      }"</span>,</span>
<span id="cb6-149">  <span class="st">"      info.push({row: i, selected: indices});"</span>,</span>
<span id="cb6-150">  <span class="st">"    }"</span>,</span>
<span id="cb6-151">  <span class="st">"    Shiny.setInputValue(tblId + '_children:x.child', info);"</span>,</span>
<span id="cb6-152">  <span class="st">"  }, 0);"</span>,</span>
<span id="cb6-153">  <span class="st">"}"</span>,</span>
<span id="cb6-154">  <span class="st">"$('body').on('click', '[id^=child-] td', sendToR);"</span>,</span>
<span id="cb6-155">  <span class="st">""</span>,</span>
<span id="cb6-156">  <span class="st">"// click event to show/hide the child tables"</span>,</span>
<span id="cb6-157">  <span class="st">"table.on('click', 'td.details-control', function () {"</span>,</span>
<span id="cb6-158">  <span class="st">"  var cell = table.cell(this);"</span>,</span>
<span id="cb6-159">  <span class="st">"      row = table.row($(this).closest('tr'));"</span>,</span>
<span id="cb6-160">  <span class="st">"  if(row.child.isShown()){"</span>,</span>
<span id="cb6-161">  <span class="st">"    row.child.hide();"</span>,</span>
<span id="cb6-162">  <span class="st">"    cell.data('expand');"</span>,</span>
<span id="cb6-163">  <span class="st">"    sendToR();"</span>,</span>
<span id="cb6-164">  <span class="st">"  } else {"</span>,</span>
<span id="cb6-165">  <span class="st">"    var childId = 'child-' + row.index();"</span>,</span>
<span id="cb6-166">  <span class="st">"    row.child(format(row.data(), childId)).show();"</span>,</span>
<span id="cb6-167">  <span class="st">"    row.child.show();"</span>,</span>
<span id="cb6-168">  <span class="st">"    cell.data('collapse-down');"</span>,</span>
<span id="cb6-169">  <span class="st">"    format_datatable(row.data(), childId);"</span>,</span>
<span id="cb6-170">  <span class="st">"  }"</span>,</span>
<span id="cb6-171">  <span class="st">"});"</span>)</span>
<span id="cb6-172"></span>
<span id="cb6-173"><span class="co">## render function, to display the glyphicons ####</span></span>
<span id="cb6-174">render &lt;-<span class="st"> </span><span class="kw">c</span>(</span>
<span id="cb6-175">  <span class="st">"function(data, type, row, meta){"</span>,</span>
<span id="cb6-176">  <span class="st">"  if(type === 'display'){"</span>,</span>
<span id="cb6-177">  <span class="st">"    return '&lt;span style=</span><span class="ch">\\\"</span><span class="st">color:black; font-size:18px</span><span class="ch">\\\"</span><span class="st">&gt;' + "</span>,</span>
<span id="cb6-178">  <span class="st">"       '&lt;i class=</span><span class="ch">\\\"</span><span class="st">glyphicon glyphicon-' + data + '</span><span class="ch">\\\"</span><span class="st">&gt;&lt;/i&gt;&lt;/span&gt;';"</span>,</span>
<span id="cb6-179">  <span class="st">"  } else {"</span>,</span>
<span id="cb6-180">  <span class="st">"    return data;"</span>,</span>
<span id="cb6-181">  <span class="st">"  }"</span>,</span>
<span id="cb6-182">  <span class="st">"}"</span></span>
<span id="cb6-183">)</span>
<span id="cb6-184"></span>
<span id="cb6-185"><span class="co">## shiny app ####</span></span>
<span id="cb6-186">ui &lt;-<span class="st"> </span><span class="kw">fluidPage</span>(</span>
<span id="cb6-187">  <span class="kw">DTOutput</span>(<span class="st">"table"</span>),</span>
<span id="cb6-188">  <span class="kw">br</span>(),</span>
<span id="cb6-189">  <span class="kw">fluidRow</span>(</span>
<span id="cb6-190">    <span class="kw">column</span>(<span class="dv">6</span>, </span>
<span id="cb6-191">           tags<span class="op">$</span><span class="kw">label</span>(<span class="st">"Selected row(s) of main table:"</span>),</span>
<span id="cb6-192">           <span class="kw">verbatimTextOutput</span>(<span class="st">"info-main"</span>)</span>
<span id="cb6-193">    ),</span>
<span id="cb6-194">    <span class="kw">column</span>(<span class="dv">6</span>, </span>
<span id="cb6-195">           tags<span class="op">$</span><span class="kw">label</span>(<span class="st">"Selected row(s) of child tables:"</span>),</span>
<span id="cb6-196">           <span class="kw">verbatimTextOutput</span>(<span class="st">"info-children"</span>)</span>
<span id="cb6-197">    )</span>
<span id="cb6-198">  )</span>
<span id="cb6-199">)</span>
<span id="cb6-200"></span>
<span id="cb6-201">server &lt;-<span class="st"> </span><span class="cf">function</span>(input, output){</span>
<span id="cb6-202">  output[[<span class="st">"table"</span>]] &lt;-<span class="st"> </span><span class="kw">renderDT</span>({</span>
<span id="cb6-203">    <span class="kw">datatable</span>(Dat, <span class="dt">callback =</span> callback, <span class="dt">escape =</span> <span class="dv">-2</span>, </span>
<span id="cb6-204">              <span class="dt">extensions =</span> <span class="st">"Select"</span>, <span class="dt">selection =</span> <span class="st">"none"</span>,</span>
<span id="cb6-205">              <span class="dt">options =</span> <span class="kw">list</span>(</span>
<span id="cb6-206">                <span class="dt">select =</span> <span class="kw">list</span>(<span class="dt">style =</span> <span class="st">"multi"</span>, <span class="dt">selector =</span> <span class="st">".selectable"</span>),</span>
<span id="cb6-207">                <span class="dt">autoWidth =</span> <span class="ot">FALSE</span>,</span>
<span id="cb6-208">                <span class="dt">columnDefs =</span> <span class="kw">list</span>(</span>
<span id="cb6-209">                  <span class="kw">list</span>(<span class="dt">className =</span> <span class="st">"selectable dt-center"</span>, </span>
<span id="cb6-210">                       <span class="dt">targets =</span> <span class="kw">c</span>(<span class="dv">0</span>, <span class="dv">2</span><span class="op">:</span><span class="kw">ncol</span>(Dat))),</span>
<span id="cb6-211">                  <span class="kw">list</span>(<span class="dt">visible =</span> <span class="ot">FALSE</span>, <span class="dt">targets =</span> <span class="kw">ncol</span>(Dat)),</span>
<span id="cb6-212">                  <span class="kw">list</span>(<span class="dt">orderable =</span> <span class="ot">FALSE</span>, <span class="dt">className =</span> <span class="st">'details-control'</span>, </span>
<span id="cb6-213">                       <span class="dt">width =</span> <span class="st">"10px"</span>, <span class="dt">render =</span> <span class="kw">JS</span>(render), <span class="dt">targets =</span> <span class="dv">1</span>),</span>
<span id="cb6-214">                  <span class="kw">list</span>(<span class="dt">className =</span> <span class="st">"dt-center"</span>, <span class="dt">targets =</span> <span class="st">"_all"</span>)</span>
<span id="cb6-215">                )</span>
<span id="cb6-216">              )</span>
<span id="cb6-217">    )</span>
<span id="cb6-218">  }, <span class="dt">server =</span> <span class="ot">FALSE</span>)</span>
<span id="cb6-219">  </span>
<span id="cb6-220">  output[[<span class="st">"info-main"</span>]] &lt;-<span class="st"> </span><span class="kw">renderText</span>({</span>
<span id="cb6-221">    <span class="kw">capture.output</span>(input[[<span class="st">"table_rows_selected"</span>]])</span>
<span id="cb6-222">  })</span>
<span id="cb6-223">  </span>
<span id="cb6-224">  output[[<span class="st">"info-children"</span>]] &lt;-<span class="st"> </span><span class="kw">renderText</span>({</span>
<span id="cb6-225">    <span class="kw">paste0</span>(<span class="kw">capture.output</span>(input[[<span class="st">"table_children"</span>]]), <span class="dt">collapse =</span> <span class="st">"</span><span class="ch">\n</span><span class="st">"</span>)</span>
<span id="cb6-226">  })</span>
<span id="cb6-227">  </span>
<span id="cb6-228">}</span>
<span id="cb6-229"></span>
<span id="cb6-230"><span class="kw">shinyApp</span>(ui, server)</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/DTcallback_childTables.png"
        />
      </p>
      <h1 id="change-row-css-properties-on-clicking-an-icon">
        Change row CSS properties on clicking an icon
      </h1>
      <p>
        This callback allows to change the CSS properties of a row by clicking
        an icon. The indices of the altered rows are sent to the Shiny server.
      </p>
      <div class="sourceCode" id="cb7">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb7-1"><span class="kw">library</span>(shiny)</span>
<span id="cb7-2"><span class="kw">library</span>(DT)</span>
<span id="cb7-3"></span>
<span id="cb7-4">rowNames &lt;-<span class="st"> </span><span class="ot">TRUE</span> <span class="co"># whether to show row names in the table</span></span>
<span id="cb7-5">colIndex &lt;-<span class="st"> </span><span class="kw">as.integer</span>(rowNames)</span>
<span id="cb7-6"></span>
<span id="cb7-7">callback &lt;-<span class="st"> </span><span class="kw">c</span>(</span>
<span id="cb7-8">  <span class="kw">sprintf</span>(<span class="st">"table.on('click', 'td:nth-child(%d)', function(){"</span>, colIndex<span class="op">+</span><span class="dv">1</span>),</span>
<span id="cb7-9">  <span class="st">"  var td = this;"</span>,</span>
<span id="cb7-10">  <span class="st">"  var cell = table.cell(td);"</span>,</span>
<span id="cb7-11">  <span class="st">"  if(cell.data() === 'ok'){"</span>,</span>
<span id="cb7-12">  <span class="st">"    cell.data('remove');"</span>,</span>
<span id="cb7-13">  <span class="st">"  } else {"</span>,</span>
<span id="cb7-14">  <span class="st">"    cell.data('ok');"</span>,</span>
<span id="cb7-15">  <span class="st">"  }"</span>,</span>
<span id="cb7-16">  <span class="st">"  var $row = $(td).closest('tr');"</span>,</span>
<span id="cb7-17">  <span class="st">"  $row.toggleClass('excluded');"</span>,</span>
<span id="cb7-18">  <span class="st">"  var excludedRows = [];"</span>,</span>
<span id="cb7-19">  <span class="st">"  table.$('tr').each(function(i, row){"</span>,</span>
<span id="cb7-20">  <span class="st">"    if($(this).hasClass('excluded')){"</span>,</span>
<span id="cb7-21">  <span class="st">"      excludedRows.push(parseInt($(row).attr('id').split('_')[1]));"</span>,</span>
<span id="cb7-22">  <span class="st">"    }"</span>,</span>
<span id="cb7-23">  <span class="st">"  });"</span>,</span>
<span id="cb7-24">  <span class="st">"  Shiny.setInputValue('excludedRows', excludedRows);"</span>,</span>
<span id="cb7-25">  <span class="st">"})"</span></span>
<span id="cb7-26">)</span>
<span id="cb7-27"></span>
<span id="cb7-28">restore &lt;-<span class="st"> </span><span class="kw">c</span>(</span>
<span id="cb7-29">  <span class="st">"function(e, table, node, config) {"</span>,</span>
<span id="cb7-30">  <span class="st">"  table.$('tr').removeClass('excluded').each(function(){"</span>,</span>
<span id="cb7-31">  <span class="kw">sprintf</span>(<span class="st">"    var td = $(this).find('td').eq(%d)[0];"</span>, colIndex), </span>
<span id="cb7-32">  <span class="st">"    var cell = table.cell(td);"</span>, </span>
<span id="cb7-33">  <span class="st">"    cell.data('ok');"</span>,</span>
<span id="cb7-34">  <span class="st">"  });"</span>,</span>
<span id="cb7-35">  <span class="st">"  Shiny.setInputValue('excludedRows', null);"</span>,</span>
<span id="cb7-36">  <span class="st">"}"</span></span>
<span id="cb7-37">)</span>
<span id="cb7-38"></span>
<span id="cb7-39">render &lt;-<span class="st"> </span><span class="kw">c</span>(</span>
<span id="cb7-40">  <span class="st">'function(data, type, row, meta){'</span>,</span>
<span id="cb7-41">  <span class="st">'  if(type === "display"){'</span>,</span>
<span id="cb7-42">  <span class="st">'    var color = data === "ok" ? "forestgreen" : "red";'</span>,</span>
<span id="cb7-43">  <span class="st">'    return "&lt;span style=</span><span class="ch">\\\"</span><span class="st">color:" + color +'</span>,</span>
<span id="cb7-44">  <span class="st">'           "; font-size:18px</span><span class="ch">\\\"</span><span class="st">&gt;&lt;i class=</span><span class="ch">\\\"</span><span class="st">glyphicon glyphicon-" +'</span>, </span>
<span id="cb7-45">  <span class="st">'           data + "</span><span class="ch">\\\"</span><span class="st">&gt;&lt;/i&gt;&lt;/span&gt;";'</span>,</span>
<span id="cb7-46">  <span class="st">'  } else {'</span>,</span>
<span id="cb7-47">  <span class="st">'    return data;'</span>,</span>
<span id="cb7-48">  <span class="st">'  }'</span>,</span>
<span id="cb7-49">  <span class="st">'}'</span></span>
<span id="cb7-50">)</span>
<span id="cb7-51"></span>
<span id="cb7-52">ui &lt;-<span class="st"> </span><span class="kw">fluidPage</span>(</span>
<span id="cb7-53">  tags<span class="op">$</span><span class="kw">head</span>(</span>
<span id="cb7-54">    tags<span class="op">$</span><span class="kw">style</span>(<span class="kw">HTML</span>(</span>
<span id="cb7-55">      <span class="st">".excluded { color: rgb(211,211,211); font-style: italic; }"</span></span>
<span id="cb7-56">    ))</span>
<span id="cb7-57">  ),</span>
<span id="cb7-58">  <span class="kw">fluidRow</span>(</span>
<span id="cb7-59">    <span class="kw">column</span>(</span>
<span id="cb7-60">      <span class="dv">6</span>, </span>
<span id="cb7-61">      tags<span class="op">$</span><span class="kw">label</span>(<span class="st">"Excluded rows"</span>),</span>
<span id="cb7-62">      <span class="kw">verbatimTextOutput</span>(<span class="st">"excludedRows"</span>)</span>
<span id="cb7-63">    ),</span>
<span id="cb7-64">    <span class="kw">column</span>(</span>
<span id="cb7-65">      <span class="dv">6</span>, </span>
<span id="cb7-66">      tags<span class="op">$</span><span class="kw">label</span>(<span class="st">"Included rows"</span>),</span>
<span id="cb7-67">      <span class="kw">verbatimTextOutput</span>(<span class="st">"includedRows"</span>)</span>
<span id="cb7-68">    )</span>
<span id="cb7-69">  ),</span>
<span id="cb7-70">  <span class="kw">br</span>(),</span>
<span id="cb7-71">  <span class="kw">DTOutput</span>(<span class="st">"mytable"</span>)</span>
<span id="cb7-72">)</span>
<span id="cb7-73"></span>
<span id="cb7-74">server &lt;-<span class="st"> </span><span class="cf">function</span>(input, output,session) {</span>
<span id="cb7-75">  </span>
<span id="cb7-76">  dat &lt;-<span class="st"> </span><span class="kw">cbind</span>(<span class="dt">Selected =</span> <span class="st">"ok"</span>, mtcars[<span class="dv">1</span><span class="op">:</span><span class="dv">6</span>,], <span class="dt">id =</span> <span class="kw">paste0</span>(<span class="st">"row_"</span>,<span class="dv">1</span><span class="op">:</span><span class="dv">6</span>))</span>
<span id="cb7-77">  </span>
<span id="cb7-78">  output[[<span class="st">"mytable"</span>]] &lt;-<span class="st"> </span><span class="kw">renderDT</span>({</span>
<span id="cb7-79">    <span class="kw">datatable</span>(dat, <span class="dt">rownames =</span> rowNames, </span>
<span id="cb7-80">              <span class="dt">extensions =</span> <span class="kw">c</span>(<span class="st">"Select"</span>, <span class="st">"Buttons"</span>), </span>
<span id="cb7-81">              <span class="dt">selection =</span> <span class="st">"none"</span>, </span>
<span id="cb7-82">              <span class="dt">callback =</span> <span class="kw">JS</span>(callback),</span>
<span id="cb7-83">              <span class="dt">options =</span> <span class="kw">list</span>(</span>
<span id="cb7-84">                <span class="dt">rowId =</span> <span class="kw">JS</span>(<span class="kw">sprintf</span>(<span class="st">"function(data){return data[%d];}"</span>, </span>
<span id="cb7-85">                                   <span class="kw">ncol</span>(dat)<span class="op">-</span><span class="dv">1</span><span class="op">+</span>colIndex)), </span>
<span id="cb7-86">                <span class="dt">columnDefs =</span> <span class="kw">list</span>(</span>
<span id="cb7-87">                  <span class="kw">list</span>(<span class="dt">visible =</span> <span class="ot">FALSE</span>, <span class="dt">targets =</span> <span class="kw">ncol</span>(dat)<span class="op">-</span><span class="dv">1</span><span class="op">+</span>colIndex),</span>
<span id="cb7-88">                  <span class="kw">list</span>(<span class="dt">className =</span> <span class="st">"dt-center"</span>, <span class="dt">targets =</span> <span class="st">"_all"</span>),</span>
<span id="cb7-89">                  <span class="kw">list</span>(<span class="dt">className =</span> <span class="st">"notselectable"</span>, <span class="dt">targets =</span> colIndex),</span>
<span id="cb7-90">                  <span class="kw">list</span>(<span class="dt">targets =</span> colIndex, <span class="dt">render =</span> <span class="kw">JS</span>(render)) </span>
<span id="cb7-91">                ),</span>
<span id="cb7-92">                <span class="dt">dom =</span> <span class="st">"Bt"</span>,</span>
<span id="cb7-93">                <span class="dt">buttons =</span> <span class="kw">list</span>(<span class="st">"copy"</span>, <span class="st">"csv"</span>,</span>
<span id="cb7-94">                               <span class="kw">list</span>(</span>
<span id="cb7-95">                                 <span class="dt">extend =</span> <span class="st">"collection"</span>,</span>
<span id="cb7-96">                                 <span class="dt">text =</span> <span class="st">'Select all rows'</span>, </span>
<span id="cb7-97">                                 <span class="dt">action =</span> <span class="kw">JS</span>(restore)</span>
<span id="cb7-98">                               )</span>
<span id="cb7-99">                ),</span>
<span id="cb7-100">                <span class="dt">select =</span> <span class="kw">list</span>(<span class="dt">style =</span> <span class="st">"single"</span>, </span>
<span id="cb7-101">                              <span class="dt">selector =</span> <span class="st">"td:not(.notselectable)"</span>)</span>
<span id="cb7-102">              )</span>
<span id="cb7-103">    )</span>
<span id="cb7-104">  }, <span class="dt">server =</span> <span class="ot">FALSE</span>)</span>
<span id="cb7-105">    </span>
<span id="cb7-106">    output<span class="op">$</span>excludedRows &lt;-<span class="st"> </span><span class="kw">renderPrint</span>({</span>
<span id="cb7-107">      input[[<span class="st">"excludedRows"</span>]]</span>
<span id="cb7-108">    })</span>
<span id="cb7-109"></span>
<span id="cb7-110">    output<span class="op">$</span>includedRows &lt;-<span class="st"> </span><span class="kw">renderPrint</span>({</span>
<span id="cb7-111">      <span class="kw">setdiff</span>(<span class="dv">1</span><span class="op">:</span><span class="kw">nrow</span>(dat), input[[<span class="st">"excludedRows"</span>]])</span>
<span id="cb7-112">    })</span>
<span id="cb7-113">    </span>
<span id="cb7-114">}</span>
<span id="cb7-115"></span>
<span id="cb7-116"><span class="kw">shinyApp</span>(ui, server)</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/DTcallback_rowCSSonclick.png"
        />
      </p>
      <h1 id="capturing-the-autofilled-cells">
        Capturing the autofilled cells
      </h1>
      <p>
        The <code>AutoFill</code> extension gives an Excel like option to a
        DataTable to click and drag over multiple cells, filling in information
        over the selected cells and incrementing numbers as needed.
      </p>
      <p>
        The callback below allows to update the data in the R server when some
        cells are edited or changed by autofilling.
      </p>
      <div class="sourceCode" id="cb8">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb8-1"><span class="kw">library</span>(shiny)</span>
<span id="cb8-2"><span class="kw">library</span>(DT)</span>
<span id="cb8-3"></span>
<span id="cb8-4">callback &lt;-<span class="st"> </span><span class="kw">c</span>(</span>
<span id="cb8-5">  <span class="st">"var tbl = $(table.table().node());"</span>,</span>
<span id="cb8-6">  <span class="st">"var id = tbl.closest('.datatables').attr('id');"</span>,</span>
<span id="cb8-7">  <span class="st">"table.on('autoFill', function(e, datatable, cells){"</span>,</span>
<span id="cb8-8">  <span class="st">"  var out = [];"</span>,</span>
<span id="cb8-9">  <span class="st">"  for(var i = 0; i &lt; cells.length; ++i){"</span>,</span>
<span id="cb8-10">  <span class="st">"    var cells_i = cells[i];"</span>,</span>
<span id="cb8-11">  <span class="st">"    for(var j = 0; j &lt; cells_i.length; ++j){"</span>,</span>
<span id="cb8-12">  <span class="st">"      var c = cells_i[j];"</span>,</span>
<span id="cb8-13">  <span class="st">"      var value = c.set === null ? '' : c.set;"</span>, <span class="co"># null =&gt; problem in R</span></span>
<span id="cb8-14">  <span class="st">"      out.push({"</span>,</span>
<span id="cb8-15">  <span class="st">"        row: c.index.row + 1,"</span>,</span>
<span id="cb8-16">  <span class="st">"        col: c.index.column,"</span>,</span>
<span id="cb8-17">  <span class="st">"        value: value"</span>,</span>
<span id="cb8-18">  <span class="st">"      });"</span>,</span>
<span id="cb8-19"><span class="co"># to color the autofilled cells, uncomment the two lines below  </span></span>
<span id="cb8-20"><span class="co">#  "      $(table.cell(c.index.row, c.index.column).node())",</span></span>
<span id="cb8-21"><span class="co">#  "        .css('background-color', 'yellow');",</span></span>
<span id="cb8-22">  <span class="st">"    }"</span>,</span>
<span id="cb8-23">  <span class="st">"  }"</span>,</span>
<span id="cb8-24">  <span class="st">"  Shiny.setInputValue(id + '_cells_filled:DT.cellInfo', out);"</span>,</span>
<span id="cb8-25">  <span class="st">"  table.rows().invalidate();"</span>, <span class="co"># this updates the column type</span></span>
<span id="cb8-26">  <span class="st">"});"</span></span>
<span id="cb8-27">)</span>
<span id="cb8-28"></span>
<span id="cb8-29">ui &lt;-<span class="st"> </span><span class="kw">fluidPage</span>(</span>
<span id="cb8-30">  <span class="kw">br</span>(),</span>
<span id="cb8-31">  <span class="kw">DTOutput</span>(<span class="st">"dt"</span>),</span>
<span id="cb8-32">  <span class="kw">br</span>(),</span>
<span id="cb8-33">  <span class="kw">verbatimTextOutput</span>(<span class="st">"table"</span>)</span>
<span id="cb8-34">)</span>
<span id="cb8-35"></span>
<span id="cb8-36">server &lt;-<span class="st"> </span><span class="cf">function</span>(input, output){</span>
<span id="cb8-37">  </span>
<span id="cb8-38">  dat &lt;-<span class="st"> </span>iris[<span class="dv">1</span><span class="op">:</span><span class="dv">5</span>,]</span>
<span id="cb8-39">  dat<span class="op">$</span>Species &lt;-<span class="st"> </span><span class="kw">as.character</span>(dat<span class="op">$</span>Species)</span>
<span id="cb8-40">  </span>
<span id="cb8-41">  output[[<span class="st">"dt"</span>]] &lt;-<span class="st"> </span><span class="kw">renderDT</span>({</span>
<span id="cb8-42">    <span class="kw">datatable</span>(dat, </span>
<span id="cb8-43">              <span class="dt">editable =</span> <span class="kw">list</span>(<span class="dt">target =</span> <span class="st">"cell"</span>),</span>
<span id="cb8-44">              <span class="dt">selection =</span> <span class="st">"none"</span>,</span>
<span id="cb8-45">              <span class="dt">extensions =</span> <span class="st">"AutoFill"</span>,</span>
<span id="cb8-46">              <span class="dt">callback =</span> <span class="kw">JS</span>(callback), </span>
<span id="cb8-47">              <span class="dt">options =</span> <span class="kw">list</span>(</span>
<span id="cb8-48">                <span class="dt">autoFill =</span> <span class="ot">TRUE</span></span>
<span id="cb8-49">              )</span>
<span id="cb8-50">    )</span>
<span id="cb8-51">  }, <span class="dt">server =</span> <span class="ot">TRUE</span>)</span>
<span id="cb8-52">  </span>
<span id="cb8-53">  Data &lt;-<span class="st"> </span><span class="kw">reactive</span>({</span>
<span id="cb8-54">    info &lt;-<span class="st"> </span><span class="kw">rbind</span>(input[[<span class="st">"dt_cells_filled"</span>]], input[[<span class="st">"dt_cell_edit"</span>]])</span>
<span id="cb8-55">    <span class="cf">if</span>(<span class="op">!</span><span class="kw">is.null</span>(info)){</span>
<span id="cb8-56">      info &lt;-<span class="st"> </span><span class="kw">unique</span>(info)</span>
<span id="cb8-57">      info<span class="op">$</span>value[info<span class="op">$</span>value<span class="op">==</span><span class="st">""</span>] &lt;-<span class="st"> </span><span class="ot">NA</span></span>
<span id="cb8-58">      dat &lt;&lt;-<span class="st"> </span><span class="kw">editData</span>(dat, info, <span class="dt">proxy =</span> <span class="st">"dt"</span>)</span>
<span id="cb8-59">    }</span>
<span id="cb8-60">    dat</span>
<span id="cb8-61">  })</span>
<span id="cb8-62"></span>
<span id="cb8-63">  output[[<span class="st">"table"</span>]] &lt;-<span class="st"> </span><span class="kw">renderPrint</span>({<span class="kw">Data</span>()})  </span>
<span id="cb8-64">}</span>
<span id="cb8-65"></span>
<span id="cb8-66"><span class="kw">shinyApp</span>(ui, server)</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/DTcallback_AutoFill.gif"
        />
      </p>
      <p>
        If you use <code>server = FALSE</code> in <code>renderDT</code>, just
        remove the <code>proxy</code> argument in <code>editData</code>:
      </p>
      <div class="sourceCode" id="cb9">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb9-1">dat &lt;&lt;-<span class="st"> </span><span class="kw">editData</span>(dat, info)</span></code></pre>
      </div>
      <h1 id="select-page-with-a-numeric-input">
        Select page with a numeric input
      </h1>
      <p>
        The default pagination is not convenient when there are many pages (the
        user has to click multiple times on the ‘Next’ or ‘Previous’ button).
        This callback allows to select a page with a numeric input.
      </p>
      <div class="sourceCode" id="cb10">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb10-1"><span class="kw">library</span>(shiny)</span>
<span id="cb10-2"><span class="kw">library</span>(DT)</span>
<span id="cb10-3"></span>
<span id="cb10-4"><span class="kw">shinyApp</span>(</span>
<span id="cb10-5">  <span class="dt">ui =</span> <span class="kw">fluidPage</span>(</span>
<span id="cb10-6">    tags<span class="op">$</span><span class="kw">head</span>(tags<span class="op">$</span><span class="kw">style</span>(<span class="st">".pagination {float: right;}"</span>)),</span>
<span id="cb10-7">    <span class="kw">fluidRow</span>(</span>
<span id="cb10-8">      <span class="kw">div</span>(<span class="dt">id=</span><span class="st">"pagination"</span>, </span>
<span id="cb10-9">          <span class="kw">div</span>(<span class="dt">style =</span> <span class="st">"display:inline-block;"</span>, </span>
<span id="cb10-10">              tags<span class="op">$</span><span class="kw">a</span>(<span class="dt">id =</span> <span class="st">"first"</span>, <span class="dt">style =</span> <span class="st">"cursor: pointer;"</span>, <span class="st">"First"</span>)),</span>
<span id="cb10-11">          <span class="kw">div</span>(<span class="dt">style =</span> <span class="st">"display:inline-block;"</span>, </span>
<span id="cb10-12">              tags<span class="op">$</span><span class="kw">a</span>(<span class="dt">id =</span> <span class="st">"previous"</span>, <span class="dt">style =</span> <span class="st">"cursor: pointer;"</span>, <span class="st">" Previous"</span>)),</span>
<span id="cb10-13">          <span class="kw">div</span>(<span class="dt">style =</span> <span class="st">"display:inline-block;"</span>, </span>
<span id="cb10-14">              tags<span class="op">$</span><span class="kw">input</span>(<span class="dt">id=</span><span class="st">"page"</span>, <span class="dt">type=</span><span class="st">"number"</span>, <span class="dt">class=</span><span class="st">"input-sm"</span>, <span class="dt">value=</span><span class="st">"1"</span>, <span class="dt">min=</span><span class="st">"1"</span>)</span>
<span id="cb10-15">          ),</span>
<span id="cb10-16">          <span class="kw">div</span>(<span class="dt">style =</span> <span class="st">"display:inline-block;"</span>, </span>
<span id="cb10-17">              tags<span class="op">$</span><span class="kw">span</span>(<span class="dt">id =</span> <span class="st">"of"</span>)),</span>
<span id="cb10-18">          <span class="kw">div</span>(<span class="dt">style =</span> <span class="st">"display:inline-block;"</span>, </span>
<span id="cb10-19">              tags<span class="op">$</span><span class="kw">a</span>(<span class="dt">id =</span> <span class="st">"next"</span>, <span class="dt">style =</span> <span class="st">"cursor: pointer;"</span>, <span class="st">"Next "</span>)),</span>
<span id="cb10-20">          <span class="kw">div</span>(<span class="dt">style =</span> <span class="st">"display:inline-block;"</span>, </span>
<span id="cb10-21">              tags<span class="op">$</span><span class="kw">a</span>(<span class="dt">id =</span> <span class="st">"last"</span>, <span class="dt">style =</span> <span class="st">"cursor: pointer;"</span>, <span class="st">"Last"</span>))</span>
<span id="cb10-22">      )</span>
<span id="cb10-23">    ),</span>
<span id="cb10-24">    <span class="kw">fluidRow</span>(</span>
<span id="cb10-25">      <span class="kw">column</span>(<span class="dv">12</span>, <span class="kw">DTOutput</span>(<span class="st">'tbl'</span>))</span>
<span id="cb10-26">    )</span>
<span id="cb10-27">  ),</span>
<span id="cb10-28">  <span class="dt">server =</span> <span class="cf">function</span>(input, output) {</span>
<span id="cb10-29">    output<span class="op">$</span>tbl =<span class="st"> </span><span class="kw">renderDT</span>({</span>
<span id="cb10-30">      <span class="kw">datatable</span>(</span>
<span id="cb10-31">        iris, <span class="dt">options =</span> <span class="kw">list</span>(</span>
<span id="cb10-32">          <span class="dt">dom =</span> <span class="st">"lfrti&lt;'pagination'&gt;"</span>, </span>
<span id="cb10-33">          <span class="dt">initComplete =</span> <span class="kw">JS</span>(<span class="kw">c</span>(</span>
<span id="cb10-34">            <span class="st">"function(settings, json){"</span>,</span>
<span id="cb10-35">            <span class="st">"  var table = settings.oInstance.api();"</span>,</span>
<span id="cb10-36">            <span class="st">"  var pageinfo = table.page.info();"</span>,</span>
<span id="cb10-37">            <span class="st">"  $('#of').text('of ' + pageinfo.pages);"</span>,</span>
<span id="cb10-38">            <span class="st">"}"</span></span>
<span id="cb10-39">          ))</span>
<span id="cb10-40">        ),</span>
<span id="cb10-41">        <span class="dt">callback =</span> <span class="kw">JS</span>(<span class="kw">c</span>(</span>
<span id="cb10-42">          <span class="st">"$('div.pagination').append($('#pagination'));"</span>,</span>
<span id="cb10-43">          <span class="st">"$('#first').on('click', function(){"</span>, </span>
<span id="cb10-44">          <span class="st">"  table.page('first').draw('page');"</span>,</span>
<span id="cb10-45">          <span class="st">"  $('#page').val(1);"</span>,</span>
<span id="cb10-46">          <span class="st">"});"</span>,</span>
<span id="cb10-47">          <span class="st">"$('#previous').on('click', function(){"</span>, </span>
<span id="cb10-48">          <span class="st">"  table.page('previous').draw('page');"</span>,</span>
<span id="cb10-49">          <span class="st">"  $('#page').val(table.page.info().page + 1);"</span>,</span>
<span id="cb10-50">          <span class="st">"});"</span>,</span>
<span id="cb10-51">          <span class="st">"$('#next').on('click', function(){"</span>, </span>
<span id="cb10-52">          <span class="st">"  table.page('next').draw('page');"</span>,</span>
<span id="cb10-53">          <span class="st">"  $('#page').val(table.page.info().page + 1);"</span>,</span>
<span id="cb10-54">          <span class="st">"});"</span>,</span>
<span id="cb10-55">          <span class="st">"$('#last').on('click', function(){"</span>, </span>
<span id="cb10-56">          <span class="st">"  table.page('last').draw('page');"</span>,</span>
<span id="cb10-57">          <span class="st">"  $('#page').val(table.page.info().pages);"</span>,</span>
<span id="cb10-58">          <span class="st">"});"</span>,</span>
<span id="cb10-59">          <span class="st">"$('#page').on('change', function(){"</span>,</span>
<span id="cb10-60">          <span class="st">"  var page = parseInt($('#page').val());"</span>,</span>
<span id="cb10-61">          <span class="st">"  if(!isNaN(page)){ table.page(page-1).draw('page'); }"</span>,</span>
<span id="cb10-62">          <span class="st">"});"</span></span>
<span id="cb10-63">        ))</span>
<span id="cb10-64">      )</span>
<span id="cb10-65">    })</span>
<span id="cb10-66">  }</span>
<span id="cb10-67">)</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/DTcallback_pagination.gif"
        />
      </p>
    </div>
  </div>
</div>
]]></description>
      <pubDate>Fri, 14 Jun 2019 00:00:00 UT</pubDate>
      <guid>https://laustep.github.io/stlahblog/posts/DTcallbacks.html</guid>
      <dc:creator>Stéphane Laurent</dc:creator>
      <category>R</category>
    </item>
    <item>
      <title>Two-sided tolerance factor for linear regression</title>
      <link>https://laustep.github.io/stlahblog/posts/ToleranceFactor_regression.html</link>
      <description><![CDATA[<div class="container-fluid">
  <div class="main col-sm-12">
    <div class="content">
      <p>
        We denote by
        <span class="math inline">\(\chi^2_{\nu, \lambda}(p)\)</span> the
        <span class="math inline">\(100p\%\)</span>-quantile of the non-central
        Chi-squared distribution
        <span class="math inline">\(\chi^2_{\nu, \lambda}\)</span> with degrees
        of freedom number <span class="math inline">\(\nu\)</span> and
        non-centrality parameter <span class="math inline">\(\lambda\)</span>.
      </p>
      <p>
        As shown in Krishnamoorthy &amp; Mathew’s book, the two-sided
        <span class="math inline">\((p, 1-\alpha)\)</span>-tolerance factor for
        a linear regression model is the solution
        <span class="math inline">\(k\)</span> of the equation
      </p>
      <p>
        <span class="math display"
          >\[ \frac{2}{d}\int_0^\infty \Pr\left(\chi^2_\ell &gt;
          \frac{\ell\chi^2_{1,x^2}(p)}{k^2} \right) \phi\left(\frac{x}{d}\right)
          \mathrm{d}x = 1-\alpha \]</span
        >
        where <span class="math inline">\(\ell\)</span> is the corank of the
        <span class="math inline">\(X\)</span> matrix, and
        <span class="math inline">\(d\)</span> is a number calculated from the
        desired values of the predictors (as we will see on the example).
      </p>
      <p>
        Below we provide a <code>Rcpp</code> implementation of the integral. We
        use the <code>boost</code> library (offered by the
        <code>BH</code> package) to evaluate the integrand, and the package
        <a href="https://github.com/yixuan/RcppNumerical"
          ><code>RcppNumerical</code></a
        >
        to evaluate the integral, after transforming this integral to an
        integral on <span class="math inline">\((0,1)\)</span>.
      </p>
      <div class="sourceCode" id="cb1">
        <pre
          class="sourceCode cpp"
        ><code class="sourceCode cpp"><span id="cb1-1"><span class="co">// [[Rcpp::depends(BH)]]</span></span>
<span id="cb1-2"><span class="co">// [[Rcpp::depends(RcppEigen)]]</span></span>
<span id="cb1-3"><span class="co">// [[Rcpp::depends(RcppNumerical)]]</span></span>
<span id="cb1-4"><span class="pp">#include </span><span class="im">&lt;RcppNumerical.h&gt;</span></span>
<span id="cb1-5"><span class="kw">using</span> <span class="kw">namespace</span> Numer;</span>
<span id="cb1-6"><span class="pp">#include </span><span class="im">&lt;Rcpp.h&gt;</span></span>
<span id="cb1-7"><span class="kw">using</span> <span class="kw">namespace</span> Rcpp;</span>
<span id="cb1-8"><span class="pp">#include </span><span class="im">&lt;boost/math/distributions/non_central_chi_squared.hpp&gt;</span></span>
<span id="cb1-9"><span class="pp">#include </span><span class="im">&lt;boost/math/distributions/complement.hpp&gt;</span></span>
<span id="cb1-10"><span class="pp">#include </span><span class="im">&lt;boost/math/distributions/normal.hpp&gt;</span></span>
<span id="cb1-11"><span class="pp">#include </span><span class="im">&lt;boost/math/distributions/chi_squared.hpp&gt;</span></span>
<span id="cb1-12"></span>
<span id="cb1-13"><span class="co">// [[Rcpp::export]]</span></span>
<span id="cb1-14"><span class="dt">double</span> integrand(<span class="dt">double</span> u, <span class="dt">double</span> l, <span class="dt">double</span> p, <span class="dt">double</span> k, <span class="dt">double</span> d){</span>
<span id="cb1-15">  <span class="dt">double</span> x = u/(<span class="dv">1</span>-u);</span>
<span id="cb1-16">  <span class="dt">double</span> q = <span class="ex">boost::</span>math<span class="ex">::</span>quantile(<span class="ex">boost::</span>math<span class="ex">::</span>non_central_chi_squared(<span class="dv">1</span>, x*x), p);</span>
<span id="cb1-17">  <span class="dt">double</span> pchisq = <span class="ex">boost::</span>math<span class="ex">::</span>cdf(<span class="ex">boost::</span>math<span class="ex">::</span>complement(<span class="ex">boost::</span>math<span class="ex">::</span>chi_squared(l), l*q/k/k));</span>
<span id="cb1-18">  <span class="dt">double</span> w = <span class="dv">2</span>*<span class="ex">boost::</span>math<span class="ex">::</span>pdf(<span class="ex">boost::</span>math<span class="ex">::</span>normal(<span class="dv">0</span>, d), x);</span>
<span id="cb1-19">  <span class="cf">return</span> w * pchisq / ((<span class="dv">1</span>-u)*(<span class="dv">1</span>-u));</span>
<span id="cb1-20">}</span>
<span id="cb1-21"></span>
<span id="cb1-22"><span class="kw">class</span> Integrand: <span class="kw">public</span> Func</span>
<span id="cb1-23">{</span>
<span id="cb1-24"><span class="kw">private</span>:</span>
<span id="cb1-25">  <span class="dt">double</span> l;</span>
<span id="cb1-26">  <span class="dt">double</span> p;</span>
<span id="cb1-27">  <span class="dt">double</span> k;</span>
<span id="cb1-28">  <span class="dt">double</span> d;</span>
<span id="cb1-29"><span class="kw">public</span>:</span>
<span id="cb1-30">  Integrand(<span class="dt">double</span> <span class="va">l_</span>, <span class="dt">double</span> <span class="va">p_</span>, <span class="dt">double</span> <span class="va">k_</span>, <span class="dt">double</span> <span class="va">d_</span>) : l(<span class="va">l_</span>), p(<span class="va">p_</span>), k(<span class="va">k_</span>), d(<span class="va">d_</span>) {}</span>
<span id="cb1-31">  </span>
<span id="cb1-32">  <span class="dt">double</span> <span class="kw">operator</span>()(<span class="at">const</span> <span class="dt">double</span>&amp; u) <span class="at">const</span></span>
<span id="cb1-33">  {</span>
<span id="cb1-34">    <span class="cf">return</span> integrand(u, l, p, k, d);</span>
<span id="cb1-35">  }</span>
<span id="cb1-36">};</span>
<span id="cb1-37"></span>
<span id="cb1-38"><span class="co">// [[Rcpp::export]]</span></span>
<span id="cb1-39">Rcpp::NumericVector integral(<span class="dt">double</span> l, <span class="dt">double</span> p, <span class="dt">double</span> k, <span class="dt">double</span> d){</span>
<span id="cb1-40">  Integrand f(l, p, k, d);</span>
<span id="cb1-41">  <span class="dt">double</span> err_est;</span>
<span id="cb1-42">  <span class="dt">int</span> err_code;</span>
<span id="cb1-43">  <span class="at">const</span> <span class="dt">double</span> res = integrate(f, <span class="dv">0</span>, <span class="dv">1</span>, err_est, err_code);</span>
<span id="cb1-44">  Rcpp::NumericVector out = Rcpp::NumericVector::create(res);</span>
<span id="cb1-45">  out.attr(<span class="st">"err_est"</span>) = err_est;</span>
<span id="cb1-46">  out.attr(<span class="st">"err_code"</span>) = err_code;</span>
<span id="cb1-47">  <span class="cf">return</span> out;</span>
<span id="cb1-48">}</span></code></pre>
      </div>
      <h2 id="example">Example</h2>
      <p>
        We test our function on Example 3.1 of Krishnamoorthy &amp; Mathew’s
        book. We firstly calculate the value of
        <span class="math inline">\(d\)</span>.
      </p>
      <div class="sourceCode" id="cb2">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb2-1">dat &lt;-<span class="st"> </span><span class="kw">data.frame</span>(</span>
<span id="cb2-2">  <span class="dt">x1 =</span> <span class="kw">c</span>(<span class="dv">80</span>, <span class="dv">93</span>, <span class="dv">100</span>, <span class="dv">82</span>, <span class="dv">90</span>, <span class="dv">99</span>, <span class="dv">81</span>, <span class="dv">96</span>, <span class="dv">94</span>, <span class="dv">93</span>, <span class="dv">97</span>, <span class="dv">95</span>, <span class="dv">100</span>, <span class="dv">85</span>, <span class="dv">86</span>, <span class="dv">87</span>), </span>
<span id="cb2-3">  <span class="dt">x2 =</span> <span class="kw">c</span>(<span class="dv">8</span>, <span class="dv">9</span>, <span class="dv">10</span>, <span class="dv">12</span>, <span class="dv">11</span>, <span class="dv">8</span>, <span class="dv">8</span>, <span class="dv">10</span>, <span class="dv">12</span>, <span class="dv">11</span>, <span class="dv">13</span>, <span class="dv">11</span>, <span class="dv">8</span>, <span class="dv">12</span>, <span class="dv">9</span>, <span class="dv">12</span>), </span>
<span id="cb2-4">  <span class="dt">y =</span> <span class="kw">c</span>(<span class="dv">2256</span>, <span class="dv">2340</span>, <span class="dv">2426</span>, <span class="dv">2293</span>, <span class="dv">2330</span>, <span class="dv">2368</span>, <span class="dv">2250</span>, <span class="dv">2409</span>, <span class="dv">2364</span>, <span class="dv">2379</span>, <span class="dv">2440</span>, <span class="dv">2364</span>, <span class="dv">2404</span>, <span class="dv">2317</span>, <span class="dv">2309</span>, <span class="dv">2328</span>)</span>
<span id="cb2-5">)</span>
<span id="cb2-6">fit &lt;-<span class="st"> </span><span class="kw">lm</span>(y <span class="op">~</span><span class="st"> </span>x1<span class="op">+</span>x2, <span class="dt">data=</span>dat)</span>
<span id="cb2-7">X &lt;-<span class="st"> </span><span class="kw">model.matrix</span>(fit)</span>
<span id="cb2-8">H &lt;-<span class="st"> </span><span class="kw">chol2inv</span>(<span class="kw">chol</span>(<span class="kw">t</span>(X)<span class="op">%*%</span>X)) <span class="co"># inverse of X'X</span></span>
<span id="cb2-9"><span class="co">## we want the tolerance interval at x1=88 and x2=9</span></span>
<span id="cb2-10">xnew &lt;-<span class="st"> </span><span class="kw">c</span>(<span class="dv">1</span>, <span class="dv">88</span>, <span class="dv">9</span>)</span>
<span id="cb2-11">d &lt;-<span class="st"> </span><span class="kw">sqrt</span>(<span class="kw">c</span>(<span class="kw">t</span>(xnew) <span class="op">%*%</span><span class="st"> </span>H <span class="op">%*%</span><span class="st"> </span><span class="kw">matrix</span>(xnew)))</span></code></pre>
      </div>
      <p>
        No we solve the equation. The <code>Rcpp</code> function
        <code>integral</code> is available in a package I called
        <code>regtolerance</code>.
      </p>
      <div class="sourceCode" id="cb3">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb3-1">f &lt;-<span class="st"> </span><span class="cf">function</span>(k, l, p, d, alpha){</span>
<span id="cb3-2">  regtolerance<span class="op">:::</span><span class="kw">integral</span>(l, p, k, d) <span class="op">-</span><span class="st"> </span>(<span class="dv">1</span><span class="op">-</span>alpha)</span>
<span id="cb3-3">}</span>
<span id="cb3-4"><span class="co">## Calculation of the (0.9, 0.95)-tolerance factor</span></span>
<span id="cb3-5">( k &lt;-<span class="st"> </span><span class="kw">uniroot</span>(f, <span class="dt">l=</span><span class="kw">nrow</span>(dat)<span class="op">-</span><span class="dv">3</span>, <span class="dt">p=</span><span class="fl">0.9</span>, <span class="dt">d=</span>d, <span class="dt">alpha=</span><span class="fl">0.05</span>, <span class="dt">lower=</span><span class="dv">2</span>, <span class="dt">upper=</span><span class="dv">3</span>)<span class="op">$</span>root )</span>
<span id="cb3-6"><span class="co">## [1] 2.602851</span></span></code></pre>
      </div>
      <p>Now we get the tolerance interval as follows:</p>
      <div class="sourceCode" id="cb4">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb4-1">estimates &lt;-<span class="st"> </span>fit<span class="op">$</span>coefficients</span>
<span id="cb4-2">yhat &lt;-<span class="st"> </span><span class="kw">c</span>(<span class="kw">t</span>(xnew) <span class="op">%*%</span><span class="st"> </span><span class="kw">matrix</span>(estimates))</span>
<span id="cb4-3">yhat <span class="op">+</span><span class="st"> </span><span class="kw">c</span>(<span class="op">-</span><span class="dv">1</span>,<span class="dv">1</span>)<span class="op">*</span>k<span class="op">*</span><span class="kw">sigma</span>(fit)</span>
<span id="cb4-4"><span class="co">## [1] 2271.436 2356.594</span></span></code></pre>
      </div>
      <h2 id="bounding-the-tolerance-factor">Bounding the tolerance factor</h2>
      <h3 id="lower-bound">Lower bound</h3>
      <p>
        For a fixed number of degrees of freedom, the Chi-squared distribution
        is stochastically increasing in its non-centrality parameter. Therefore
        <span class="math display"
          >\[ \frac{2}{d}\int_0^\infty \Pr\left(\chi^2_\ell &gt;
          \frac{\ell\chi^2_{1,x^2}(p)}{k^2} \right) \phi\left(\frac{x}{d}\right)
          \mathrm{d}x \leq \Pr\left(\chi^2_\ell &gt;
          \frac{\ell\chi^2_{1}(p)}{k^2} \right) \]</span
        >
      </p>
      <p>
        Thus, the value of <span class="math inline">\(k\)</span> satisfying
        <span class="math display"
          >\[ \Pr\left(\chi^2_\ell &gt; \frac{\ell\chi^2_{1}(p)}{k^2} \right) =
          1-\alpha \]</span
        >
        is lower than the tolerance factor.
      </p>
      <div class="sourceCode" id="cb5">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb5-1">l &lt;-<span class="st"> </span><span class="kw">nrow</span>(dat)<span class="op">-</span><span class="dv">3</span></span>
<span id="cb5-2">p &lt;-<span class="st"> </span><span class="fl">0.9</span></span>
<span id="cb5-3">alpha &lt;-<span class="st"> </span><span class="fl">0.05</span></span>
<span id="cb5-4"><span class="co"># lower bound</span></span>
<span id="cb5-5"><span class="kw">sqrt</span>(l<span class="op">*</span><span class="kw">qchisq</span>(p,<span class="dv">1</span>)<span class="op">/</span><span class="kw">qchisq</span>(<span class="dv">1</span><span class="op">-</span>alpha, l, <span class="dt">lower.tail=</span><span class="ot">FALSE</span>))</span>
<span id="cb5-6"><span class="co">## [1] 2.443276</span></span></code></pre>
      </div>
      <div class="sourceCode" id="cb6">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb6-1"><span class="kw">curve</span>(<span class="kw">Vectorize</span>(regtolerance<span class="op">:::</span>integral)(l, p, x, d), </span>
<span id="cb6-2">      <span class="dt">from=</span><span class="fl">0.1</span>, <span class="dt">to=</span><span class="dv">4</span>, <span class="dt">ylim=</span><span class="kw">c</span>(<span class="dv">0</span>,<span class="dv">1</span>))</span>
<span id="cb6-3"><span class="kw">curve</span>(<span class="kw">pchisq</span>(l<span class="op">*</span><span class="kw">qchisq</span>(p,<span class="dv">1</span>)<span class="op">/</span>x<span class="op">^</span><span class="dv">2</span>, l, <span class="dt">lower.tail=</span><span class="ot">FALSE</span>), <span class="dt">add=</span><span class="ot">TRUE</span>, <span class="dt">col=</span><span class="st">"red"</span>)</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/regtol-lowerBound-1.png"
        />
      </p>
      <h3 id="upper-bound">Upper bound</h3>
      <p>
        The Lee &amp; Mathew approximation of
        <span class="math inline">\(k\)</span> is known to be generally higher
        than <span class="math inline">\(k\)</span>. It is returned by the
        function <code>kLM</code> below.
      </p>
      <div class="sourceCode" id="cb7">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb7-1">kLM &lt;-<span class="st"> </span><span class="cf">function</span>(p, alpha, l, d){</span>
<span id="cb7-2">  e &lt;-<span class="st"> </span>(<span class="dv">1</span><span class="op">+</span>d<span class="op">^</span><span class="dv">2</span>)<span class="op">^</span><span class="dv">2</span><span class="op">/</span>d<span class="op">^</span><span class="dv">4</span></span>
<span id="cb7-3">  f &lt;-<span class="st"> </span>d<span class="op">^</span><span class="dv">4</span><span class="op">/</span>(<span class="dv">1</span><span class="op">+</span>d<span class="op">^</span><span class="dv">2</span>) </span>
<span id="cb7-4">  delta &lt;-<span class="st"> </span>d<span class="op">^</span><span class="dv">2</span><span class="op">*</span>((<span class="dv">3</span><span class="op">*</span>d<span class="op">^</span><span class="dv">2</span><span class="op">+</span><span class="kw">sqrt</span>(<span class="dv">9</span><span class="op">*</span>d<span class="op">^</span><span class="dv">4</span><span class="op">+</span><span class="dv">6</span><span class="op">*</span>d<span class="op">^</span><span class="dv">2</span><span class="op">+</span><span class="dv">3</span>))<span class="op">/</span>(<span class="dv">2</span><span class="op">*</span>d<span class="op">^</span><span class="dv">2</span><span class="op">+</span><span class="dv">1</span>))</span>
<span id="cb7-5">  <span class="kw">sqrt</span>(e<span class="op">*</span>f<span class="op">/</span>(<span class="dv">1</span><span class="op">+</span>delta)<span class="op">*</span><span class="kw">qchisq</span>(p, <span class="dv">1</span>, delta)<span class="op">*</span><span class="kw">qf</span>(<span class="dv">1</span><span class="op">-</span>alpha, e, l))</span>
<span id="cb7-6">}</span>
<span id="cb7-7"><span class="kw">kLM</span>(p, alpha, l, d)</span>
<span id="cb7-8"><span class="co">## [1] 2.606926</span></span></code></pre>
      </div>
      <h3 id="put-things-together">Put things together</h3>
      <div class="sourceCode" id="cb8">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb8-1">p =<span class="st"> </span><span class="fl">0.9</span> </span>
<span id="cb8-2">alpha =<span class="st"> </span><span class="fl">0.05</span></span>
<span id="cb8-3">xnew =<span class="st"> </span><span class="kw">c</span>(<span class="dv">1</span>, <span class="dv">88</span>, <span class="dv">9</span>)</span>
<span id="cb8-4">X &lt;-<span class="st"> </span><span class="kw">model.matrix</span>(fit)</span>
<span id="cb8-5">H &lt;-<span class="st"> </span><span class="kw">chol2inv</span>(<span class="kw">chol</span>(<span class="kw">t</span>(X)<span class="op">%*%</span>X)) </span>
<span id="cb8-6">d &lt;-<span class="st"> </span><span class="kw">sqrt</span>(<span class="kw">c</span>(<span class="kw">t</span>(xnew) <span class="op">%*%</span><span class="st"> </span>H <span class="op">%*%</span><span class="st"> </span><span class="kw">matrix</span>(xnew)))</span>
<span id="cb8-7">l &lt;-<span class="st"> </span><span class="kw">nrow</span>(X)<span class="op">-</span><span class="kw">ncol</span>(X)</span>
<span id="cb8-8">k_low &lt;-<span class="st"> </span><span class="kw">sqrt</span>(l<span class="op">*</span><span class="kw">qchisq</span>(p,<span class="dv">1</span>)<span class="op">/</span><span class="kw">qchisq</span>(alpha, l))</span>
<span id="cb8-9">k_upp &lt;-<span class="st"> </span><span class="kw">kLM</span>(p, alpha, l, d)</span>
<span id="cb8-10">( k &lt;-<span class="st"> </span><span class="kw">uniroot</span>(f, <span class="dt">l =</span> l, <span class="dt">p =</span> p, <span class="dt">d =</span> d, <span class="dt">alpha =</span> alpha, </span>
<span id="cb8-11">               <span class="dt">lower =</span> k_low, <span class="dt">upper =</span> k_upp, </span>
<span id="cb8-12">               <span class="dt">extendInt =</span> <span class="st">"upX"</span>)<span class="op">$</span>root )</span>
<span id="cb8-13"><span class="co">## [1] 2.602831</span></span></code></pre>
      </div>
      <h1 id="references">References</h1>
      <p>
        Krishnamoorthy &amp; Mathew (2009).
        <em>Statistical Tolerance Regions</em>. Wiley.
      </p>
    </div>
  </div>
</div>
]]></description>
      <pubDate>Sun, 23 Jul 2017 00:00:00 UT</pubDate>
      <guid>https://laustep.github.io/stlahblog/posts/ToleranceFactor_regression.html</guid>
      <dc:creator>Stéphane Laurent</dc:creator>
      <category>R</category>
    </item>
    <item>
      <title>The binary splitting with the R `gmp` package - Application to the Gauss
hypergeometric function</title>
      <link>https://laustep.github.io/stlahblog/posts/hypergeometric.html</link>
      <description><![CDATA[<div class="container-fluid">
  <div class="main col-sm-12">
    <div class="content">
      <ul>
        <li>
          <a href="https://laustep.github.io/stlahblog/posts/hypergeometric.html#introductory-example-euler-approximation-of-pi"
            >Introductory example: Euler approximation of
            <span class="math inline">\(\pi\)</span></a
          >
        </li>
        <li>
          <a href="https://laustep.github.io/stlahblog/posts/hypergeometric.html#second-example-exponential-of-a-rational-number"
            >Second example: exponential of a rational number</a
          >
        </li>
        <li>
          <a href="https://laustep.github.io/stlahblog/posts/hypergeometric.html#the-gmp-package-comes-to-our-rescue"
            >The <code>gmp</code> package comes to our rescue</a
          >
        </li>
        <li>
          <a href="https://laustep.github.io/stlahblog/posts/hypergeometric.html#a-general-function-for-the-binary-splitting-algorithm"
            >A general function for the binary splitting algorithm</a
          >
        </li>
        <li>
          <a href="https://laustep.github.io/stlahblog/posts/hypergeometric.html#the-gauss-hypergeometric-function"
            >The Gauss hypergeometric function</a
          >
        </li>
        <li><a href="https://laustep.github.io/stlahblog/posts/hypergeometric.html#update-2018-11-13">Update 2018-11-13</a></li>
      </ul>
      <p>
        In this article you will firstly see how to get rational numbers
        arbitrary close to <span class="math inline">\(\pi\)</span> by
        performing the <em>binary splitting algorithm</em> with the
        <code>gmp</code> package.
      </p>
      <p>
        The <em>binary splitting algorithm</em> fastly calculates the partial
        sums of a rational hypergeometric series by manipulating only integer
        numbers. But these integer numbers are generally gigantic hence they
        cannot be handled by ordinary arithmetic computing. After describing the
        binary splitting algorithm we will show how to implement it in R with
        the <code>gmp</code> package which allows
        <em>arithmetic without limitation</em>. Our main application is the
        evaluation of the Gauss hypergeometric function.
      </p>
      <h2 id="introductory-example-euler-approximation-of-pi">
        Introductory example: Euler approximation of
        <span class="math inline">\(\pi\)</span>
      </h2>
      <p>
        The following formula is due to Euler
        <span class="math display"
          >\[\frac{\pi}{2} = 1 + \frac{1}{3} + \frac{1\times 2}{3\times 5} +
          \frac{1\times 2 \times 3}{3\times 5 \times 7} + \cdots +
          \frac{n!}{3\times 5 \times 7 \times \cdots \times (2n+1)} +
          \cdots,\]</span
        >
        that is,
        <span class="math inline">\(\frac{\pi}{2} = \lim S_n\)</span> where
        <span class="math display"
          >\[\begin{aligned} S_n &amp; = 1 + \frac{u_1}{v_1} + \frac{u_1
          u_2}{v_1v_2} + \frac{u_1u_2 u_3}{v_1v_2v_3} + \cdots +
          \frac{u_1u_2\ldots u_{n-1}u_n}{v_1v_2\ldots v_{n-1}v_n} \\ &amp; = 1 +
          \sum_{k=1}^n \prod_{i=1}^k\frac{u_i}{v_i} \\ \end{aligned}\]</span
        >
        with <span class="math inline">\(u_i=i\)</span> and
        <span class="math inline">\(v_i=2i+1\)</span>.
      </p>
      <p>
        Using new notations
        <span class="math inline">\(\alpha_i = \delta_i = u_i\)</span> and
        <span class="math inline">\(\beta_i=v_i\)</span> and then writing
        <span class="math display"
          >\[ S_n -1 = \frac{\alpha_1}{\beta_1} + \frac{\delta_1
          \alpha_2}{\beta_1\beta_2} + \frac{\delta_1\delta_2
          \alpha_3}{\beta_1\beta_2\beta_3} + \cdots +
          \frac{\delta_1\delta_2\ldots\delta_{n-1}\alpha_n}{\beta_1\beta_2\ldots\beta_{n-1}\beta_n}
          \]</span
        >
        could sound silly at first glance. But now assume
        <span class="math inline">\(\boxed{n=2^m}\)</span>. Then, by summing
        each <span class="math inline">\((2i-1)\)</span>-st term with the
        <span class="math inline">\((2i)\)</span>-th term, we can write
        <span class="math inline">\(S_n-1\)</span> as a sum of
        <span class="math inline">\(n/2\)</span> terms with a similar
        expression:
        <span class="math display"
          >\[ S_n - 1 = \frac{\alpha'_1}{\beta'_1} + \frac{\delta'_1
          \alpha'_2}{\beta'_1\beta'_2} + \frac{\delta'_1\delta'_2
          \alpha'_3}{\beta'_1\beta'_2\beta'_3} + \cdots +
          \frac{\delta'_1\delta'_2\ldots\delta'_{\frac{n}{2}-1}\alpha'_\frac{n}{2}}{\beta'_1\beta'_2\ldots\beta'_{\frac{n}{2}-1}\beta'_{\frac{n}{2}}}
          \]</span
        >
        where <span class="math inline">\(\alpha'_i\)</span>,
        <span class="math inline">\(\delta'_i\)</span> and
        <span class="math inline">\(\beta'_i\)</span> are given by
        <span class="math display"
          >\[ \begin{aligned} \alpha'_i = \alpha_{2i-1}\beta_{2_i} +
          \alpha_{2i}\delta_{2i-1}, \quad \delta'_i = \delta_{2i-1}\delta_{2i}
          \qquad \text{and } \quad \beta'_i = \beta_{2i-1}\beta_{2i}
          \end{aligned} \]</span
        >
        for all <span class="math inline">\(i \in \{1, \ldots, n/2\}\)</span>.
      </p>
      <p>
        Continuing so on, after <span class="math inline">\(m\)</span> steps we
        obtain
        <span class="math display"
          >\[ S_n - 1 = \frac{\alpha^{(m)}}{\beta^{(m)}} \]</span
        >
        where <span class="math inline">\(\alpha^{(m)}\)</span> and
        <span class="math inline">\(\beta^{(m)}\)</span> are integer numbers
        obtained by applying above formulas
      </p>
      <p>
        The above method is the <em>binary splitting algorithm</em> for
        evaluating <span class="math inline">\(S_n\)</span> with
        <span class="math inline">\(n=2^m\)</span>, summarized as follows:
      </p>
      <ol type="1">
        <li>
          <p>
            Initialization: put
            <span class="math inline"
              >\(\alpha^{(0)}_i = \delta^{(0)}_i = u_i\)</span
            >
            and <span class="math inline">\(\beta^{(0)}_i=v_i\)</span> for
            <span class="math inline">\(i \in \{1,n\}\)</span>;
          </p>
        </li>
        <li>
          <p>
            Compute recursively for <span class="math inline">\(k\)</span> going
            from <span class="math inline">\(1\)</span> to
            <span class="math inline">\(m\)</span>
            <span class="math display"
              >\[ \begin{aligned} \alpha^{(k)}_i =
              \alpha^{(k-1)}_{2i-1}\beta^{(k-1)}_{2_i} +
              \alpha^{(k-1)}_{2i}\delta^{(k-1)}_{2i-1}, \quad \delta^{(k)}_i =
              \delta^{(k-1)}_{2i-1}\delta^{(k-1)}_{2i} \qquad \text{and } \quad
              \beta^{(k)}_i = \beta^{(k-1)}_{2i-1}\beta^{(k-1)}_{2i}
              \end{aligned} \]</span
            >
            for <span class="math inline">\(i \in \{1,n/2^k\}\)</span>;
          </p>
        </li>
        <li>
          <p>
            Evaluate
            <span class="math inline"
              >\(S_n = 1 + \frac{\alpha^{(m)}}{\beta^{(m)}}\)</span
            >.
          </p>
        </li>
      </ol>
      <p>
        The advantage of the binary splitting as compared to a direct evaluation
        of <span class="math inline">\(S_n\)</span> by summing its
        <span class="math inline">\(2^m\)</span> terms is twofold:
      </p>
      <ul>
        <li>
          the binary splitting only performs operations on integer numbers;
        </li>
        <li>
          it returns an exact expression of
          <span class="math inline">\(S_n\)</span> as a ratio of two integer
          numbers.
        </li>
      </ul>
      <div class="sourceCode" id="cb1">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb1-1"><span class="co">## example: rational approximation of pi ##</span></span>
<span id="cb1-2">bs.pi &lt;-<span class="st"> </span><span class="cf">function</span>(m){</span>
<span id="cb1-3">  u &lt;-<span class="st"> </span><span class="cf">function</span>(i) <span class="kw">as.numeric</span>(i)</span>
<span id="cb1-4">  v &lt;-<span class="st"> </span><span class="cf">function</span>(i) <span class="dv">2</span><span class="op">*</span>i<span class="op">+</span><span class="dv">1</span></span>
<span id="cb1-5">  n &lt;-<span class="st"> </span><span class="dv">2</span><span class="op">^</span>m</span>
<span id="cb1-6">  indexes &lt;-<span class="st"> </span><span class="kw">c</span>(<span class="dv">1</span><span class="op">:</span>n)</span>
<span id="cb1-7">  delta &lt;-<span class="st"> </span>alpha &lt;-<span class="st"> </span><span class="kw">u</span>(indexes)</span>
<span id="cb1-8">  beta &lt;-<span class="st"> </span><span class="kw">v</span>(indexes)</span>
<span id="cb1-9">  j &lt;-<span class="st"> </span><span class="dv">1</span>; l &lt;-<span class="st"> </span>n</span>
<span id="cb1-10">  <span class="cf">while</span>(j<span class="op">&lt;</span>n){</span>
<span id="cb1-11">    l &lt;-<span class="st"> </span>l<span class="op">/</span><span class="dv">2</span></span>
<span id="cb1-12">    odd &lt;-<span class="st"> </span><span class="dv">2</span><span class="op">*</span><span class="kw">c</span>(<span class="dv">1</span><span class="op">:</span>l); even &lt;-<span class="st"> </span>odd<span class="dv">-1</span></span>
<span id="cb1-13">    alpha &lt;-<span class="st"> </span>beta[odd]<span class="op">*</span>alpha[even] <span class="op">+</span><span class="st"> </span>delta[even]<span class="op">*</span>alpha[odd]</span>
<span id="cb1-14">    j &lt;-<span class="st"> </span><span class="dv">2</span><span class="op">*</span>j</span>
<span id="cb1-15">    beta &lt;-<span class="st"> </span>beta[odd]<span class="op">*</span>beta[even]</span>
<span id="cb1-16">    delta &lt;-<span class="st"> </span>delta[even]<span class="op">*</span>delta[odd]</span>
<span id="cb1-17">  }</span>
<span id="cb1-18">  Sn &lt;-<span class="st"> </span>alpha<span class="op">/</span>beta <span class="op">+</span><span class="st"> </span><span class="dv">1</span></span>
<span id="cb1-19">  out &lt;-<span class="st"> </span><span class="kw">list</span>(<span class="dt">alpha=</span>alpha, <span class="dt">beta=</span>beta, <span class="dt">Sn=</span>Sn)</span>
<span id="cb1-20">  <span class="kw">return</span>(out)</span>
<span id="cb1-21">}</span></code></pre>
      </div>
      <p>
        The method very well performs while
        <span class="math inline">\(m\leq 7\)</span> :
      </p>
      <div class="sourceCode" id="cb2">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb2-1"><span class="kw">print</span>(<span class="kw">bs.pi</span>(<span class="dv">7</span>),<span class="dt">digits=</span><span class="dv">22</span>)</span></code></pre>
      </div>
      <pre><code>## $alpha
## [1] 9.589805429639700552285e+254
## 
## $beta
## [1] 1.680074832206408008727e+255
## 
## $Sn
## [1] 1.570796326794896557999</code></pre>
      <div class="sourceCode" id="cb4">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb4-1"><span class="kw">print</span>(pi<span class="op">/</span><span class="dv">2</span>,<span class="dt">digits=</span><span class="dv">22</span>)</span></code></pre>
      </div>
      <pre><code>## [1] 1.570796326794896557999</code></pre>
      <p>
        But the numerator and the denominator become too gigantic when
        <span class="math inline">\(m=8\)</span>:
      </p>
      <div class="sourceCode" id="cb6">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb6-1"><span class="kw">bs.pi</span>(<span class="dv">8</span>)</span></code></pre>
      </div>
      <pre><code>## $alpha
## [1] Inf
## 
## $beta
## [1] Inf
## 
## $Sn
## [1] NaN</code></pre>
      <h2 id="second-example-exponential-of-a-rational-number">
        Second example: exponential of a rational number
      </h2>
      <p>
        It is well known that
        <span class="math inline">\(\exp(x)=\lim S_n(x)\)</span> where
        <span class="math inline">\(S_n(x)=\sum_{k=0}^n\frac{x^n}{n!}\)</span>.
        Thus, when <span class="math inline">\(x=p/q\)</span> for some integers
        <span class="math inline">\(p\)</span> and
        <span class="math inline">\(q\)</span>, we can write as before
        <span class="math display"
          >\[ S_n(x) = 1 + \sum_{k=1}^n \prod_{i=1}^k\frac{u_i}{v_i} \]</span
        >
        where <span class="math inline">\(u_i \equiv p\)</span> and
        <span class="math inline">\(v_i= i q\)</span> are integer numbers. Thus,
        we can use the binary splitting algorithm to compute
        <span class="math inline">\(S_{2^m}\)</span>:
      </p>
      <div class="sourceCode" id="cb8">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb8-1"><span class="co">## example: rational approximation of exp(p/q) ##</span></span>
<span id="cb8-2">bs.exp &lt;-<span class="st"> </span><span class="cf">function</span>(p,q,m){</span>
<span id="cb8-3">  v &lt;-<span class="st"> </span><span class="cf">function</span>(i) i<span class="op">*</span>q</span>
<span id="cb8-4">  n &lt;-<span class="st"> </span><span class="dv">2</span><span class="op">^</span>m</span>
<span id="cb8-5">  indexes &lt;-<span class="st"> </span><span class="dv">1</span><span class="op">:</span>n</span>
<span id="cb8-6">  delta &lt;-<span class="st"> </span>alpha &lt;-<span class="st"> </span><span class="kw">rep</span>(p,n)</span>
<span id="cb8-7">  beta &lt;-<span class="st"> </span><span class="kw">v</span>(indexes)</span>
<span id="cb8-8">  j &lt;-<span class="st"> </span><span class="dv">1</span>; l &lt;-<span class="st"> </span>n</span>
<span id="cb8-9">  <span class="cf">while</span>(j<span class="op">&lt;</span>n){</span>
<span id="cb8-10">    l &lt;-<span class="st"> </span>l<span class="op">/</span><span class="dv">2</span></span>
<span id="cb8-11">    odd &lt;-<span class="st"> </span><span class="dv">2</span><span class="op">*</span><span class="kw">c</span>(<span class="dv">1</span><span class="op">:</span>l); even &lt;-<span class="st"> </span>odd<span class="dv">-1</span></span>
<span id="cb8-12">    alpha &lt;-<span class="st"> </span>beta[odd]<span class="op">*</span>alpha[even] <span class="op">+</span><span class="st"> </span>delta[even]<span class="op">*</span>alpha[odd]</span>
<span id="cb8-13">    j &lt;-<span class="st"> </span><span class="dv">2</span><span class="op">*</span>j</span>
<span id="cb8-14">    beta &lt;-<span class="st"> </span>beta[odd]<span class="op">*</span>beta[even]</span>
<span id="cb8-15">    delta &lt;-<span class="st"> </span>delta[even]<span class="op">*</span>delta[odd]</span>
<span id="cb8-16">  }</span>
<span id="cb8-17">  Sn &lt;-<span class="st"> </span>alpha<span class="op">/</span>beta <span class="op">+</span><span class="st"> </span><span class="dv">1</span></span>
<span id="cb8-18">  out &lt;-<span class="st"> </span><span class="kw">list</span>(<span class="dt">alpha=</span>alpha, <span class="dt">beta=</span>beta, <span class="dt">Sn=</span>Sn)</span>
<span id="cb8-19">  <span class="kw">return</span>(out)</span>
<span id="cb8-20">}</span></code></pre>
      </div>
      <p>
        Let us try to evaluate <span class="math inline">\(\exp(1)\)</span>. For
        <span class="math inline">\(m=7\)</span>, the approximation is not
        entirely satisfactory:
      </p>
      <div class="sourceCode" id="cb9">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb9-1"><span class="kw">print</span>(<span class="kw">bs.exp</span>(<span class="dv">1</span>,<span class="dv">1</span>,<span class="dv">7</span>), <span class="dt">digits=</span><span class="dv">22</span>)</span></code></pre>
      </div>
      <pre><code>## $alpha
## [1] 6.626046675252336548016e+215
## 
## $beta
## [1] 3.856204823625804071551e+215
## 
## $Sn
## [1] 2.718281828459045534885</code></pre>
      <div class="sourceCode" id="cb11">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb11-1"><span class="kw">print</span>(<span class="kw">exp</span>(<span class="dv">1</span>), <span class="dt">digits=</span><span class="dv">22</span>)</span></code></pre>
      </div>
      <pre><code>## [1] 2.718281828459045090796</code></pre>
      <p>And for <span class="math inline">\(m=8\)</span>, it crashes:</p>
      <div class="sourceCode" id="cb13">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb13-1"><span class="kw">bs.exp</span>(<span class="dv">1</span>,<span class="dv">1</span>,<span class="dv">8</span>)</span></code></pre>
      </div>
      <pre><code>## $alpha
## [1] Inf
## 
## $beta
## [1] Inf
## 
## $Sn
## [1] NaN</code></pre>
      <h2 id="the-gmp-package-comes-to-our-rescue">
        The <code>gmp</code> package comes to our rescue
      </h2>
      <p>
        As we noted above, the binary splitting manipulates only
        <em>integer</em> numbers. The evaluation of
        <span class="math inline">\(\exp(1)\)</span> has crashed because the
        numerator and the denominator were too big integers. The crantastic
        <a href="http://www.inside-r.org/packages/cran/gmp"><code>gmp</code></a>
        package overcomes this problem because it allows arithmetic without
        limitations using the
        <a href="http://gmplib.org/"
          >C library GMP (GNU Multiple Precision Arithmetic)</a
        >.
      </p>
      <p>
        Let us show how the <code>gmp</code> works on the
        <span class="math inline">\(\pi\)</span> example. This is very easy: we
        only have to convert the two input sequences of integers
        <span class="math inline">\((u_i)\)</span> and
        <span class="math inline">\((v_i)\)</span> to sequences of
        <code>bigz</code> integers:
      </p>
      <div class="sourceCode" id="cb15">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb15-1"><span class="kw">library</span>(gmp)</span>
<span id="cb15-2"><span class="co">## rational approximation of pi with gmp ##</span></span>
<span id="cb15-3">bs.pi.gmp &lt;-<span class="st"> </span><span class="cf">function</span>(m){</span>
<span id="cb15-4">  u &lt;-<span class="st"> </span><span class="cf">function</span>(i) <span class="kw">as.numeric</span>(i)</span>
<span id="cb15-5">  v &lt;-<span class="st"> </span><span class="cf">function</span>(i) <span class="dv">2</span><span class="op">*</span>i<span class="op">+</span><span class="dv">1</span></span>
<span id="cb15-6">  n &lt;-<span class="st"> </span><span class="dv">2</span><span class="op">^</span>m</span>
<span id="cb15-7">  indexes &lt;-<span class="st"> </span><span class="dv">1</span><span class="op">:</span>n</span>
<span id="cb15-8">  delta &lt;-<span class="st"> </span>alpha &lt;-<span class="st"> </span><span class="kw">as.bigz</span>(<span class="kw">u</span>(indexes))</span>
<span id="cb15-9">  beta &lt;-<span class="st"> </span><span class="kw">as.bigz</span>(<span class="kw">v</span>(indexes))</span>
<span id="cb15-10">  j &lt;-<span class="st"> </span><span class="dv">1</span>; l &lt;-<span class="st"> </span>n</span>
<span id="cb15-11">  <span class="cf">while</span>(j<span class="op">&lt;</span>n){</span>
<span id="cb15-12">    l &lt;-<span class="st"> </span>l<span class="op">/</span><span class="dv">2</span></span>
<span id="cb15-13">    odd &lt;-<span class="st"> </span><span class="dv">2</span><span class="op">*</span><span class="kw">c</span>(<span class="dv">1</span><span class="op">:</span>l); even &lt;-<span class="st"> </span>odd<span class="dv">-1</span></span>
<span id="cb15-14">    alpha &lt;-<span class="st"> </span>beta[odd]<span class="op">*</span>alpha[even] <span class="op">+</span><span class="st"> </span>delta[even]<span class="op">*</span>alpha[odd]</span>
<span id="cb15-15">    j &lt;-<span class="st"> </span><span class="dv">2</span><span class="op">*</span>j</span>
<span id="cb15-16">    beta &lt;-<span class="st"> </span>beta[odd]<span class="op">*</span>beta[even]</span>
<span id="cb15-17">    delta &lt;-<span class="st"> </span>delta[even]<span class="op">*</span>delta[odd]</span>
<span id="cb15-18">  }</span>
<span id="cb15-19">  Sn &lt;-<span class="st"> </span>alpha<span class="op">/</span>beta <span class="op">+</span><span class="st"> </span><span class="dv">1</span></span>
<span id="cb15-20">  out &lt;-<span class="st"> </span><span class="kw">list</span>(<span class="dt">Sn=</span>Sn, <span class="dt">eval.Sn=</span><span class="kw">format</span>(<span class="kw">as.numeric</span>(Sn),<span class="dt">digits=</span><span class="dv">22</span>))</span>
<span id="cb15-21">  <span class="kw">return</span>(out)</span>
<span id="cb15-22">}</span></code></pre>
      </div>
      <p>
        The evaluation of <span class="math inline">\(S_n\)</span> with
        <span class="math inline">\(n=2^3\)</span> illustrates the first
        advantage of the <code>gmp</code> package:
      </p>
      <div class="sourceCode" id="cb16">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb16-1"><span class="kw">bs.pi.gmp</span>(<span class="dv">3</span>)</span></code></pre>
      </div>
      <pre><code>## $Sn
## Big Rational ('bigq') :
## [1] 1202048/765765
## 
## $eval.Sn
## [1] "1.569734840323075530932"</code></pre>
      <div class="sourceCode" id="cb18">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb18-1"><span class="kw">bs.pi</span>(<span class="dv">3</span>)</span></code></pre>
      </div>
      <pre><code>## $alpha
## [1] 19632735
## 
## $beta
## [1] 34459425
## 
## $Sn
## [1] 1.569735</code></pre>
      <p>
        As you can see, <span class="math inline">\(S_n\)</span> is written as
        an irreducible fraction with the <code>gmp</code> approach. But this is
        not the main strength of the <code>gmp</code> package. Now we have
        (almost) no limitation on <span class="math inline">\(m\)</span> for
        evaluating <span class="math inline">\(S_{2^m}\)</span>:
      </p>
      <div class="sourceCode" id="cb20">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb20-1"><span class="kw">bs.pi.gmp</span>(<span class="dv">8</span>)</span></code></pre>
      </div>
      <pre><code>## $Sn
## Big Rational ('bigq') :
## [1] 115056663317199981372832786803399641133848259535718238578854114440177847232763528127119686643465544336537363974090559640151844992619459739337642897335661405374200830442503779326745081494631228217510085926896107230240702464/73247346810369298651903071099557979072216039642432949710389234675732768750102001285974817825809831148661290123993641325086924401900965008305646606428886048721946203288377842830920059623434101646117412656625454480462852875
## 
## $eval.Sn
## [1] "1.570796326794896557999"</code></pre>
      <p>
        Obviously the first limitation is the width of your screen. The more
        serious limitations of the <code>gmp</code> package are beyond the scope
        of this article.
      </p>
      <p>Let us come back to the exponential example:</p>
      <div class="sourceCode" id="cb22">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb22-1"><span class="co">## rational approximation of exp(p/q) with gmp ##</span></span>
<span id="cb22-2">bs.exp.gmp &lt;-<span class="st"> </span><span class="cf">function</span>(p,q,m){</span>
<span id="cb22-3">  v &lt;-<span class="st"> </span><span class="cf">function</span>(i) i<span class="op">*</span>q</span>
<span id="cb22-4">  n &lt;-<span class="st"> </span><span class="dv">2</span><span class="op">^</span>m</span>
<span id="cb22-5">  indexes &lt;-<span class="st"> </span><span class="dv">1</span><span class="op">:</span>n</span>
<span id="cb22-6">  delta &lt;-<span class="st"> </span>alpha &lt;-<span class="st"> </span><span class="kw">as.bigz</span>(<span class="kw">rep</span>(p,n))</span>
<span id="cb22-7">  beta &lt;-<span class="st"> </span><span class="kw">as.bigz</span>(<span class="kw">v</span>(indexes))</span>
<span id="cb22-8">  j &lt;-<span class="st"> </span><span class="dv">1</span>; l &lt;-<span class="st"> </span>n</span>
<span id="cb22-9">  <span class="cf">while</span>(j<span class="op">&lt;</span>n){</span>
<span id="cb22-10">    l &lt;-<span class="st"> </span>l<span class="op">/</span><span class="dv">2</span></span>
<span id="cb22-11">    odd &lt;-<span class="st"> </span><span class="dv">2</span><span class="op">*</span><span class="kw">c</span>(<span class="dv">1</span><span class="op">:</span>l); even &lt;-<span class="st"> </span>odd<span class="dv">-1</span></span>
<span id="cb22-12">    alpha &lt;-<span class="st"> </span>beta[odd]<span class="op">*</span>alpha[even] <span class="op">+</span><span class="st"> </span>delta[even]<span class="op">*</span>alpha[odd]</span>
<span id="cb22-13">    j &lt;-<span class="st"> </span><span class="dv">2</span><span class="op">*</span>j</span>
<span id="cb22-14">    beta &lt;-<span class="st"> </span>beta[odd]<span class="op">*</span>beta[even]</span>
<span id="cb22-15">    delta &lt;-<span class="st"> </span>delta[even]<span class="op">*</span>delta[odd]</span>
<span id="cb22-16">  }</span>
<span id="cb22-17">  Sn &lt;-<span class="st"> </span>alpha<span class="op">/</span>beta <span class="op">+</span><span class="st"> </span><span class="dv">1</span></span>
<span id="cb22-18">  out &lt;-<span class="st"> </span><span class="kw">list</span>(<span class="dt">Sn=</span>Sn, <span class="dt">eval.Sn=</span><span class="kw">format</span>(<span class="kw">as.numeric</span>(Sn),<span class="dt">digits=</span><span class="dv">22</span>))</span>
<span id="cb22-19">  <span class="kw">return</span>(out)</span>
<span id="cb22-20">}</span></code></pre>
      </div>
      <div class="sourceCode" id="cb23">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb23-1"><span class="kw">bs.exp.gmp</span>(<span class="dv">1</span>,<span class="dv">1</span>,<span class="dv">8</span>)</span></code></pre>
      </div>
      <pre><code>## $Sn
## Big Rational ('bigq') :
## [1] 63021364076854400517126597190157042974914655085470311494152999074896589361987361775329179623527760806690590676400388872831695705790559736341994225392293021235691155101792729596391087505487119686065032680426816409018591609682896947897581062232056198801713371950662092427153111247485380584396839593243205795931189046725531379112787311119506517584752693953099433873873085939642331053890371322719954788883613838912023544946108979472116077229049863887551154910123100635718060217444974605564852221865532212127661/23184264198455206868083304640033314193453554602148259996206909469655931150085069983174061928660848877037186090333421197463708022559289093927629440229660162856206414393604561795747978584507961086161320755987057927235191284503958147694842900705427915576370346458939828967066328925689811313743116731571304256245141968042147553432082017992236165926654195533967789698937870367867112218743295876678624370999142239502871990876622238944437605633097728000000000000000000000000000000000000000000000000000000000000000
## 
## $eval.Sn
## [1] "2.718281828459045090796"</code></pre>
      <p>Very well.</p>
      <h2 id="a-general-function-for-the-binary-splitting-algorithm">
        A general function for the binary splitting algorithm
      </h2>
      <p>
        Before turning to the Gauss hypergeometric function we write a general
        function for the binary splitting taking as arguments the two sequences
        <span class="math inline">\((u_i)\)</span> and
        <span class="math inline">\((v_i)\)</span>:
      </p>
      <div class="sourceCode" id="cb25">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb25-1">bs.gmp &lt;-<span class="st"> </span><span class="cf">function</span>(u,v,<span class="dt">m=</span><span class="dv">7</span>,<span class="dt">value=</span><span class="st">"eval"</span>){</span>
<span id="cb25-2">  n &lt;-<span class="st"> </span><span class="dv">2</span><span class="op">^</span>m</span>
<span id="cb25-3">  indexes &lt;-<span class="st"> </span><span class="dv">1</span><span class="op">:</span>n</span>
<span id="cb25-4">  delta &lt;-<span class="st"> </span>alpha &lt;-<span class="st"> </span><span class="kw">as.bigz</span>(<span class="kw">u</span>(indexes))</span>
<span id="cb25-5">  beta &lt;-<span class="st"> </span><span class="kw">as.bigz</span>(<span class="kw">v</span>(indexes))</span>
<span id="cb25-6">  j &lt;-<span class="st"> </span><span class="dv">1</span>; l &lt;-<span class="st"> </span>n</span>
<span id="cb25-7">  <span class="cf">while</span>(j<span class="op">&lt;</span>n){</span>
<span id="cb25-8">    l &lt;-<span class="st"> </span>l<span class="op">/</span><span class="dv">2</span></span>
<span id="cb25-9">    odd &lt;-<span class="st"> </span><span class="dv">2</span><span class="op">*</span><span class="kw">c</span>(<span class="dv">1</span><span class="op">:</span>l); even &lt;-<span class="st"> </span>odd<span class="dv">-1</span></span>
<span id="cb25-10">    alpha &lt;-<span class="st"> </span>beta[odd]<span class="op">*</span>alpha[even] <span class="op">+</span><span class="st"> </span>delta[even]<span class="op">*</span>alpha[odd]</span>
<span id="cb25-11">    j &lt;-<span class="st"> </span><span class="dv">2</span><span class="op">*</span>j</span>
<span id="cb25-12">    beta &lt;-<span class="st"> </span>beta[odd]<span class="op">*</span>beta[even]</span>
<span id="cb25-13">    delta &lt;-<span class="st"> </span>delta[even]<span class="op">*</span>delta[odd]</span>
<span id="cb25-14">  }</span>
<span id="cb25-15">  Sn &lt;-<span class="st"> </span>alpha<span class="op">/</span>beta <span class="op">+</span><span class="st"> </span><span class="dv">1</span></span>
<span id="cb25-16">  eval.Sn &lt;-<span class="st"> </span><span class="kw">format</span>(<span class="kw">as.numeric</span>(Sn) ,<span class="dt">digits=</span><span class="dv">22</span>)</span>
<span id="cb25-17">  out &lt;-<span class="st"> </span><span class="cf">switch</span>(value, </span>
<span id="cb25-18">                <span class="st">"eval"</span>=eval.Sn, </span>
<span id="cb25-19">                <span class="st">"exact"</span>=Sn, </span>
<span id="cb25-20">                <span class="st">"both"</span>=<span class="kw">list</span>(<span class="dt">Sn=</span>Sn, <span class="dt">eval.Sn=</span>eval.Sn))</span>
<span id="cb25-21">  <span class="kw">return</span>(out)</span>
<span id="cb25-22">}</span></code></pre>
      </div>
      <h2 id="the-gauss-hypergeometric-function">
        The Gauss hypergeometric function
      </h2>
      <p>
        Now consider the <em>Gauss hypergeometric function</em>
        <span class="math inline">\({}_2\!F_1\)</span>. This is the function
        <span class="math inline"
          >\({}_2\!F_1(\alpha,\beta,\gamma; \cdot)\)</span
        ><br />
        with complex parameters <span class="math inline">\(\alpha\)</span>,
        <span class="math inline">\(\beta\)</span>,
        <span class="math inline">\(\gamma \not\in \mathbb{Z}^-\)</span> and
        complex variable <span class="math inline">\(z\)</span> defined for
        <span class="math inline">\(|z|&lt;1\)</span> as the sum of an absolute
        convergent series
        <span class="math display"
          >\[{}_2\!F_1(\alpha,\beta,\gamma; z) = \sum_{n=0}^{\infty}\frac{
          {(\alpha)}_{n}{(\beta)}_n}{ {(\gamma)}_{n}}\frac{z^n}{n!},\]</span
        >
        and extended by analytical continuation in the complex plane with the
        cut along <span class="math inline">\((1,+\infty)\)</span>. Here
        <span class="math inline">\({(a)}_n:=a(a+1)\cdots(a+n-1)\)</span>
        denotes the Pochhammer symbol used to represent the
        <span class="math inline">\(n\)</span>-th ascending factorial of
        <span class="math inline">\(a\)</span>.
      </p>
      <p>
        The binary splitting allows to evaluate
        <span class="math inline">\({}_2\!F_1(\alpha,\beta,\gamma; z)\)</span>
        for rational values of
        <span class="math inline">\(\alpha,\beta,\gamma, z\)</span> by
        manipulating only integer numbers. This is performed by the R function
        below
      </p>
      <div class="sourceCode" id="cb26">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb26-1"><span class="co">## rational approximation of  2F1(a1/a2, b1/b2, c1/c2; p/q) with gmp ##</span></span>
<span id="cb26-2">hypergeo_bs &lt;-<span class="st"> </span><span class="cf">function</span>(a1,a2, b1,b2, c1,c2, p,q, m){</span>
<span id="cb26-3">  u &lt;-<span class="st"> </span><span class="cf">function</span>(i) c2<span class="op">*</span>(a1<span class="op">+</span>(i<span class="dv">-1</span>)<span class="op">*</span>a2)<span class="op">*</span>(b1<span class="op">+</span>(i<span class="dv">-1</span>)<span class="op">*</span>b2)<span class="op">*</span>p</span>
<span id="cb26-4">  v &lt;-<span class="st"> </span><span class="cf">function</span>(i) a2<span class="op">*</span>b2<span class="op">*</span>i<span class="op">*</span>(c1<span class="op">+</span>(i<span class="dv">-1</span>)<span class="op">*</span>c2)<span class="op">*</span>q</span>
<span id="cb26-5">  <span class="kw">bs.gmp</span>(u,v,m)</span>
<span id="cb26-6">}</span></code></pre>
      </div>
      <p>
        For more convenience I have firstly written the function below which
        returns the irreducible rational notation of a given number
        <span class="math inline">\(x\)</span>. The user can also specify a
        rounding order for <span class="math inline">\(x\)</span>.
      </p>
      <div class="sourceCode" id="cb27">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb27-1">n.decimals &lt;-<span class="st"> </span><span class="cf">function</span>(x, <span class="dt">tol=</span>.Machine<span class="op">$</span>double.eps){</span>
<span id="cb27-2">  <span class="kw">sapply</span>(x, <span class="cf">function</span>(x) {</span>
<span id="cb27-3">        i &lt;-<span class="st"> </span><span class="dv">0</span></span>
<span id="cb27-4">        <span class="cf">while</span>(<span class="kw">abs</span>(x<span class="op">-</span><span class="kw">round</span>(x,i))<span class="op">&gt;</span>tol){i &lt;-<span class="st"> </span>i<span class="op">+</span><span class="dv">1</span>}</span>
<span id="cb27-5">    <span class="kw">return</span>(i)</span>
<span id="cb27-6">    })</span>
<span id="cb27-7">}</span>
<span id="cb27-8">irred.frac &lt;-<span class="st"> </span><span class="cf">function</span>(x, <span class="dt">rnd=</span><span class="kw">n.decimals</span>(x)){</span>
<span id="cb27-9">  b &lt;-<span class="st"> </span><span class="dv">10</span><span class="op">^</span>rnd</span>
<span id="cb27-10">  a &lt;-<span class="st"> </span><span class="kw">as.bigz</span>(b<span class="op">*</span><span class="kw">round</span>(x,rnd))</span>
<span id="cb27-11">  num &lt;-<span class="st"> </span>a<span class="op">/</span><span class="kw">gcd.bigz</span>(a,b)</span>
<span id="cb27-12">  den &lt;-<span class="st"> </span>b<span class="op">/</span><span class="kw">gcd.bigz</span>(a,b)</span>
<span id="cb27-13">  <span class="kw">return</span>(<span class="kw">list</span>(<span class="dt">num=</span>num, <span class="dt">den=</span>den))</span>
<span id="cb27-14">}</span></code></pre>
      </div>
      <p>For example:</p>
      <div class="sourceCode" id="cb28">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb28-1"><span class="kw">irred.frac</span>(pi)</span></code></pre>
      </div>
      <pre><code>## $num
## Big Rational ('bigq') :
## [1] 3141592653589793
## 
## $den
## Big Rational ('bigq') :
## [1] 1000000000000000</code></pre>
      <div class="sourceCode" id="cb30">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb30-1"><span class="kw">irred.frac</span>(pi, <span class="dt">rnd=</span><span class="dv">7</span>)</span></code></pre>
      </div>
      <pre><code>## $num
## Big Rational ('bigq') :
## [1] 31415927
## 
## $den
## Big Rational ('bigq') :
## [1] 10000000</code></pre>
      <p>
        Finally, here is a user-friendly function for evaluating
        <span class="math inline">\({}_2\!F_1\)</span> with the binary
        splitting:
      </p>
      <div class="sourceCode" id="cb32">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb32-1">Hypergeometric2F1 &lt;-<span class="st"> </span><span class="cf">function</span>(a, b, c, z, <span class="dt">m=</span><span class="dv">7</span>,</span>
<span id="cb32-2">                              <span class="dt">rnd.params=</span><span class="kw">max</span>(<span class="kw">n.decimals</span>(<span class="kw">c</span>(a,b,c))), </span>
<span id="cb32-3">                              <span class="dt">rnd.z=</span><span class="kw">n.decimals</span>(z),</span>
<span id="cb32-4">                              <span class="dt">check.cv=</span><span class="ot">FALSE</span>){</span>
<span id="cb32-5">  frac.a &lt;-<span class="st"> </span><span class="kw">irred.frac</span>(a,rnd.params)</span>
<span id="cb32-6">  frac.b &lt;-<span class="st"> </span><span class="kw">irred.frac</span>(b,rnd.params)</span>
<span id="cb32-7">  frac.c &lt;-<span class="st"> </span><span class="kw">irred.frac</span>(c,rnd.params)</span>
<span id="cb32-8">  a1 &lt;-<span class="st"> </span>frac.a<span class="op">$</span>num; a2 &lt;-<span class="st"> </span>frac.a<span class="op">$</span>den</span>
<span id="cb32-9">  b1 &lt;-<span class="st"> </span>frac.b<span class="op">$</span>num; b2 &lt;-<span class="st"> </span>frac.b<span class="op">$</span>den</span>
<span id="cb32-10">  c1 &lt;-<span class="st"> </span>frac.c<span class="op">$</span>num; c2 &lt;-<span class="st"> </span>frac.c<span class="op">$</span>den</span>
<span id="cb32-11">  frac.z &lt;-<span class="st"> </span><span class="kw">irred.frac</span>(z,rnd.z)</span>
<span id="cb32-12">  p &lt;-<span class="st"> </span>frac.z<span class="op">$</span>num; q &lt;-<span class="st"> </span>frac.z<span class="op">$</span>den</span>
<span id="cb32-13">  out &lt;-<span class="st"> </span><span class="kw">hypergeo_bs</span>(a1,a2, b1,b2, c1,c2, p,q, m)</span>
<span id="cb32-14">  <span class="cf">if</span>(check.cv){</span>
<span id="cb32-15">    x &lt;-<span class="st"> </span><span class="kw">hypergeo_bs</span>(a1,a2, b1,b2, c1,c2, p,q, m<span class="op">+</span><span class="dv">1</span>)</span>
<span id="cb32-16">    cv &lt;-<span class="st"> </span>x<span class="op">==</span>out</span>
<span id="cb32-17">    out &lt;-<span class="st"> </span><span class="kw">list</span>(<span class="dt">result=</span>out, <span class="dt">convergence=</span>cv)</span>
<span id="cb32-18">    <span class="cf">if</span>(<span class="op">!</span>cv){</span>
<span id="cb32-19">      out<span class="op">$</span>convergence &lt;-<span class="st"> </span><span class="kw">paste</span>(out<span class="op">$</span>convergence, <span class="st">" - m="</span>, m, <span class="st">" need to be increased"</span>, <span class="dt">sep=</span><span class="st">""</span>)</span>
<span id="cb32-20">    }</span>
<span id="cb32-21">  }</span>
<span id="cb32-22">  <span class="kw">return</span>(out)</span>
<span id="cb32-23">}</span></code></pre>
      </div>
      <p>For example:</p>
      <div class="sourceCode" id="cb33">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb33-1">a &lt;-<span class="st"> </span><span class="fl">20.5</span>; b &lt;-<span class="st"> </span><span class="fl">11.92</span>; c &lt;-<span class="st"> </span><span class="dv">19</span></span>
<span id="cb33-2">z &lt;-<span class="st"> </span><span class="fl">0.5</span></span>
<span id="cb33-3"><span class="kw">Hypergeometric2F1</span>(a,b,c,z)</span></code></pre>
      </div>
      <pre><code>## [1] "8057.994139606238604756"</code></pre>
      <div class="sourceCode" id="cb35">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb35-1"><span class="kw">Hypergeometric2F1</span>(a,b,c,z, <span class="dt">m=</span><span class="dv">3</span>, <span class="dt">check.cv=</span><span class="ot">TRUE</span>)</span></code></pre>
      </div>
      <pre><code>## $result
## [1] "1522.06880440136683319"
## 
## $convergence
## [1] "FALSE - m=3 need to be increased"</code></pre>
      <div class="sourceCode" id="cb37">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb37-1"><span class="kw">Hypergeometric2F1</span>(a,b,c,z, <span class="dt">m=</span><span class="dv">7</span>, <span class="dt">check.cv=</span><span class="ot">TRUE</span>)</span></code></pre>
      </div>
      <pre><code>## $result
## [1] "8057.994139606238604756"
## 
## $convergence
## [1] TRUE</code></pre>
      <p>
        Note that Robin Hankin’s <code>gsl</code> package does an excellent job:
      </p>
      <div class="sourceCode" id="cb39">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb39-1"><span class="kw">library</span>(gsl)</span>
<span id="cb39-2"><span class="kw">hyperg_2F1</span>(a,b,c,z)</span></code></pre>
      </div>
      <pre><code>## [1] 8057.994</code></pre>
      <h1 id="update-2018-11-13">Update 2018-11-13</h1>
      <ul>
        <li>
          Converting a <code>bigq</code> rational number to a decimal number
          with <code>as.numeric</code> is not a good idea. It is better to use
          the <code>mpfr</code> function of the <code>Rmpfr</code> package, or
          the <code>q2d</code> function of the package <code>rcdd</code>:
        </li>
      </ul>
      <div class="sourceCode" id="cb41">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb41-1">halfpi_bigq &lt;-<span class="st"> </span><span class="kw">bs.pi.gmp</span>(<span class="dv">8</span>)<span class="op">$</span>Sn</span>
<span id="cb41-2"><span class="kw">library</span>(Rmpfr)</span>
<span id="cb41-3"><span class="kw">mpfr</span>(halfpi_bigq, <span class="dv">128</span>)</span></code></pre>
      </div>
      <pre><code>## 1 'mpfr' number of precision  128   bits 
## [1] 1.570796326794896619231321691639751442098</code></pre>
      <div class="sourceCode" id="cb43">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb43-1"><span class="kw">library</span>(rcdd)</span>
<span id="cb43-2"><span class="kw">q2d</span>(<span class="kw">as.character</span>(halfpi_bigq))</span></code></pre>
      </div>
      <pre><code>## [1] 1.570796</code></pre>
      <ul>
        <li>
          My function <code>irred.frac</code> is not good. To convert a decimal
          number to a <code>bigq</code> rational number, it is better to use the
          <code>d2q</code> function of the <code>rcdd</code> package:
        </li>
      </ul>
      <div class="sourceCode" id="cb45">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb45-1"><span class="kw">as.bigq</span>(<span class="kw">d2q</span>(pi))</span></code></pre>
      </div>
      <pre><code>## Big Rational ('bigq') :
## [1] 884279719003555/281474976710656</code></pre>
    </div>
  </div>
</div>
]]></description>
      <pubDate>Sun, 04 Jun 2017 00:00:00 UT</pubDate>
      <guid>https://laustep.github.io/stlahblog/posts/hypergeometric.html</guid>
      <dc:creator>Stéphane Laurent</dc:creator>
      <category>R</category>
    </item>
    <item>
      <title>Calling a Haskell function in R - a float expansion example</title>
      <link>https://laustep.github.io/stlahblog/posts/FloatExpansionHaskell.html</link>
      <description><![CDATA[<div class="container-fluid">
  <div class="main col-sm-12">
    <div class="content">
      <ul>
        <li>
          <a href="https://laustep.github.io/stlahblog/posts/FloatExpansionHaskell.html#binary-and-more-expansion-in-haskell"
            >Binary (and more) expansion in Haskell</a
          >
        </li>
        <li>
          <a href="https://laustep.github.io/stlahblog/posts/FloatExpansionHaskell.html#first-dynamic-linker-string-output"
            >First dynamic linker: string output</a
          >
          <ul>
            <li>
              <a href="https://laustep.github.io/stlahblog/posts/FloatExpansionHaskell.html#make-the-function-compatible-with-r"
                >Make the function compatible with R</a
              >
            </li>
            <li><a href="https://laustep.github.io/stlahblog/posts/FloatExpansionHaskell.html#compilation">Compilation</a></li>
            <li><a href="https://laustep.github.io/stlahblog/posts/FloatExpansionHaskell.html#call-in-r">Call in R</a></li>
          </ul>
        </li>
        <li>
          <a href="https://laustep.github.io/stlahblog/posts/FloatExpansionHaskell.html#second-dynamic-linker-vector-output"
            >Second dynamic linker: vector output</a
          >
        </li>
        <li>
          <a href="https://laustep.github.io/stlahblog/posts/FloatExpansionHaskell.html#update-the-foreign-library-stanza"
            >2020 update: the ‘foreign-library’ stanza</a
          >
        </li>
      </ul>
      <p>
        In
        <a href="https://laustep.github.io/stlahblog/posts/DyadicExpansion.html"
          >the previous article</a
        >, I wrote a R function returning the binary expansion of a real number
        in <span class="math inline">\([0,1]\)</span>. In the present article, I
        will:
      </p>
      <ul>
        <li>write a similar function in Haskell;</li>
        <li>
          write this function in a way compatible with R, inside a module;
        </li>
        <li>
          compile this module in a dynamic linker suitable for R (<code
            >dll</code
          >
          for Windows, <code>so</code> for Linux);
        </li>
        <li>call the function from R through the dynamic linker.</li>
      </ul>
      <p>
        The creation of a Haskell function compatible with R is allowed by the
        <a href="https://wiki.haskell.org/Foreign_Function_Interface"
          >Foreign Function Interface (FFI)</a
        >, in other words the <code>Foreign</code> module.
      </p>
      <p>
        I learnt how to do such things with the help of
        <a
          href="http://neilmitchell.blogspot.be/2011/10/calling-haskell-from-r.html"
          >this blog post by Neil Mitchell</a
        >.
      </p>
      <h2 id="binary-and-more-expansion-in-haskell">
        Binary (and more) expansion in Haskell
      </h2>
      <p>
        Let’s go to Haskell. The <code>floatExpansion</code> function below is
        obtained by a small modification of the
        <code>floatToDigits</code> function of the <code>Numeric</code> module.
        It returns the expansion of a real number
        <span class="math inline">\(u \in [0,1]\)</span> in a given integer
        base.
      </p>
      <div class="sourceCode" id="cb1">
        <pre
          class="sourceCode haskell"
        ><code class="sourceCode haskell"><span id="cb1-1"><span class="kw">import</span> <span class="dt">Numeric</span> (floatToDigits)</span>
<span id="cb1-2"><span class="op">:</span>{</span>
<span id="cb1-3"><span class="kw">let</span><span class="ot"> floatExpansion ::</span> <span class="dt">RealFloat</span> a <span class="ot">=&gt;</span> <span class="dt">Integer</span> <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> [<span class="dt">Int</span>];</span>
<span id="cb1-4">    floatExpansion base u <span class="ot">=</span> <span class="fu">replicate</span> (<span class="op">-</span> <span class="fu">snd</span> expansion) <span class="dv">0</span> <span class="op">++</span> <span class="fu">fst</span> expansion</span>
<span id="cb1-5">      <span class="kw">where</span> expansion <span class="ot">=</span> floatToDigits base u</span>
<span id="cb1-6"><span class="op">:</span>}</span>
<span id="cb1-7">floatExpansion <span class="dv">2</span> <span class="fl">0.125</span></span>
<span id="cb1-8"><span class="pp">## [0,0,1]</span></span></code></pre>
      </div>
      <h2 id="first-dynamic-linker-string-output">
        First dynamic linker: string output
      </h2>
      <p>
        Firstly, I show how to make this function compatible with R when its
        output is a string instead of a list. It is easy to convert a list to a
        string in Haskell:
      </p>
      <div class="sourceCode" id="cb2">
        <pre
          class="sourceCode haskell"
        ><code class="sourceCode haskell"><span id="cb2-1"><span class="fu">show</span> [<span class="dv">0</span>, <span class="dv">0</span>, <span class="dv">1</span>]</span>
<span id="cb2-2"><span class="pp">## "[0,0,1]"</span></span></code></pre>
      </div>
      <p>
        To get the output as a vector in R, more work is needed, and I will do
        it in the next section.
      </p>
      <h3 id="make-the-function-compatible-with-r">
        Make the function compatible with R
      </h3>
      <p>To make the function compatible with R, there are two rules:</p>
      <ul>
        <li>
          <p>
            Every argument must be a pointer (<code>Ptr</code>) to a C
            compatible type: <code>CInt</code>, <code>CDouble</code> or
            <code>CString</code>.
          </p>
        </li>
        <li>
          <p>The result must be <code>IO ()</code>.</p>
        </li>
      </ul>
      <p>
        A value of type <code>Ptr</code> represents a pointer to an object. This
        type is provided by the
        <a
          href="https://hackage.haskell.org/package/base-4.9.0.0/docs/Foreign-Ptr.html"
          ><code>Foreign.Ptr</code> module</a
        >, which is imported via the <code>Foreign</code> module. The types
        <code>CInt</code>, <code>CDouble</code> and <code>CString</code> are
        provided by the
        <a
          href="https://hackage.haskell.org/package/base-4.9.0.0/docs/Foreign-C.html"
          ><code>Foreign.C</code> module</a
        >.
      </p>
      <p>We end up with this module:</p>
      <div class="sourceCode" id="cb3">
        <pre
          class="sourceCode numberSource haskell numberLines"
        ><code class="sourceCode haskell"><span id="cb3-1"><span class="co">-- FloatExpansion1.hs</span></span>
<span id="cb3-2"><span class="ot">{-# LANGUAGE ForeignFunctionInterface #-}</span></span>
<span id="cb3-3"></span>
<span id="cb3-4"><span class="kw">module</span> <span class="dt">FloatExpansion</span> <span class="kw">where</span></span>
<span id="cb3-5"></span>
<span id="cb3-6"><span class="kw">import</span> <span class="dt">Foreign</span></span>
<span id="cb3-7"><span class="kw">import</span> <span class="dt">Foreign.C</span></span>
<span id="cb3-8"><span class="kw">import</span> <span class="dt">Numeric</span> (floatToDigits)</span>
<span id="cb3-9"></span>
<span id="cb3-10">foreign export ccall<span class="ot"> floatExpansion ::</span> <span class="dt">Ptr</span> <span class="dt">CInt</span> <span class="ot">-&gt;</span> <span class="dt">Ptr</span> <span class="dt">CDouble</span> <span class="ot">-&gt;</span> <span class="dt">Ptr</span> <span class="dt">CString</span> </span>
<span id="cb3-11">                                    <span class="ot">-&gt;</span> <span class="dt">IO</span> ()</span>
<span id="cb3-12"></span>
<span id="cb3-13"><span class="ot">floatExpansion ::</span> <span class="dt">Ptr</span> <span class="dt">CInt</span> <span class="ot">-&gt;</span> <span class="dt">Ptr</span> <span class="dt">CDouble</span> <span class="ot">-&gt;</span> <span class="dt">Ptr</span> <span class="dt">CString</span> <span class="ot">-&gt;</span> <span class="dt">IO</span> ()</span>
<span id="cb3-14">floatExpansion base u result <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb3-15">  base <span class="ot">&lt;-</span> peek base</span>
<span id="cb3-16">  u <span class="ot">&lt;-</span> peek u</span>
<span id="cb3-17">  expansion <span class="ot">&lt;-</span> newCString <span class="op">$</span> <span class="fu">show</span> <span class="op">$</span> floatExpansion' (<span class="fu">toInteger</span> base) u</span>
<span id="cb3-18">  poke result expansion</span>
<span id="cb3-19"></span>
<span id="cb3-20"><span class="ot">floatExpansion' ::</span> <span class="dt">RealFloat</span> a <span class="ot">=&gt;</span> <span class="dt">Integer</span> <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> [<span class="dt">Int</span>]</span>
<span id="cb3-21">floatExpansion' base u <span class="ot">=</span> <span class="fu">replicate</span> (<span class="op">-</span> <span class="fu">snd</span> expansion) <span class="dv">0</span> <span class="op">++</span> <span class="fu">fst</span> expansion</span>
<span id="cb3-22">  <span class="kw">where</span> expansion <span class="ot">=</span> floatToDigits base u</span></code></pre>
      </div>
      <h3 id="compilation">Compilation</h3>
      <p>
        We need the following C file to do the compilation, as explained in the
        <a
          href="https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/win32-dlls.html#making-dlls-to-be-called-from-other-languages"
          >GHC users guide</a
        >.
      </p>
      <div class="sourceCode" id="cb4">
        <pre
          class="sourceCode c"
        ><code class="sourceCode c"><span id="cb4-1"><span class="co">// StartEnd.c</span></span>
<span id="cb4-2"><span class="pp">#include </span><span class="im">&lt;Rts.h&gt;</span></span>
<span id="cb4-3"></span>
<span id="cb4-4"><span class="dt">void</span> HsStart()</span>
<span id="cb4-5">{</span>
<span id="cb4-6"><span class="dt">int</span> argc = <span class="dv">1</span>;</span>
<span id="cb4-7"><span class="dt">char</span>* argv[] = {<span class="st">"ghcDll"</span>, NULL}; <span class="co">// argv must end with NULL</span></span>
<span id="cb4-8"></span>
<span id="cb4-9"><span class="co">// Initialize Haskell runtime</span></span>
<span id="cb4-10"><span class="dt">char</span>** args = argv;</span>
<span id="cb4-11">hs_init(&amp;argc, &amp;args);</span>
<span id="cb4-12">}</span>
<span id="cb4-13"></span>
<span id="cb4-14"><span class="dt">void</span> HsEnd()</span>
<span id="cb4-15">{</span>
<span id="cb4-16">hs_exit();</span>
<span id="cb4-17">}</span></code></pre>
      </div>
      <p>Then we compile the library with this command on Linux:</p>
      <div class="sourceCode" id="cb5">
        <pre
          class="sourceCode bash"
        ><code class="sourceCode bash"><span id="cb5-1"><span class="ex">ghc</span> -shared -fPIC -dynamic -lHSrts-ghc8.0.2 FloatExpansion1.hs StartEnd.c -o FloatExpansion1.so</span></code></pre>
      </div>
      <p>and this command on Windows:</p>
      <div class="sourceCode" id="cb6">
        <pre
          class="sourceCode bash"
        ><code class="sourceCode bash"><span id="cb6-1"><span class="ex">ghc</span> -shared -fPIC FloatExpansion1.hs StartEnd.c -o FloatExpansion1.dll</span></code></pre>
      </div>
      <p>
        This creates the dynamic linker <code>FloatExpansion1.so</code> on
        Linux, <code>FloatExpansion1.dll</code> on Windows.
      </p>
      <p>
        In a cabal file, assuming <code>StartEnd.c</code> is in the project
        directory, we can do:
      </p>
      <pre class="cabal"><code>library
  hs-source-dirs:      src
  exposed-modules:     FloatExpansion
  build-depends:       base &gt;= 4.7 &amp;&amp; &lt; 5
  default-language:    Haskell2010
  if os(windows)
    ghc-options:       -O2 -shared -fPIC StartEnd.c -o FloatExpansion1.dll
  else
    ghc-options:       -O2 -shared -fPIC -dynamic StartEnd.c -o FloatExpansion1.so
    extra-libraries:   HSrts-ghc8.0.2</code></pre>
      <h3 id="call-in-r">Call in R</h3>
      <p>We firstly load the library with:</p>
      <div class="sourceCode" id="cb8">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb8-1">dll &lt;-<span class="st"> "Haskell/DLLs/FloatExpansion1.so"</span></span>
<span id="cb8-2"><span class="kw">dyn.load</span>(dll)</span>
<span id="cb8-3"><span class="kw">.C</span>(<span class="st">"HsStart"</span>)</span>
<span id="cb8-4"><span class="co">## list()</span></span></code></pre>
      </div>
      <p>
        And we invoke the function with the help of the
        <code>.C</code> function, as follows:
      </p>
      <div class="sourceCode" id="cb9">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb9-1"><span class="kw">.C</span>(<span class="st">"floatExpansion"</span>, <span class="dt">base =</span> 2L, <span class="dt">x =</span> <span class="fl">0.125</span>, <span class="dt">result =</span> <span class="st">""</span>)<span class="op">$</span>result</span>
<span id="cb9-2"><span class="co">## [1] "[0,0,1]"</span></span></code></pre>
      </div>
      <p>
        It works. But it would be better to have a vector as output, rather than
        a string.
      </p>
      <div class="sourceCode" id="cb10">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb10-1"><span class="kw">dyn.unload</span>(dll)</span></code></pre>
      </div>
      <h2 id="second-dynamic-linker-vector-output">
        Second dynamic linker: vector output
      </h2>
      <p>
        To get the output as a vector, the additional modules we need are:
        <code>Foreign.R</code>, <code>Foreign.R.Types</code> and
        <code>Data.Vector.SEXP</code>. They are provided by the
        <a href="https://hackage.haskell.org/package/inline-r"
          ><code>inline-r</code> package</a
        >. The <code>[Int]</code> type of the output list of the
        <code>floatExpansion</code> function must be converted to
        <code>[Int32]</code>. We write a simple function
        <code>intToInt32</code> to help us to do the conversion. It works with
        the help of the <code>Data.Int</code> module which is imported via the
        <code>Foreign</code> module.
      </p>
      <p>We end up with this module:</p>
      <div class="sourceCode" id="cb11">
        <pre
          class="sourceCode numberSource haskell numberLines"
        ><code class="sourceCode haskell"><span id="cb11-1"><span class="co">-- FloatExpansion2.hs</span></span>
<span id="cb11-2"><span class="ot">{-# LANGUAGE ForeignFunctionInterface #-}</span></span>
<span id="cb11-3"><span class="ot">{-# LANGUAGE DataKinds #-}</span></span>
<span id="cb11-4"></span>
<span id="cb11-5"><span class="kw">module</span> <span class="dt">FloatExpansion</span> <span class="kw">where</span></span>
<span id="cb11-6"></span>
<span id="cb11-7"><span class="kw">import</span> <span class="dt">Foreign</span></span>
<span id="cb11-8"><span class="kw">import</span> <span class="dt">Foreign.C</span></span>
<span id="cb11-9"><span class="kw">import</span> <span class="dt">Foreign.R</span> (<span class="dt">SEXP</span>)</span>
<span id="cb11-10"><span class="kw">import</span> <span class="kw">qualified</span> <span class="dt">Foreign.R.Type</span> <span class="kw">as</span> <span class="dt">R</span></span>
<span id="cb11-11"><span class="kw">import</span> <span class="kw">qualified</span> <span class="dt">Data.Vector.SEXP</span> <span class="kw">as</span> <span class="dt">DV</span></span>
<span id="cb11-12"><span class="kw">import</span> <span class="dt">Numeric</span> (floatToDigits)</span>
<span id="cb11-13"></span>
<span id="cb11-14">foreign export ccall<span class="ot"> floatExpansion ::</span> <span class="dt">Ptr</span> <span class="dt">CInt</span> <span class="ot">-&gt;</span> <span class="dt">Ptr</span> <span class="dt">CDouble</span> </span>
<span id="cb11-15">                                    <span class="ot">-&gt;</span> <span class="dt">Ptr</span> (<span class="dt">SEXP</span> s <span class="dt">R.Int</span>) <span class="ot">-&gt;</span> <span class="dt">IO</span> ()</span>
<span id="cb11-16"></span>
<span id="cb11-17"><span class="ot">floatExpansion ::</span> <span class="dt">Ptr</span> <span class="dt">CInt</span> <span class="ot">-&gt;</span> <span class="dt">Ptr</span> <span class="dt">CDouble</span> <span class="ot">-&gt;</span> <span class="dt">Ptr</span> (<span class="dt">SEXP</span> s <span class="dt">R.Int</span>) <span class="ot">-&gt;</span> <span class="dt">IO</span> ()</span>
<span id="cb11-18">floatExpansion base u result <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb11-19">  base <span class="ot">&lt;-</span> peek base</span>
<span id="cb11-20">  u <span class="ot">&lt;-</span> peek u</span>
<span id="cb11-21">  <span class="kw">let</span> expansion <span class="ot">=</span> <span class="fu">map</span> intToInt32 <span class="op">$</span> floatExpansion' (<span class="fu">toInteger</span> base) u</span>
<span id="cb11-22">  poke result <span class="op">$</span> DV.toSEXP <span class="op">$</span> DV.fromList expansion</span>
<span id="cb11-23"></span>
<span id="cb11-24"><span class="ot">intToInt32 ::</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Int32</span></span>
<span id="cb11-25">intToInt32 <span class="ot">=</span> <span class="fu">fromIntegral</span></span>
<span id="cb11-26"></span>
<span id="cb11-27"><span class="ot">floatExpansion' ::</span> <span class="dt">RealFloat</span> a <span class="ot">=&gt;</span> <span class="dt">Integer</span> <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> [<span class="dt">Int</span>]</span>
<span id="cb11-28">floatExpansion' base u <span class="ot">=</span> <span class="fu">replicate</span> (<span class="op">-</span> <span class="fu">snd</span> expansion) <span class="dv">0</span> <span class="op">++</span> <span class="fu">fst</span> expansion</span>
<span id="cb11-29">  <span class="kw">where</span> expansion <span class="ot">=</span> floatToDigits base u</span></code></pre>
      </div>
      <p>We compile the library as before. And we load it in R as before:</p>
      <div class="sourceCode" id="cb12">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb12-1">dll &lt;-<span class="st"> "Haskell/DLLs/FloatExpansion2.so"</span></span>
<span id="cb12-2"><span class="kw">dyn.load</span>(dll)</span>
<span id="cb12-3"><span class="kw">.C</span>(<span class="st">"HsStart"</span>)</span>
<span id="cb12-4"><span class="co">## list()</span></span></code></pre>
      </div>
      <p>
        And we invoke the function with the help of the
        <code>.C</code> function, as follows:
      </p>
      <div class="sourceCode" id="cb13">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb13-1"><span class="kw">.C</span>(<span class="st">"floatExpansion"</span>, <span class="dt">base =</span> 2L, <span class="dt">x =</span> <span class="fl">0.125</span>, <span class="dt">result =</span> <span class="kw">list</span>(0L))<span class="op">$</span>result</span>
<span id="cb13-2"><span class="co">## [[1]]</span></span>
<span id="cb13-3"><span class="co">## [1] 0 0 1</span></span></code></pre>
      </div>
      <p>In fact, the output is a list with one element, the desired vector.</p>
      <p>Let’s write a user-friendly function:</p>
      <div class="sourceCode" id="cb14">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb14-1">floatExpand &lt;-<span class="st"> </span><span class="cf">function</span>(x, <span class="dt">base =</span> 2L){</span>
<span id="cb14-2">  <span class="kw">.C</span>(</span>
<span id="cb14-3">    <span class="st">"floatExpansion"</span>, </span>
<span id="cb14-4">    <span class="dt">base =</span> <span class="kw">as.integer</span>(base), <span class="dt">x =</span> <span class="kw">as.double</span>(x), <span class="dt">result =</span> <span class="kw">list</span>(0L)</span>
<span id="cb14-5">  )<span class="op">$</span>result[[1L]]</span>
<span id="cb14-6">}</span></code></pre>
      </div>
      <p>Let’s compare it with my R function <code>num2dyadic</code>:</p>
      <div class="sourceCode" id="cb15">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb15-1"><span class="kw">library</span>(microbenchmark)</span>
<span id="cb15-2"><span class="kw">microbenchmark</span>(</span>
<span id="cb15-3">  <span class="dt">floatExpand =</span> <span class="kw">floatExpand</span>(<span class="kw">runif</span>(<span class="dv">1</span>)),</span>
<span id="cb15-4">  <span class="dt">num2dyadic  =</span> <span class="kw">num2dyadic</span>(<span class="kw">runif</span>(<span class="dv">1</span>)),</span>
<span id="cb15-5">  <span class="dt">times =</span> <span class="dv">5000</span></span>
<span id="cb15-6">)</span>
<span id="cb15-7"><span class="co">## Unit: microseconds</span></span>
<span id="cb15-8"><span class="co">##         expr    min      lq     mean  median      uq       max neval cld</span></span>
<span id="cb15-9"><span class="co">##  floatExpand 20.982 25.5930 35.66431 27.9130 37.6595  3504.444  5000  a </span></span>
<span id="cb15-10"><span class="co">##   num2dyadic 26.062 45.5035 67.28613 52.8915 69.0730 19308.745  5000   b</span></span></code></pre>
      </div>
      <p>
        It is faster. And I have checked that the two functions always return
        the same results.
      </p>
      <p>
        Moreover the “RHaskell” function allows more than the binary expansion,
        for example the ternary expansion:
      </p>
      <div class="sourceCode" id="cb16">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb16-1"><span class="kw">floatExpand</span>(<span class="dv">1</span><span class="op">/</span><span class="dv">3</span><span class="op">+</span><span class="dv">1</span><span class="op">/</span><span class="dv">27</span>, <span class="dt">base =</span> <span class="dv">3</span>)</span>
<span id="cb16-2"><span class="co">## [1] 1 0 1</span></span></code></pre>
      </div>
      <p>Quite nice, isn’t it ?</p>
      <div class="sourceCode" id="cb17">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb17-1"><span class="kw">dyn.unload</span>(dll)</span></code></pre>
      </div>
      <h2 id="update-the-foreign-library-stanza">
        2020 update: the ‘foreign-library’ stanza
      </h2>
      <p>
        Nowadays, there is a more convenient way to generate a Haskell DLL. I’m
        using <em>stack</em> now, and here is the contents of my
        <em>stack</em> project:
      </p>
      <pre><code>FloatExpansion1
├── FloatExpansion1.cabal
├── LICENSE
├── README.md
├── Setup.hs
├── src
│   └── FloatExpansion.hs
├── src-dll
│   └── FloatExpansionDLL.hs
├── stack.yaml
└── StartEnd.c</code></pre>
      <p>The file <strong>FloatExpansion1.cabal</strong> contains:</p>
      <pre class="cabal"><code>library
  hs-source-dirs:      src
  exposed-modules:     FloatExpansion
  build-depends:       base &gt;= 4.7 &amp;&amp; &lt; 5
  default-language:    Haskell2010
  ghc-options:         -Wall

foreign-library FloatExpansion1
  buildable:           True
  type:                native-shared
  if os(Windows)
    options: standalone
  other-modules:       FloatExpansionDLL
  build-depends:       base &gt;=4.7 &amp;&amp; &lt; 5
                     , FloatExpansion1
  hs-source-dirs:      src-dll
  c-sources:           StartEnd.c
  default-language:    Haskell2010</code></pre>
      <p>The file <strong>FloatExpansion.hs</strong>:</p>
      <div class="sourceCode" id="cb20">
        <pre
          class="sourceCode haskell"
        ><code class="sourceCode haskell"><span id="cb20-1"><span class="kw">module</span> <span class="dt">FloatExpansion</span></span>
<span id="cb20-2">  <span class="kw">where</span></span>
<span id="cb20-3"><span class="kw">import</span> <span class="dt">Numeric</span> (floatToDigits)</span>
<span id="cb20-4"></span>
<span id="cb20-5"><span class="ot">floatExpansion' ::</span> <span class="dt">RealFloat</span> a <span class="ot">=&gt;</span> <span class="dt">Integer</span> <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> [<span class="dt">Int</span>]</span>
<span id="cb20-6">floatExpansion' base u <span class="ot">=</span> <span class="fu">replicate</span> (<span class="op">-</span> <span class="fu">snd</span> expansion) <span class="dv">0</span> <span class="op">++</span> <span class="fu">fst</span> expansion</span>
<span id="cb20-7">  <span class="kw">where</span></span>
<span id="cb20-8">    expansion <span class="ot">=</span> floatToDigits base u</span></code></pre>
      </div>
      <p>The file <strong>FloatExpansionDLL.hs</strong>:</p>
      <div class="sourceCode" id="cb21">
        <pre
          class="sourceCode haskell"
        ><code class="sourceCode haskell"><span id="cb21-1"><span class="kw">module</span> <span class="dt">FloatExpansionDLL</span></span>
<span id="cb21-2">  <span class="kw">where</span></span>
<span id="cb21-3"><span class="kw">import</span> <span class="dt">FloatExpansion</span></span>
<span id="cb21-4"><span class="kw">import</span> <span class="dt">Foreign</span></span>
<span id="cb21-5"><span class="kw">import</span> <span class="dt">Foreign.C</span></span>
<span id="cb21-6"></span>
<span id="cb21-7">foreign export ccall<span class="ot"> floatExpansion ::</span> <span class="dt">Ptr</span> <span class="dt">CInt</span> <span class="ot">-&gt;</span> <span class="dt">Ptr</span> <span class="dt">CDouble</span> <span class="ot">-&gt;</span> <span class="dt">Ptr</span> <span class="dt">CString</span> <span class="ot">-&gt;</span> <span class="dt">IO</span> ()</span>
<span id="cb21-8"></span>
<span id="cb21-9"><span class="ot">floatExpansion ::</span> <span class="dt">Ptr</span> <span class="dt">CInt</span> <span class="ot">-&gt;</span> <span class="dt">Ptr</span> <span class="dt">CDouble</span> <span class="ot">-&gt;</span> <span class="dt">Ptr</span> <span class="dt">CString</span> <span class="ot">-&gt;</span> <span class="dt">IO</span> ()</span>
<span id="cb21-10">floatExpansion base u result <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb21-11">  base <span class="ot">&lt;-</span> peek base</span>
<span id="cb21-12">  u <span class="ot">&lt;-</span> peek u</span>
<span id="cb21-13">  expansion <span class="ot">&lt;-</span> newCString <span class="op">$</span> <span class="fu">show</span> <span class="op">$</span> floatExpansion' (<span class="fu">toInteger</span> base) u</span>
<span id="cb21-14">  poke result expansion</span></code></pre>
      </div>
      <p>Then, running <code>stack build</code> will generate the DLL.</p>
    </div>
  </div>
</div>
]]></description>
      <pubDate>Sat, 03 Jun 2017 00:00:00 UT</pubDate>
      <guid>https://laustep.github.io/stlahblog/posts/FloatExpansionHaskell.html</guid>
      <dc:creator>Stéphane Laurent</dc:creator>
      <category>R</category>
    </item>
  </channel>
</rss>

